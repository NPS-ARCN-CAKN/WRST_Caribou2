'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("WRST_CaribouDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class WRST_CaribouDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableCampaigns As CampaignsDataTable
    
    Private tableCaptures As CapturesDataTable
    
    Private tableCaribou As CaribouDataTable
    
    Private tableCompositionCounts As CompositionCountsDataTable
    
    Private tablePopulationEstimate As PopulationEstimateDataTable
    
    Private tableRadioTracking As RadioTrackingDataTable
    
    Private tableSurveyFlights As SurveyFlightsDataTable
    
    Private tableWorkLog As WorkLogDataTable
    
    Private tablexrefCompCountCaribou As xrefCompCountCaribouDataTable
    
    Private tablexrefPopulationCaribou As xrefPopulationCaribouDataTable
    
    Private tablexrefRadiotrackingCaribou As xrefRadiotrackingCaribouDataTable
    
    Private relationFK_Captures_Caribou As Global.System.Data.DataRelation
    
    Private relationFK_CompositionCounts_SurveyFlights As Global.System.Data.DataRelation
    
    Private relationFK_PopulationEstimate_SurveyFlights As Global.System.Data.DataRelation
    
    Private relationFK_RadioTracking_SurveyFlights As Global.System.Data.DataRelation
    
    Private relationFK_SurveyFlights_Campaigns As Global.System.Data.DataRelation
    
    Private relationFK_xrefCompCountCaribou_Caribou As Global.System.Data.DataRelation
    
    Private relationFK_xrefCompCountCaribou_CompositionCounts As Global.System.Data.DataRelation
    
    Private relationFK_xrefPopulationCaribou_Caribou As Global.System.Data.DataRelation
    
    Private relationFK_xrefPopulationCaribou_PopulationEstimate As Global.System.Data.DataRelation
    
    Private relationFK_xrefRadiotrackingCaribou_Caribou As Global.System.Data.DataRelation
    
    Private relationFK_xrefRadiotrackingCaribou_RadioTracking As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Campaigns")) Is Nothing) Then
                MyBase.Tables.Add(New CampaignsDataTable(ds.Tables("Campaigns")))
            End If
            If (Not (ds.Tables("Captures")) Is Nothing) Then
                MyBase.Tables.Add(New CapturesDataTable(ds.Tables("Captures")))
            End If
            If (Not (ds.Tables("Caribou")) Is Nothing) Then
                MyBase.Tables.Add(New CaribouDataTable(ds.Tables("Caribou")))
            End If
            If (Not (ds.Tables("CompositionCounts")) Is Nothing) Then
                MyBase.Tables.Add(New CompositionCountsDataTable(ds.Tables("CompositionCounts")))
            End If
            If (Not (ds.Tables("PopulationEstimate")) Is Nothing) Then
                MyBase.Tables.Add(New PopulationEstimateDataTable(ds.Tables("PopulationEstimate")))
            End If
            If (Not (ds.Tables("RadioTracking")) Is Nothing) Then
                MyBase.Tables.Add(New RadioTrackingDataTable(ds.Tables("RadioTracking")))
            End If
            If (Not (ds.Tables("SurveyFlights")) Is Nothing) Then
                MyBase.Tables.Add(New SurveyFlightsDataTable(ds.Tables("SurveyFlights")))
            End If
            If (Not (ds.Tables("WorkLog")) Is Nothing) Then
                MyBase.Tables.Add(New WorkLogDataTable(ds.Tables("WorkLog")))
            End If
            If (Not (ds.Tables("xrefCompCountCaribou")) Is Nothing) Then
                MyBase.Tables.Add(New xrefCompCountCaribouDataTable(ds.Tables("xrefCompCountCaribou")))
            End If
            If (Not (ds.Tables("xrefPopulationCaribou")) Is Nothing) Then
                MyBase.Tables.Add(New xrefPopulationCaribouDataTable(ds.Tables("xrefPopulationCaribou")))
            End If
            If (Not (ds.Tables("xrefRadiotrackingCaribou")) Is Nothing) Then
                MyBase.Tables.Add(New xrefRadiotrackingCaribouDataTable(ds.Tables("xrefRadiotrackingCaribou")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Campaigns() As CampaignsDataTable
        Get
            Return Me.tableCampaigns
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Captures() As CapturesDataTable
        Get
            Return Me.tableCaptures
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Caribou() As CaribouDataTable
        Get
            Return Me.tableCaribou
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CompositionCounts() As CompositionCountsDataTable
        Get
            Return Me.tableCompositionCounts
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PopulationEstimate() As PopulationEstimateDataTable
        Get
            Return Me.tablePopulationEstimate
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RadioTracking() As RadioTrackingDataTable
        Get
            Return Me.tableRadioTracking
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SurveyFlights() As SurveyFlightsDataTable
        Get
            Return Me.tableSurveyFlights
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WorkLog() As WorkLogDataTable
        Get
            Return Me.tableWorkLog
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property xrefCompCountCaribou() As xrefCompCountCaribouDataTable
        Get
            Return Me.tablexrefCompCountCaribou
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property xrefPopulationCaribou() As xrefPopulationCaribouDataTable
        Get
            Return Me.tablexrefPopulationCaribou
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property xrefRadiotrackingCaribou() As xrefRadiotrackingCaribouDataTable
        Get
            Return Me.tablexrefRadiotrackingCaribou
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As WRST_CaribouDataSet = CType(MyBase.Clone,WRST_CaribouDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("Campaigns")) Is Nothing) Then
                MyBase.Tables.Add(New CampaignsDataTable(ds.Tables("Campaigns")))
            End If
            If (Not (ds.Tables("Captures")) Is Nothing) Then
                MyBase.Tables.Add(New CapturesDataTable(ds.Tables("Captures")))
            End If
            If (Not (ds.Tables("Caribou")) Is Nothing) Then
                MyBase.Tables.Add(New CaribouDataTable(ds.Tables("Caribou")))
            End If
            If (Not (ds.Tables("CompositionCounts")) Is Nothing) Then
                MyBase.Tables.Add(New CompositionCountsDataTable(ds.Tables("CompositionCounts")))
            End If
            If (Not (ds.Tables("PopulationEstimate")) Is Nothing) Then
                MyBase.Tables.Add(New PopulationEstimateDataTable(ds.Tables("PopulationEstimate")))
            End If
            If (Not (ds.Tables("RadioTracking")) Is Nothing) Then
                MyBase.Tables.Add(New RadioTrackingDataTable(ds.Tables("RadioTracking")))
            End If
            If (Not (ds.Tables("SurveyFlights")) Is Nothing) Then
                MyBase.Tables.Add(New SurveyFlightsDataTable(ds.Tables("SurveyFlights")))
            End If
            If (Not (ds.Tables("WorkLog")) Is Nothing) Then
                MyBase.Tables.Add(New WorkLogDataTable(ds.Tables("WorkLog")))
            End If
            If (Not (ds.Tables("xrefCompCountCaribou")) Is Nothing) Then
                MyBase.Tables.Add(New xrefCompCountCaribouDataTable(ds.Tables("xrefCompCountCaribou")))
            End If
            If (Not (ds.Tables("xrefPopulationCaribou")) Is Nothing) Then
                MyBase.Tables.Add(New xrefPopulationCaribouDataTable(ds.Tables("xrefPopulationCaribou")))
            End If
            If (Not (ds.Tables("xrefRadiotrackingCaribou")) Is Nothing) Then
                MyBase.Tables.Add(New xrefRadiotrackingCaribouDataTable(ds.Tables("xrefRadiotrackingCaribou")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCampaigns = CType(MyBase.Tables("Campaigns"),CampaignsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCampaigns) Is Nothing) Then
                Me.tableCampaigns.InitVars
            End If
        End If
        Me.tableCaptures = CType(MyBase.Tables("Captures"),CapturesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCaptures) Is Nothing) Then
                Me.tableCaptures.InitVars
            End If
        End If
        Me.tableCaribou = CType(MyBase.Tables("Caribou"),CaribouDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCaribou) Is Nothing) Then
                Me.tableCaribou.InitVars
            End If
        End If
        Me.tableCompositionCounts = CType(MyBase.Tables("CompositionCounts"),CompositionCountsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCompositionCounts) Is Nothing) Then
                Me.tableCompositionCounts.InitVars
            End If
        End If
        Me.tablePopulationEstimate = CType(MyBase.Tables("PopulationEstimate"),PopulationEstimateDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePopulationEstimate) Is Nothing) Then
                Me.tablePopulationEstimate.InitVars
            End If
        End If
        Me.tableRadioTracking = CType(MyBase.Tables("RadioTracking"),RadioTrackingDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRadioTracking) Is Nothing) Then
                Me.tableRadioTracking.InitVars
            End If
        End If
        Me.tableSurveyFlights = CType(MyBase.Tables("SurveyFlights"),SurveyFlightsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSurveyFlights) Is Nothing) Then
                Me.tableSurveyFlights.InitVars
            End If
        End If
        Me.tableWorkLog = CType(MyBase.Tables("WorkLog"),WorkLogDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWorkLog) Is Nothing) Then
                Me.tableWorkLog.InitVars
            End If
        End If
        Me.tablexrefCompCountCaribou = CType(MyBase.Tables("xrefCompCountCaribou"),xrefCompCountCaribouDataTable)
        If (initTable = true) Then
            If (Not (Me.tablexrefCompCountCaribou) Is Nothing) Then
                Me.tablexrefCompCountCaribou.InitVars
            End If
        End If
        Me.tablexrefPopulationCaribou = CType(MyBase.Tables("xrefPopulationCaribou"),xrefPopulationCaribouDataTable)
        If (initTable = true) Then
            If (Not (Me.tablexrefPopulationCaribou) Is Nothing) Then
                Me.tablexrefPopulationCaribou.InitVars
            End If
        End If
        Me.tablexrefRadiotrackingCaribou = CType(MyBase.Tables("xrefRadiotrackingCaribou"),xrefRadiotrackingCaribouDataTable)
        If (initTable = true) Then
            If (Not (Me.tablexrefRadiotrackingCaribou) Is Nothing) Then
                Me.tablexrefRadiotrackingCaribou.InitVars
            End If
        End If
        Me.relationFK_Captures_Caribou = Me.Relations("FK_Captures_Caribou")
        Me.relationFK_CompositionCounts_SurveyFlights = Me.Relations("FK_CompositionCounts_SurveyFlights")
        Me.relationFK_PopulationEstimate_SurveyFlights = Me.Relations("FK_PopulationEstimate_SurveyFlights")
        Me.relationFK_RadioTracking_SurveyFlights = Me.Relations("FK_RadioTracking_SurveyFlights")
        Me.relationFK_SurveyFlights_Campaigns = Me.Relations("FK_SurveyFlights_Campaigns")
        Me.relationFK_xrefCompCountCaribou_Caribou = Me.Relations("FK_xrefCompCountCaribou_Caribou")
        Me.relationFK_xrefCompCountCaribou_CompositionCounts = Me.Relations("FK_xrefCompCountCaribou_CompositionCounts")
        Me.relationFK_xrefPopulationCaribou_Caribou = Me.Relations("FK_xrefPopulationCaribou_Caribou")
        Me.relationFK_xrefPopulationCaribou_PopulationEstimate = Me.Relations("FK_xrefPopulationCaribou_PopulationEstimate")
        Me.relationFK_xrefRadiotrackingCaribou_Caribou = Me.Relations("FK_xrefRadiotrackingCaribou_Caribou")
        Me.relationFK_xrefRadiotrackingCaribou_RadioTracking = Me.Relations("FK_xrefRadiotrackingCaribou_RadioTracking")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "WRST_CaribouDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/WRST_CaribouDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCampaigns = New CampaignsDataTable()
        MyBase.Tables.Add(Me.tableCampaigns)
        Me.tableCaptures = New CapturesDataTable()
        MyBase.Tables.Add(Me.tableCaptures)
        Me.tableCaribou = New CaribouDataTable()
        MyBase.Tables.Add(Me.tableCaribou)
        Me.tableCompositionCounts = New CompositionCountsDataTable()
        MyBase.Tables.Add(Me.tableCompositionCounts)
        Me.tablePopulationEstimate = New PopulationEstimateDataTable()
        MyBase.Tables.Add(Me.tablePopulationEstimate)
        Me.tableRadioTracking = New RadioTrackingDataTable()
        MyBase.Tables.Add(Me.tableRadioTracking)
        Me.tableSurveyFlights = New SurveyFlightsDataTable()
        MyBase.Tables.Add(Me.tableSurveyFlights)
        Me.tableWorkLog = New WorkLogDataTable()
        MyBase.Tables.Add(Me.tableWorkLog)
        Me.tablexrefCompCountCaribou = New xrefCompCountCaribouDataTable()
        MyBase.Tables.Add(Me.tablexrefCompCountCaribou)
        Me.tablexrefPopulationCaribou = New xrefPopulationCaribouDataTable()
        MyBase.Tables.Add(Me.tablexrefPopulationCaribou)
        Me.tablexrefRadiotrackingCaribou = New xrefRadiotrackingCaribouDataTable()
        MyBase.Tables.Add(Me.tablexrefRadiotrackingCaribou)
        Me.relationFK_Captures_Caribou = New Global.System.Data.DataRelation("FK_Captures_Caribou", New Global.System.Data.DataColumn() {Me.tableCaribou.ProjectIDColumn, Me.tableCaribou.AnimalIDColumn}, New Global.System.Data.DataColumn() {Me.tableCaptures.ProjectIDColumn, Me.tableCaptures.AnimalIDColumn}, false)
        Me.Relations.Add(Me.relationFK_Captures_Caribou)
        Me.relationFK_CompositionCounts_SurveyFlights = New Global.System.Data.DataRelation("FK_CompositionCounts_SurveyFlights", New Global.System.Data.DataColumn() {Me.tableSurveyFlights.FlightIDColumn}, New Global.System.Data.DataColumn() {Me.tableCompositionCounts.FlightIDColumn}, false)
        Me.Relations.Add(Me.relationFK_CompositionCounts_SurveyFlights)
        Me.relationFK_PopulationEstimate_SurveyFlights = New Global.System.Data.DataRelation("FK_PopulationEstimate_SurveyFlights", New Global.System.Data.DataColumn() {Me.tableSurveyFlights.FlightIDColumn}, New Global.System.Data.DataColumn() {Me.tablePopulationEstimate.FlightIDColumn}, false)
        Me.Relations.Add(Me.relationFK_PopulationEstimate_SurveyFlights)
        Me.relationFK_RadioTracking_SurveyFlights = New Global.System.Data.DataRelation("FK_RadioTracking_SurveyFlights", New Global.System.Data.DataColumn() {Me.tableSurveyFlights.FlightIDColumn}, New Global.System.Data.DataColumn() {Me.tableRadioTracking.FlightIDColumn}, false)
        Me.Relations.Add(Me.relationFK_RadioTracking_SurveyFlights)
        Me.relationFK_SurveyFlights_Campaigns = New Global.System.Data.DataRelation("FK_SurveyFlights_Campaigns", New Global.System.Data.DataColumn() {Me.tableCampaigns.CampaignIDColumn}, New Global.System.Data.DataColumn() {Me.tableSurveyFlights.CampaignIDColumn}, false)
        Me.Relations.Add(Me.relationFK_SurveyFlights_Campaigns)
        Me.relationFK_xrefCompCountCaribou_Caribou = New Global.System.Data.DataRelation("FK_xrefCompCountCaribou_Caribou", New Global.System.Data.DataColumn() {Me.tableCaribou.ProjectIDColumn, Me.tableCaribou.AnimalIDColumn}, New Global.System.Data.DataColumn() {Me.tablexrefCompCountCaribou.ProjectIDColumn, Me.tablexrefCompCountCaribou.AnimalIDColumn}, false)
        Me.Relations.Add(Me.relationFK_xrefCompCountCaribou_Caribou)
        Me.relationFK_xrefCompCountCaribou_CompositionCounts = New Global.System.Data.DataRelation("FK_xrefCompCountCaribou_CompositionCounts", New Global.System.Data.DataColumn() {Me.tableCompositionCounts.CCIDColumn}, New Global.System.Data.DataColumn() {Me.tablexrefCompCountCaribou.CCIDColumn}, false)
        Me.Relations.Add(Me.relationFK_xrefCompCountCaribou_CompositionCounts)
        Me.relationFK_xrefPopulationCaribou_Caribou = New Global.System.Data.DataRelation("FK_xrefPopulationCaribou_Caribou", New Global.System.Data.DataColumn() {Me.tableCaribou.ProjectIDColumn, Me.tableCaribou.AnimalIDColumn}, New Global.System.Data.DataColumn() {Me.tablexrefPopulationCaribou.ProjectIDColumn, Me.tablexrefPopulationCaribou.AnimalIDColumn}, false)
        Me.Relations.Add(Me.relationFK_xrefPopulationCaribou_Caribou)
        Me.relationFK_xrefPopulationCaribou_PopulationEstimate = New Global.System.Data.DataRelation("FK_xrefPopulationCaribou_PopulationEstimate", New Global.System.Data.DataColumn() {Me.tablePopulationEstimate.EIDColumn}, New Global.System.Data.DataColumn() {Me.tablexrefPopulationCaribou.EIDColumn}, false)
        Me.Relations.Add(Me.relationFK_xrefPopulationCaribou_PopulationEstimate)
        Me.relationFK_xrefRadiotrackingCaribou_Caribou = New Global.System.Data.DataRelation("FK_xrefRadiotrackingCaribou_Caribou", New Global.System.Data.DataColumn() {Me.tableCaribou.ProjectIDColumn, Me.tableCaribou.AnimalIDColumn}, New Global.System.Data.DataColumn() {Me.tablexrefRadiotrackingCaribou.ProjectIDColumn, Me.tablexrefRadiotrackingCaribou.AnimalIDColumn}, false)
        Me.Relations.Add(Me.relationFK_xrefRadiotrackingCaribou_Caribou)
        Me.relationFK_xrefRadiotrackingCaribou_RadioTracking = New Global.System.Data.DataRelation("FK_xrefRadiotrackingCaribou_RadioTracking", New Global.System.Data.DataColumn() {Me.tableRadioTracking.RTIDColumn}, New Global.System.Data.DataColumn() {Me.tablexrefRadiotrackingCaribou.RTIDColumn}, false)
        Me.Relations.Add(Me.relationFK_xrefRadiotrackingCaribou_RadioTracking)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeCampaigns() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeCaptures() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeCaribou() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeCompositionCounts() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePopulationEstimate() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeRadioTracking() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeSurveyFlights() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeWorkLog() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializexrefCompCountCaribou() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializexrefPopulationCaribou() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializexrefRadiotrackingCaribou() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As WRST_CaribouDataSet = New WRST_CaribouDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub CampaignsRowChangeEventHandler(ByVal sender As Object, ByVal e As CampaignsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub CapturesRowChangeEventHandler(ByVal sender As Object, ByVal e As CapturesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub CaribouRowChangeEventHandler(ByVal sender As Object, ByVal e As CaribouRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub CompositionCountsRowChangeEventHandler(ByVal sender As Object, ByVal e As CompositionCountsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PopulationEstimateRowChangeEventHandler(ByVal sender As Object, ByVal e As PopulationEstimateRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub RadioTrackingRowChangeEventHandler(ByVal sender As Object, ByVal e As RadioTrackingRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub SurveyFlightsRowChangeEventHandler(ByVal sender As Object, ByVal e As SurveyFlightsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub WorkLogRowChangeEventHandler(ByVal sender As Object, ByVal e As WorkLogRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub xrefCompCountCaribouRowChangeEventHandler(ByVal sender As Object, ByVal e As xrefCompCountCaribouRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub xrefPopulationCaribouRowChangeEventHandler(ByVal sender As Object, ByVal e As xrefPopulationCaribouRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub xrefRadiotrackingCaribouRowChangeEventHandler(ByVal sender As Object, ByVal e As xrefRadiotrackingCaribouRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CampaignsDataTable
        Inherits Global.System.Data.TypedTableBase(Of CampaignsRow)
        
        Private columnCampaignID As Global.System.Data.DataColumn
        
        Private columnCampaign As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnSurveyType As Global.System.Data.DataColumn
        
        Private columnHerd As Global.System.Data.DataColumn
        
        Private columnStartDate As Global.System.Data.DataColumn
        
        Private columnEndDate As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnPersonnel As Global.System.Data.DataColumn
        
        Private columnNotes As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnProtocolIRMAReference As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Campaigns"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CampaignIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCampaignID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CampaignColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCampaign
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SurveyTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSurveyType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HerdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHerd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StartDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EndDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEndDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PersonnelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPersonnel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProtocolIRMAReferenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProtocolIRMAReference
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CampaignsRow
            Get
                Return CType(Me.Rows(index),CampaignsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CampaignsRowChanging As CampaignsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CampaignsRowChanged As CampaignsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CampaignsRowDeleting As CampaignsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CampaignsRowDeleted As CampaignsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddCampaignsRow(ByVal row As CampaignsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddCampaignsRow(ByVal CampaignID As String, ByVal Campaign As String, ByVal Year As Integer, ByVal SurveyType As String, ByVal Herd As String, ByVal StartDate As Date, ByVal EndDate As Date, ByVal Description As String, ByVal Personnel As String, ByVal Notes As String, ByVal RecordInsertedDate As Date, ByVal RecordInsertedBy As String, ByVal ProtocolIRMAReference As Integer) As CampaignsRow
            Dim rowCampaignsRow As CampaignsRow = CType(Me.NewRow,CampaignsRow)
            Dim columnValuesArray() As Object = New Object() {CampaignID, Campaign, Year, SurveyType, Herd, StartDate, EndDate, Description, Personnel, Notes, RecordInsertedDate, RecordInsertedBy, ProtocolIRMAReference}
            rowCampaignsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCampaignsRow)
            Return rowCampaignsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByCampaignID(ByVal CampaignID As String) As CampaignsRow
            Return CType(Me.Rows.Find(New Object() {CampaignID}),CampaignsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CampaignsDataTable = CType(MyBase.Clone,CampaignsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CampaignsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCampaignID = MyBase.Columns("CampaignID")
            Me.columnCampaign = MyBase.Columns("Campaign")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnSurveyType = MyBase.Columns("SurveyType")
            Me.columnHerd = MyBase.Columns("Herd")
            Me.columnStartDate = MyBase.Columns("StartDate")
            Me.columnEndDate = MyBase.Columns("EndDate")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnPersonnel = MyBase.Columns("Personnel")
            Me.columnNotes = MyBase.Columns("Notes")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnProtocolIRMAReference = MyBase.Columns("ProtocolIRMAReference")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCampaignID = New Global.System.Data.DataColumn("CampaignID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCampaignID)
            Me.columnCampaign = New Global.System.Data.DataColumn("Campaign", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCampaign)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnSurveyType = New Global.System.Data.DataColumn("SurveyType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSurveyType)
            Me.columnHerd = New Global.System.Data.DataColumn("Herd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHerd)
            Me.columnStartDate = New Global.System.Data.DataColumn("StartDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartDate)
            Me.columnEndDate = New Global.System.Data.DataColumn("EndDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEndDate)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnPersonnel = New Global.System.Data.DataColumn("Personnel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPersonnel)
            Me.columnNotes = New Global.System.Data.DataColumn("Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotes)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnProtocolIRMAReference = New Global.System.Data.DataColumn("ProtocolIRMAReference", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProtocolIRMAReference)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCampaignID}, true))
            Me.columnCampaignID.AllowDBNull = false
            Me.columnCampaignID.Unique = true
            Me.columnCampaignID.MaxLength = 50
            Me.columnCampaign.AllowDBNull = false
            Me.columnCampaign.MaxLength = 100
            Me.columnYear.AllowDBNull = false
            Me.columnSurveyType.AllowDBNull = false
            Me.columnSurveyType.MaxLength = 17
            Me.columnHerd.AllowDBNull = false
            Me.columnHerd.MaxLength = 8
            Me.columnDescription.MaxLength = 2147483647
            Me.columnPersonnel.MaxLength = 255
            Me.columnNotes.MaxLength = 2147483647
            Me.columnRecordInsertedDate.AllowDBNull = false
            Me.columnRecordInsertedBy.AllowDBNull = false
            Me.columnRecordInsertedBy.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewCampaignsRow() As CampaignsRow
            Return CType(Me.NewRow,CampaignsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CampaignsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CampaignsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CampaignsRowChangedEvent) Is Nothing) Then
                RaiseEvent CampaignsRowChanged(Me, New CampaignsRowChangeEvent(CType(e.Row,CampaignsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CampaignsRowChangingEvent) Is Nothing) Then
                RaiseEvent CampaignsRowChanging(Me, New CampaignsRowChangeEvent(CType(e.Row,CampaignsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CampaignsRowDeletedEvent) Is Nothing) Then
                RaiseEvent CampaignsRowDeleted(Me, New CampaignsRowChangeEvent(CType(e.Row,CampaignsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CampaignsRowDeletingEvent) Is Nothing) Then
                RaiseEvent CampaignsRowDeleting(Me, New CampaignsRowChangeEvent(CType(e.Row,CampaignsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveCampaignsRow(ByVal row As CampaignsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As WRST_CaribouDataSet = New WRST_CaribouDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CampaignsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CapturesDataTable
        Inherits Global.System.Data.TypedTableBase(Of CapturesRow)
        
        Private columnAnimalID As Global.System.Data.DataColumn
        
        Private columnCaptureDate As Global.System.Data.DataColumn
        
        Private columnCrew As Global.System.Data.DataColumn
        
        Private columnShooter As Global.System.Data.DataColumn
        
        Private columnFrequency As Global.System.Data.DataColumn
        
        Private columnVisualCollar As Global.System.Data.DataColumn
        
        Private columnSerialNumber As Global.System.Data.DataColumn
        
        Private columnCaptureLatitude As Global.System.Data.DataColumn
        
        Private columnCaptureLongitude As Global.System.Data.DataColumn
        
        Private columnOldFrequency As Global.System.Data.DataColumn
        
        Private columnOldVisualCollar As Global.System.Data.DataColumn
        
        Private columnGeneralLocation As Global.System.Data.DataColumn
        
        Private columnTimeStartChase As Global.System.Data.DataColumn
        
        Private columnTimeFirstHitBounce As Global.System.Data.DataColumn
        
        Private columnTimeSecordHitBounce As Global.System.Data.DataColumn
        
        Private columnTimeThirdHitBounce As Global.System.Data.DataColumn
        
        Private columnTimeVisibleEffect As Global.System.Data.DataColumn
        
        Private columnTimeAnimalDown As Global.System.Data.DataColumn
        
        Private columnDartLocation As Global.System.Data.DataColumn
        
        Private columnAnesthetic As Global.System.Data.DataColumn
        
        Private columnAnestheticDosage_mg As Global.System.Data.DataColumn
        
        Private columnAnestheticConcentration_mg_ml As Global.System.Data.DataColumn
        
        Private columnSedative As Global.System.Data.DataColumn
        
        Private columnSedativeDosage_mg As Global.System.Data.DataColumn
        
        Private columnSedativeConcentration_mg_ml As Global.System.Data.DataColumn
        
        Private columnNumHits As Global.System.Data.DataColumn
        
        Private columnNumMisses As Global.System.Data.DataColumn
        
        Private columnDrugEffect As Global.System.Data.DataColumn
        
        Private columnInitialBodyTemp As Global.System.Data.DataColumn
        
        Private columnInitialBodyTempTime As Global.System.Data.DataColumn
        
        Private columnFinalBodyTemperature As Global.System.Data.DataColumn
        
        Private columnFinalBodyTemperatureTime As Global.System.Data.DataColumn
        
        Private columnAdditionalDrugs As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnEstimatedAge As Global.System.Data.DataColumn
        
        Private columnWithCalf As Global.System.Data.DataColumn
        
        Private columnLactating As Global.System.Data.DataColumn
        
        Private columnBodyCondition As Global.System.Data.DataColumn
        
        Private columnWeight_Kg As Global.System.Data.DataColumn
        
        Private columnBodyLength As Global.System.Data.DataColumn
        
        Private columnNeckCircumference As Global.System.Data.DataColumn
        
        Private columnJaw As Global.System.Data.DataColumn
        
        Private columnMetatarsusLength As Global.System.Data.DataColumn
        
        Private columnHindfootLength As Global.System.Data.DataColumn
        
        Private columnChestGirth As Global.System.Data.DataColumn
        
        Private columnBloodSampleRed As Global.System.Data.DataColumn
        
        Private columnBloodSamplePurple As Global.System.Data.DataColumn
        
        Private columnBloodSampleGreen As Global.System.Data.DataColumn
        
        Private columnAnestheticReversal As Global.System.Data.DataColumn
        
        Private columnAnestheticReversalDosage_mg As Global.System.Data.DataColumn
        
        Private columnAnestheticReversalConcentration_mg_ml As Global.System.Data.DataColumn
        
        Private columnAnestheticReversalRoute As Global.System.Data.DataColumn
        
        Private columnAnestheticReversalTime As Global.System.Data.DataColumn
        
        Private columnSedativeReversal As Global.System.Data.DataColumn
        
        Private columnSedativeReversalDosage_mg As Global.System.Data.DataColumn
        
        Private columnSedativeReversalConcentration_mg_ml As Global.System.Data.DataColumn
        
        Private columnSedativeReversalRoute As Global.System.Data.DataColumn
        
        Private columnSedativeReversalTime As Global.System.Data.DataColumn
        
        Private columnTimeStanding As Global.System.Data.DataColumn
        
        Private columnTimeMobile As Global.System.Data.DataColumn
        
        Private columnComments As Global.System.Data.DataColumn
        
        Private columnCaptureID As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnProjectID As Global.System.Data.DataColumn
        
        Private columnTS As Global.System.Data.DataColumn
        
        Private columnAnestheticDosage_ml As Global.System.Data.DataColumn
        
        Private columnSedativeDosage_ml As Global.System.Data.DataColumn
        
        Private columnAnestheticReversalDosage_ml As Global.System.Data.DataColumn
        
        Private columnSedativeReversalDosage_ml As Global.System.Data.DataColumn
        
        Private columnProtocolVersion As Global.System.Data.DataColumn
        
        Private columnSOPNumber As Global.System.Data.DataColumn
        
        Private columnSOPVersion As Global.System.Data.DataColumn
        
        Private columnCertificationDate As Global.System.Data.DataColumn
        
        Private columnCertifiedBy As Global.System.Data.DataColumn
        
        Private columnProtocolIRMAReference As Global.System.Data.DataColumn
        
        Private columnCertificationLevel As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Captures"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AnimalIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnimalID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CaptureDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCaptureDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CrewColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCrew
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ShooterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShooter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FrequencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFrequency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property VisualCollarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVisualCollar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SerialNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerialNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CaptureLatitudeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCaptureLatitude
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CaptureLongitudeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCaptureLongitude
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OldFrequencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOldFrequency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OldVisualCollarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOldVisualCollar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GeneralLocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGeneralLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TimeStartChaseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTimeStartChase
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TimeFirstHitBounceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTimeFirstHitBounce
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TimeSecordHitBounceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTimeSecordHitBounce
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TimeThirdHitBounceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTimeThirdHitBounce
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TimeVisibleEffectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTimeVisibleEffect
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TimeAnimalDownColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTimeAnimalDown
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DartLocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDartLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AnestheticColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnesthetic
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AnestheticDosage_mgColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnestheticDosage_mg
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AnestheticConcentration_mg_mlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnestheticConcentration_mg_ml
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SedativeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSedative
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SedativeDosage_mgColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSedativeDosage_mg
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SedativeConcentration_mg_mlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSedativeConcentration_mg_ml
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NumHitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumHits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NumMissesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumMisses
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DrugEffectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDrugEffect
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property InitialBodyTempColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInitialBodyTemp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property InitialBodyTempTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInitialBodyTempTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FinalBodyTemperatureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinalBodyTemperature
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FinalBodyTemperatureTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinalBodyTemperatureTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AdditionalDrugsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdditionalDrugs
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EstimatedAgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstimatedAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WithCalfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWithCalf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LactatingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLactating
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BodyConditionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBodyCondition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Weight_KgColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWeight_Kg
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BodyLengthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBodyLength
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NeckCircumferenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNeckCircumference
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property JawColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJaw
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MetatarsusLengthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMetatarsusLength
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HindfootLengthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHindfootLength
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ChestGirthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnChestGirth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BloodSampleRedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBloodSampleRed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BloodSamplePurpleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBloodSamplePurple
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BloodSampleGreenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBloodSampleGreen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AnestheticReversalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnestheticReversal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AnestheticReversalDosage_mgColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnestheticReversalDosage_mg
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AnestheticReversalConcentration_mg_mlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnestheticReversalConcentration_mg_ml
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AnestheticReversalRouteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnestheticReversalRoute
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AnestheticReversalTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnestheticReversalTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SedativeReversalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSedativeReversal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SedativeReversalDosage_mgColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSedativeReversalDosage_mg
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SedativeReversalConcentration_mg_mlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSedativeReversalConcentration_mg_ml
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SedativeReversalRouteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSedativeReversalRoute
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SedativeReversalTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSedativeReversalTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TimeStandingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTimeStanding
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TimeMobileColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTimeMobile
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CommentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CaptureIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCaptureID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjectIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AnestheticDosage_mlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnestheticDosage_ml
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SedativeDosage_mlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSedativeDosage_ml
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AnestheticReversalDosage_mlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnestheticReversalDosage_ml
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SedativeReversalDosage_mlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSedativeReversalDosage_ml
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProtocolVersionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProtocolVersion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SOPNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOPNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SOPVersionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOPVersion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CertificationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCertificationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CertifiedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCertifiedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProtocolIRMAReferenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProtocolIRMAReference
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CertificationLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCertificationLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CapturesRow
            Get
                Return CType(Me.Rows(index),CapturesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CapturesRowChanging As CapturesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CapturesRowChanged As CapturesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CapturesRowDeleting As CapturesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CapturesRowDeleted As CapturesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddCapturesRow(ByVal row As CapturesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddCapturesRow( _
                    ByVal AnimalID As String,  _
                    ByVal CaptureDate As Date,  _
                    ByVal Crew As String,  _
                    ByVal Shooter As String,  _
                    ByVal Frequency As Decimal,  _
                    ByVal VisualCollar As String,  _
                    ByVal SerialNumber As Integer,  _
                    ByVal CaptureLatitude As Decimal,  _
                    ByVal CaptureLongitude As Decimal,  _
                    ByVal OldFrequency As Decimal,  _
                    ByVal OldVisualCollar As String,  _
                    ByVal GeneralLocation As String,  _
                    ByVal TimeStartChase As System.TimeSpan,  _
                    ByVal TimeFirstHitBounce As System.TimeSpan,  _
                    ByVal TimeSecordHitBounce As System.TimeSpan,  _
                    ByVal TimeThirdHitBounce As System.TimeSpan,  _
                    ByVal TimeVisibleEffect As System.TimeSpan,  _
                    ByVal TimeAnimalDown As System.TimeSpan,  _
                    ByVal DartLocation As String,  _
                    ByVal Anesthetic As String,  _
                    ByVal AnestheticDosage_mg As Decimal,  _
                    ByVal AnestheticConcentration_mg_ml As Integer,  _
                    ByVal Sedative As String,  _
                    ByVal SedativeDosage_mg As Decimal,  _
                    ByVal SedativeConcentration_mg_ml As Integer,  _
                    ByVal NumHits As Integer,  _
                    ByVal NumMisses As Integer,  _
                    ByVal DrugEffect As Integer,  _
                    ByVal InitialBodyTemp As Decimal,  _
                    ByVal InitialBodyTempTime As System.TimeSpan,  _
                    ByVal FinalBodyTemperature As Decimal,  _
                    ByVal FinalBodyTemperatureTime As System.TimeSpan,  _
                    ByVal AdditionalDrugs As String,  _
                    ByVal Sex As String,  _
                    ByVal EstimatedAge As Integer,  _
                    ByVal WithCalf As Integer,  _
                    ByVal Lactating As Integer,  _
                    ByVal BodyCondition As String,  _
                    ByVal Weight_Kg As Decimal,  _
                    ByVal BodyLength As Decimal,  _
                    ByVal NeckCircumference As Decimal,  _
                    ByVal Jaw As Decimal,  _
                    ByVal MetatarsusLength As Decimal,  _
                    ByVal HindfootLength As Decimal,  _
                    ByVal ChestGirth As Decimal,  _
                    ByVal BloodSampleRed As Integer,  _
                    ByVal BloodSamplePurple As Integer,  _
                    ByVal BloodSampleGreen As Integer,  _
                    ByVal AnestheticReversal As String,  _
                    ByVal AnestheticReversalDosage_mg As Decimal,  _
                    ByVal AnestheticReversalConcentration_mg_ml As Integer,  _
                    ByVal AnestheticReversalRoute As String,  _
                    ByVal AnestheticReversalTime As System.TimeSpan,  _
                    ByVal SedativeReversal As String,  _
                    ByVal SedativeReversalDosage_mg As Decimal,  _
                    ByVal SedativeReversalConcentration_mg_ml As Integer,  _
                    ByVal SedativeReversalRoute As String,  _
                    ByVal SedativeReversalTime As System.TimeSpan,  _
                    ByVal TimeStanding As System.TimeSpan,  _
                    ByVal TimeMobile As System.TimeSpan,  _
                    ByVal Comments As String,  _
                    ByVal CaptureID As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal ProjectID As String,  _
                    ByVal TS() As Byte,  _
                    ByVal AnestheticDosage_ml As Decimal,  _
                    ByVal SedativeDosage_ml As Decimal,  _
                    ByVal AnestheticReversalDosage_ml As Decimal,  _
                    ByVal SedativeReversalDosage_ml As Decimal,  _
                    ByVal ProtocolVersion As Decimal,  _
                    ByVal SOPNumber As Integer,  _
                    ByVal SOPVersion As Decimal,  _
                    ByVal CertificationDate As Date,  _
                    ByVal CertifiedBy As String,  _
                    ByVal ProtocolIRMAReference As Integer,  _
                    ByVal CertificationLevel As String) As CapturesRow
            Dim rowCapturesRow As CapturesRow = CType(Me.NewRow,CapturesRow)
            Dim columnValuesArray() As Object = New Object() {AnimalID, CaptureDate, Crew, Shooter, Frequency, VisualCollar, SerialNumber, CaptureLatitude, CaptureLongitude, OldFrequency, OldVisualCollar, GeneralLocation, TimeStartChase, TimeFirstHitBounce, TimeSecordHitBounce, TimeThirdHitBounce, TimeVisibleEffect, TimeAnimalDown, DartLocation, Anesthetic, AnestheticDosage_mg, AnestheticConcentration_mg_ml, Sedative, SedativeDosage_mg, SedativeConcentration_mg_ml, NumHits, NumMisses, DrugEffect, InitialBodyTemp, InitialBodyTempTime, FinalBodyTemperature, FinalBodyTemperatureTime, AdditionalDrugs, Sex, EstimatedAge, WithCalf, Lactating, BodyCondition, Weight_Kg, BodyLength, NeckCircumference, Jaw, MetatarsusLength, HindfootLength, ChestGirth, BloodSampleRed, BloodSamplePurple, BloodSampleGreen, AnestheticReversal, AnestheticReversalDosage_mg, AnestheticReversalConcentration_mg_ml, AnestheticReversalRoute, AnestheticReversalTime, SedativeReversal, SedativeReversalDosage_mg, SedativeReversalConcentration_mg_ml, SedativeReversalRoute, SedativeReversalTime, TimeStanding, TimeMobile, Comments, CaptureID, RecordInsertedDate, RecordInsertedBy, ProjectID, TS, AnestheticDosage_ml, SedativeDosage_ml, AnestheticReversalDosage_ml, SedativeReversalDosage_ml, ProtocolVersion, SOPNumber, SOPVersion, CertificationDate, CertifiedBy, ProtocolIRMAReference, CertificationLevel}
            rowCapturesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCapturesRow)
            Return rowCapturesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByCaptureID(ByVal CaptureID As String) As CapturesRow
            Return CType(Me.Rows.Find(New Object() {CaptureID}),CapturesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CapturesDataTable = CType(MyBase.Clone,CapturesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CapturesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnAnimalID = MyBase.Columns("AnimalID")
            Me.columnCaptureDate = MyBase.Columns("CaptureDate")
            Me.columnCrew = MyBase.Columns("Crew")
            Me.columnShooter = MyBase.Columns("Shooter")
            Me.columnFrequency = MyBase.Columns("Frequency")
            Me.columnVisualCollar = MyBase.Columns("VisualCollar")
            Me.columnSerialNumber = MyBase.Columns("SerialNumber")
            Me.columnCaptureLatitude = MyBase.Columns("CaptureLatitude")
            Me.columnCaptureLongitude = MyBase.Columns("CaptureLongitude")
            Me.columnOldFrequency = MyBase.Columns("OldFrequency")
            Me.columnOldVisualCollar = MyBase.Columns("OldVisualCollar")
            Me.columnGeneralLocation = MyBase.Columns("GeneralLocation")
            Me.columnTimeStartChase = MyBase.Columns("TimeStartChase")
            Me.columnTimeFirstHitBounce = MyBase.Columns("TimeFirstHitBounce")
            Me.columnTimeSecordHitBounce = MyBase.Columns("TimeSecordHitBounce")
            Me.columnTimeThirdHitBounce = MyBase.Columns("TimeThirdHitBounce")
            Me.columnTimeVisibleEffect = MyBase.Columns("TimeVisibleEffect")
            Me.columnTimeAnimalDown = MyBase.Columns("TimeAnimalDown")
            Me.columnDartLocation = MyBase.Columns("DartLocation")
            Me.columnAnesthetic = MyBase.Columns("Anesthetic")
            Me.columnAnestheticDosage_mg = MyBase.Columns("AnestheticDosage_mg")
            Me.columnAnestheticConcentration_mg_ml = MyBase.Columns("AnestheticConcentration_mg_ml")
            Me.columnSedative = MyBase.Columns("Sedative")
            Me.columnSedativeDosage_mg = MyBase.Columns("SedativeDosage_mg")
            Me.columnSedativeConcentration_mg_ml = MyBase.Columns("SedativeConcentration_mg_ml")
            Me.columnNumHits = MyBase.Columns("NumHits")
            Me.columnNumMisses = MyBase.Columns("NumMisses")
            Me.columnDrugEffect = MyBase.Columns("DrugEffect")
            Me.columnInitialBodyTemp = MyBase.Columns("InitialBodyTemp")
            Me.columnInitialBodyTempTime = MyBase.Columns("InitialBodyTempTime")
            Me.columnFinalBodyTemperature = MyBase.Columns("FinalBodyTemperature")
            Me.columnFinalBodyTemperatureTime = MyBase.Columns("FinalBodyTemperatureTime")
            Me.columnAdditionalDrugs = MyBase.Columns("AdditionalDrugs")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnEstimatedAge = MyBase.Columns("EstimatedAge")
            Me.columnWithCalf = MyBase.Columns("WithCalf")
            Me.columnLactating = MyBase.Columns("Lactating")
            Me.columnBodyCondition = MyBase.Columns("BodyCondition")
            Me.columnWeight_Kg = MyBase.Columns("Weight_Kg")
            Me.columnBodyLength = MyBase.Columns("BodyLength")
            Me.columnNeckCircumference = MyBase.Columns("NeckCircumference")
            Me.columnJaw = MyBase.Columns("Jaw")
            Me.columnMetatarsusLength = MyBase.Columns("MetatarsusLength")
            Me.columnHindfootLength = MyBase.Columns("HindfootLength")
            Me.columnChestGirth = MyBase.Columns("ChestGirth")
            Me.columnBloodSampleRed = MyBase.Columns("BloodSampleRed")
            Me.columnBloodSamplePurple = MyBase.Columns("BloodSamplePurple")
            Me.columnBloodSampleGreen = MyBase.Columns("BloodSampleGreen")
            Me.columnAnestheticReversal = MyBase.Columns("AnestheticReversal")
            Me.columnAnestheticReversalDosage_mg = MyBase.Columns("AnestheticReversalDosage_mg")
            Me.columnAnestheticReversalConcentration_mg_ml = MyBase.Columns("AnestheticReversalConcentration_mg_ml")
            Me.columnAnestheticReversalRoute = MyBase.Columns("AnestheticReversalRoute")
            Me.columnAnestheticReversalTime = MyBase.Columns("AnestheticReversalTime")
            Me.columnSedativeReversal = MyBase.Columns("SedativeReversal")
            Me.columnSedativeReversalDosage_mg = MyBase.Columns("SedativeReversalDosage_mg")
            Me.columnSedativeReversalConcentration_mg_ml = MyBase.Columns("SedativeReversalConcentration_mg_ml")
            Me.columnSedativeReversalRoute = MyBase.Columns("SedativeReversalRoute")
            Me.columnSedativeReversalTime = MyBase.Columns("SedativeReversalTime")
            Me.columnTimeStanding = MyBase.Columns("TimeStanding")
            Me.columnTimeMobile = MyBase.Columns("TimeMobile")
            Me.columnComments = MyBase.Columns("Comments")
            Me.columnCaptureID = MyBase.Columns("CaptureID")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnProjectID = MyBase.Columns("ProjectID")
            Me.columnTS = MyBase.Columns("TS")
            Me.columnAnestheticDosage_ml = MyBase.Columns("AnestheticDosage_ml")
            Me.columnSedativeDosage_ml = MyBase.Columns("SedativeDosage_ml")
            Me.columnAnestheticReversalDosage_ml = MyBase.Columns("AnestheticReversalDosage_ml")
            Me.columnSedativeReversalDosage_ml = MyBase.Columns("SedativeReversalDosage_ml")
            Me.columnProtocolVersion = MyBase.Columns("ProtocolVersion")
            Me.columnSOPNumber = MyBase.Columns("SOPNumber")
            Me.columnSOPVersion = MyBase.Columns("SOPVersion")
            Me.columnCertificationDate = MyBase.Columns("CertificationDate")
            Me.columnCertifiedBy = MyBase.Columns("CertifiedBy")
            Me.columnProtocolIRMAReference = MyBase.Columns("ProtocolIRMAReference")
            Me.columnCertificationLevel = MyBase.Columns("CertificationLevel")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnAnimalID = New Global.System.Data.DataColumn("AnimalID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnimalID)
            Me.columnCaptureDate = New Global.System.Data.DataColumn("CaptureDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCaptureDate)
            Me.columnCrew = New Global.System.Data.DataColumn("Crew", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCrew)
            Me.columnShooter = New Global.System.Data.DataColumn("Shooter", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShooter)
            Me.columnFrequency = New Global.System.Data.DataColumn("Frequency", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFrequency)
            Me.columnVisualCollar = New Global.System.Data.DataColumn("VisualCollar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVisualCollar)
            Me.columnSerialNumber = New Global.System.Data.DataColumn("SerialNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerialNumber)
            Me.columnCaptureLatitude = New Global.System.Data.DataColumn("CaptureLatitude", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCaptureLatitude)
            Me.columnCaptureLongitude = New Global.System.Data.DataColumn("CaptureLongitude", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCaptureLongitude)
            Me.columnOldFrequency = New Global.System.Data.DataColumn("OldFrequency", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOldFrequency)
            Me.columnOldVisualCollar = New Global.System.Data.DataColumn("OldVisualCollar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOldVisualCollar)
            Me.columnGeneralLocation = New Global.System.Data.DataColumn("GeneralLocation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGeneralLocation)
            Me.columnTimeStartChase = New Global.System.Data.DataColumn("TimeStartChase", GetType(Global.System.TimeSpan), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTimeStartChase)
            Me.columnTimeFirstHitBounce = New Global.System.Data.DataColumn("TimeFirstHitBounce", GetType(Global.System.TimeSpan), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTimeFirstHitBounce)
            Me.columnTimeSecordHitBounce = New Global.System.Data.DataColumn("TimeSecordHitBounce", GetType(Global.System.TimeSpan), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTimeSecordHitBounce)
            Me.columnTimeThirdHitBounce = New Global.System.Data.DataColumn("TimeThirdHitBounce", GetType(Global.System.TimeSpan), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTimeThirdHitBounce)
            Me.columnTimeVisibleEffect = New Global.System.Data.DataColumn("TimeVisibleEffect", GetType(Global.System.TimeSpan), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTimeVisibleEffect)
            Me.columnTimeAnimalDown = New Global.System.Data.DataColumn("TimeAnimalDown", GetType(Global.System.TimeSpan), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTimeAnimalDown)
            Me.columnDartLocation = New Global.System.Data.DataColumn("DartLocation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDartLocation)
            Me.columnAnesthetic = New Global.System.Data.DataColumn("Anesthetic", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnesthetic)
            Me.columnAnestheticDosage_mg = New Global.System.Data.DataColumn("AnestheticDosage_mg", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnestheticDosage_mg)
            Me.columnAnestheticConcentration_mg_ml = New Global.System.Data.DataColumn("AnestheticConcentration_mg_ml", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnestheticConcentration_mg_ml)
            Me.columnSedative = New Global.System.Data.DataColumn("Sedative", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSedative)
            Me.columnSedativeDosage_mg = New Global.System.Data.DataColumn("SedativeDosage_mg", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSedativeDosage_mg)
            Me.columnSedativeConcentration_mg_ml = New Global.System.Data.DataColumn("SedativeConcentration_mg_ml", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSedativeConcentration_mg_ml)
            Me.columnNumHits = New Global.System.Data.DataColumn("NumHits", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumHits)
            Me.columnNumMisses = New Global.System.Data.DataColumn("NumMisses", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumMisses)
            Me.columnDrugEffect = New Global.System.Data.DataColumn("DrugEffect", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDrugEffect)
            Me.columnInitialBodyTemp = New Global.System.Data.DataColumn("InitialBodyTemp", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInitialBodyTemp)
            Me.columnInitialBodyTempTime = New Global.System.Data.DataColumn("InitialBodyTempTime", GetType(Global.System.TimeSpan), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInitialBodyTempTime)
            Me.columnFinalBodyTemperature = New Global.System.Data.DataColumn("FinalBodyTemperature", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinalBodyTemperature)
            Me.columnFinalBodyTemperatureTime = New Global.System.Data.DataColumn("FinalBodyTemperatureTime", GetType(Global.System.TimeSpan), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinalBodyTemperatureTime)
            Me.columnAdditionalDrugs = New Global.System.Data.DataColumn("AdditionalDrugs", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdditionalDrugs)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnEstimatedAge = New Global.System.Data.DataColumn("EstimatedAge", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstimatedAge)
            Me.columnWithCalf = New Global.System.Data.DataColumn("WithCalf", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWithCalf)
            Me.columnLactating = New Global.System.Data.DataColumn("Lactating", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLactating)
            Me.columnBodyCondition = New Global.System.Data.DataColumn("BodyCondition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBodyCondition)
            Me.columnWeight_Kg = New Global.System.Data.DataColumn("Weight_Kg", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeight_Kg)
            Me.columnBodyLength = New Global.System.Data.DataColumn("BodyLength", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBodyLength)
            Me.columnNeckCircumference = New Global.System.Data.DataColumn("NeckCircumference", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNeckCircumference)
            Me.columnJaw = New Global.System.Data.DataColumn("Jaw", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJaw)
            Me.columnMetatarsusLength = New Global.System.Data.DataColumn("MetatarsusLength", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMetatarsusLength)
            Me.columnHindfootLength = New Global.System.Data.DataColumn("HindfootLength", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHindfootLength)
            Me.columnChestGirth = New Global.System.Data.DataColumn("ChestGirth", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChestGirth)
            Me.columnBloodSampleRed = New Global.System.Data.DataColumn("BloodSampleRed", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBloodSampleRed)
            Me.columnBloodSamplePurple = New Global.System.Data.DataColumn("BloodSamplePurple", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBloodSamplePurple)
            Me.columnBloodSampleGreen = New Global.System.Data.DataColumn("BloodSampleGreen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBloodSampleGreen)
            Me.columnAnestheticReversal = New Global.System.Data.DataColumn("AnestheticReversal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnestheticReversal)
            Me.columnAnestheticReversalDosage_mg = New Global.System.Data.DataColumn("AnestheticReversalDosage_mg", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnestheticReversalDosage_mg)
            Me.columnAnestheticReversalConcentration_mg_ml = New Global.System.Data.DataColumn("AnestheticReversalConcentration_mg_ml", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnestheticReversalConcentration_mg_ml)
            Me.columnAnestheticReversalRoute = New Global.System.Data.DataColumn("AnestheticReversalRoute", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnestheticReversalRoute)
            Me.columnAnestheticReversalTime = New Global.System.Data.DataColumn("AnestheticReversalTime", GetType(Global.System.TimeSpan), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnestheticReversalTime)
            Me.columnSedativeReversal = New Global.System.Data.DataColumn("SedativeReversal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSedativeReversal)
            Me.columnSedativeReversalDosage_mg = New Global.System.Data.DataColumn("SedativeReversalDosage_mg", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSedativeReversalDosage_mg)
            Me.columnSedativeReversalConcentration_mg_ml = New Global.System.Data.DataColumn("SedativeReversalConcentration_mg_ml", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSedativeReversalConcentration_mg_ml)
            Me.columnSedativeReversalRoute = New Global.System.Data.DataColumn("SedativeReversalRoute", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSedativeReversalRoute)
            Me.columnSedativeReversalTime = New Global.System.Data.DataColumn("SedativeReversalTime", GetType(Global.System.TimeSpan), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSedativeReversalTime)
            Me.columnTimeStanding = New Global.System.Data.DataColumn("TimeStanding", GetType(Global.System.TimeSpan), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTimeStanding)
            Me.columnTimeMobile = New Global.System.Data.DataColumn("TimeMobile", GetType(Global.System.TimeSpan), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTimeMobile)
            Me.columnComments = New Global.System.Data.DataColumn("Comments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComments)
            Me.columnCaptureID = New Global.System.Data.DataColumn("CaptureID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCaptureID)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnProjectID = New Global.System.Data.DataColumn("ProjectID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectID)
            Me.columnTS = New Global.System.Data.DataColumn("TS", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTS)
            Me.columnAnestheticDosage_ml = New Global.System.Data.DataColumn("AnestheticDosage_ml", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnestheticDosage_ml)
            Me.columnSedativeDosage_ml = New Global.System.Data.DataColumn("SedativeDosage_ml", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSedativeDosage_ml)
            Me.columnAnestheticReversalDosage_ml = New Global.System.Data.DataColumn("AnestheticReversalDosage_ml", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnestheticReversalDosage_ml)
            Me.columnSedativeReversalDosage_ml = New Global.System.Data.DataColumn("SedativeReversalDosage_ml", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSedativeReversalDosage_ml)
            Me.columnProtocolVersion = New Global.System.Data.DataColumn("ProtocolVersion", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProtocolVersion)
            Me.columnSOPNumber = New Global.System.Data.DataColumn("SOPNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOPNumber)
            Me.columnSOPVersion = New Global.System.Data.DataColumn("SOPVersion", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOPVersion)
            Me.columnCertificationDate = New Global.System.Data.DataColumn("CertificationDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCertificationDate)
            Me.columnCertifiedBy = New Global.System.Data.DataColumn("CertifiedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCertifiedBy)
            Me.columnProtocolIRMAReference = New Global.System.Data.DataColumn("ProtocolIRMAReference", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProtocolIRMAReference)
            Me.columnCertificationLevel = New Global.System.Data.DataColumn("CertificationLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCertificationLevel)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCaptureID}, true))
            Me.columnAnimalID.AllowDBNull = false
            Me.columnAnimalID.MaxLength = 16
            Me.columnCaptureDate.AllowDBNull = false
            Me.columnCrew.MaxLength = 255
            Me.columnShooter.MaxLength = 20
            Me.columnVisualCollar.MaxLength = 4
            Me.columnOldVisualCollar.MaxLength = 4
            Me.columnGeneralLocation.MaxLength = 255
            Me.columnDartLocation.MaxLength = 50
            Me.columnAnesthetic.MaxLength = 50
            Me.columnSedative.MaxLength = 50
            Me.columnAdditionalDrugs.MaxLength = 100
            Me.columnSex.AllowDBNull = false
            Me.columnSex.MaxLength = 1
            Me.columnBodyCondition.MaxLength = 10
            Me.columnAnestheticReversal.MaxLength = 50
            Me.columnAnestheticReversalRoute.MaxLength = 50
            Me.columnSedativeReversal.MaxLength = 50
            Me.columnSedativeReversalRoute.MaxLength = 50
            Me.columnComments.MaxLength = 1000
            Me.columnCaptureID.AllowDBNull = false
            Me.columnCaptureID.Unique = true
            Me.columnCaptureID.MaxLength = 50
            Me.columnRecordInsertedDate.AllowDBNull = false
            Me.columnRecordInsertedBy.AllowDBNull = false
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnProjectID.AllowDBNull = false
            Me.columnProjectID.MaxLength = 16
            Me.columnTS.ReadOnly = true
            Me.columnProtocolVersion.AllowDBNull = false
            Me.columnSOPNumber.AllowDBNull = false
            Me.columnSOPVersion.AllowDBNull = false
            Me.columnCertifiedBy.MaxLength = 50
            Me.columnCertificationLevel.AllowDBNull = false
            Me.columnCertificationLevel.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewCapturesRow() As CapturesRow
            Return CType(Me.NewRow,CapturesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CapturesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CapturesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CapturesRowChangedEvent) Is Nothing) Then
                RaiseEvent CapturesRowChanged(Me, New CapturesRowChangeEvent(CType(e.Row,CapturesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CapturesRowChangingEvent) Is Nothing) Then
                RaiseEvent CapturesRowChanging(Me, New CapturesRowChangeEvent(CType(e.Row,CapturesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CapturesRowDeletedEvent) Is Nothing) Then
                RaiseEvent CapturesRowDeleted(Me, New CapturesRowChangeEvent(CType(e.Row,CapturesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CapturesRowDeletingEvent) Is Nothing) Then
                RaiseEvent CapturesRowDeleting(Me, New CapturesRowChangeEvent(CType(e.Row,CapturesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveCapturesRow(ByVal row As CapturesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As WRST_CaribouDataSet = New WRST_CaribouDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CapturesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CaribouDataTable
        Inherits Global.System.Data.TypedTableBase(Of CaribouRow)
        
        Private columnProjectID As Global.System.Data.DataColumn
        
        Private columnAnimalID As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnCaptureDate As Global.System.Data.DataColumn
        
        Private columnAgeAtCapture As Global.System.Data.DataColumn
        
        Private columnMortalityDate As Global.System.Data.DataColumn
        
        Private columnCarcassSeen As Global.System.Data.DataColumn
        
        Private columnSource As Global.System.Data.DataColumn
        
        Private columnNotes As Global.System.Data.DataColumn
        
        Private columnLegacyID As Global.System.Data.DataColumn
        
        Private columnOtherID As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnTS As Global.System.Data.DataColumn
        
        Private columnHerd As Global.System.Data.DataColumn
        
        Private columnProtocolVersion As Global.System.Data.DataColumn
        
        Private columnSOPNumber As Global.System.Data.DataColumn
        
        Private columnSOPVersion As Global.System.Data.DataColumn
        
        Private columnCertificationDate As Global.System.Data.DataColumn
        
        Private columnCertifiedBy As Global.System.Data.DataColumn
        
        Private columnProtocolIRMAReference As Global.System.Data.DataColumn
        
        Private columnCertificationLevel As Global.System.Data.DataColumn
        
        Private columnMortalityLat As Global.System.Data.DataColumn
        
        Private columnMortalityLon As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Caribou"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjectIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AnimalIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnimalID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CaptureDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCaptureDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AgeAtCaptureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAgeAtCapture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MortalityDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMortalityDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CarcassSeenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCarcassSeen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LegacyIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLegacyID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OtherIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOtherID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HerdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHerd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProtocolVersionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProtocolVersion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SOPNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOPNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SOPVersionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOPVersion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CertificationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCertificationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CertifiedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCertifiedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProtocolIRMAReferenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProtocolIRMAReference
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CertificationLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCertificationLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MortalityLatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMortalityLat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MortalityLonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMortalityLon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CaribouRow
            Get
                Return CType(Me.Rows(index),CaribouRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CaribouRowChanging As CaribouRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CaribouRowChanged As CaribouRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CaribouRowDeleting As CaribouRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CaribouRowDeleted As CaribouRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddCaribouRow(ByVal row As CaribouRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddCaribouRow( _
                    ByVal ProjectID As String,  _
                    ByVal AnimalID As String,  _
                    ByVal Sex As String,  _
                    ByVal CaptureDate As Date,  _
                    ByVal AgeAtCapture As Integer,  _
                    ByVal MortalityDate As Date,  _
                    ByVal CarcassSeen As Integer,  _
                    ByVal Source As String,  _
                    ByVal Notes As String,  _
                    ByVal LegacyID As String,  _
                    ByVal OtherID As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal TS() As Byte,  _
                    ByVal Herd As String,  _
                    ByVal ProtocolVersion As Decimal,  _
                    ByVal SOPNumber As Integer,  _
                    ByVal SOPVersion As Decimal,  _
                    ByVal CertificationDate As Date,  _
                    ByVal CertifiedBy As String,  _
                    ByVal ProtocolIRMAReference As Integer,  _
                    ByVal CertificationLevel As String,  _
                    ByVal MortalityLat As Decimal,  _
                    ByVal MortalityLon As Decimal) As CaribouRow
            Dim rowCaribouRow As CaribouRow = CType(Me.NewRow,CaribouRow)
            Dim columnValuesArray() As Object = New Object() {ProjectID, AnimalID, Sex, CaptureDate, AgeAtCapture, MortalityDate, CarcassSeen, Source, Notes, LegacyID, OtherID, RecordInsertedDate, RecordInsertedBy, TS, Herd, ProtocolVersion, SOPNumber, SOPVersion, CertificationDate, CertifiedBy, ProtocolIRMAReference, CertificationLevel, MortalityLat, MortalityLon}
            rowCaribouRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCaribouRow)
            Return rowCaribouRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByProjectIDAnimalID(ByVal ProjectID As String, ByVal AnimalID As String) As CaribouRow
            Return CType(Me.Rows.Find(New Object() {ProjectID, AnimalID}),CaribouRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CaribouDataTable = CType(MyBase.Clone,CaribouDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CaribouDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnProjectID = MyBase.Columns("ProjectID")
            Me.columnAnimalID = MyBase.Columns("AnimalID")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnCaptureDate = MyBase.Columns("CaptureDate")
            Me.columnAgeAtCapture = MyBase.Columns("AgeAtCapture")
            Me.columnMortalityDate = MyBase.Columns("MortalityDate")
            Me.columnCarcassSeen = MyBase.Columns("CarcassSeen")
            Me.columnSource = MyBase.Columns("Source")
            Me.columnNotes = MyBase.Columns("Notes")
            Me.columnLegacyID = MyBase.Columns("LegacyID")
            Me.columnOtherID = MyBase.Columns("OtherID")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnTS = MyBase.Columns("TS")
            Me.columnHerd = MyBase.Columns("Herd")
            Me.columnProtocolVersion = MyBase.Columns("ProtocolVersion")
            Me.columnSOPNumber = MyBase.Columns("SOPNumber")
            Me.columnSOPVersion = MyBase.Columns("SOPVersion")
            Me.columnCertificationDate = MyBase.Columns("CertificationDate")
            Me.columnCertifiedBy = MyBase.Columns("CertifiedBy")
            Me.columnProtocolIRMAReference = MyBase.Columns("ProtocolIRMAReference")
            Me.columnCertificationLevel = MyBase.Columns("CertificationLevel")
            Me.columnMortalityLat = MyBase.Columns("MortalityLat")
            Me.columnMortalityLon = MyBase.Columns("MortalityLon")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnProjectID = New Global.System.Data.DataColumn("ProjectID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectID)
            Me.columnAnimalID = New Global.System.Data.DataColumn("AnimalID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnimalID)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnCaptureDate = New Global.System.Data.DataColumn("CaptureDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCaptureDate)
            Me.columnAgeAtCapture = New Global.System.Data.DataColumn("AgeAtCapture", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAgeAtCapture)
            Me.columnMortalityDate = New Global.System.Data.DataColumn("MortalityDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMortalityDate)
            Me.columnCarcassSeen = New Global.System.Data.DataColumn("CarcassSeen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCarcassSeen)
            Me.columnSource = New Global.System.Data.DataColumn("Source", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSource)
            Me.columnNotes = New Global.System.Data.DataColumn("Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotes)
            Me.columnLegacyID = New Global.System.Data.DataColumn("LegacyID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLegacyID)
            Me.columnOtherID = New Global.System.Data.DataColumn("OtherID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOtherID)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnTS = New Global.System.Data.DataColumn("TS", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTS)
            Me.columnHerd = New Global.System.Data.DataColumn("Herd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHerd)
            Me.columnProtocolVersion = New Global.System.Data.DataColumn("ProtocolVersion", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProtocolVersion)
            Me.columnSOPNumber = New Global.System.Data.DataColumn("SOPNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOPNumber)
            Me.columnSOPVersion = New Global.System.Data.DataColumn("SOPVersion", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOPVersion)
            Me.columnCertificationDate = New Global.System.Data.DataColumn("CertificationDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCertificationDate)
            Me.columnCertifiedBy = New Global.System.Data.DataColumn("CertifiedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCertifiedBy)
            Me.columnProtocolIRMAReference = New Global.System.Data.DataColumn("ProtocolIRMAReference", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProtocolIRMAReference)
            Me.columnCertificationLevel = New Global.System.Data.DataColumn("CertificationLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCertificationLevel)
            Me.columnMortalityLat = New Global.System.Data.DataColumn("MortalityLat", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMortalityLat)
            Me.columnMortalityLon = New Global.System.Data.DataColumn("MortalityLon", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMortalityLon)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnProjectID, Me.columnAnimalID}, true))
            Me.columnProjectID.AllowDBNull = false
            Me.columnProjectID.MaxLength = 16
            Me.columnAnimalID.AllowDBNull = false
            Me.columnAnimalID.MaxLength = 16
            Me.columnSex.MaxLength = 1
            Me.columnSource.MaxLength = 255
            Me.columnNotes.MaxLength = 4000
            Me.columnLegacyID.MaxLength = 50
            Me.columnOtherID.MaxLength = 50
            Me.columnRecordInsertedDate.AllowDBNull = false
            Me.columnRecordInsertedBy.AllowDBNull = false
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnTS.ReadOnly = true
            Me.columnHerd.MaxLength = 8
            Me.columnProtocolVersion.AllowDBNull = false
            Me.columnSOPNumber.AllowDBNull = false
            Me.columnSOPVersion.AllowDBNull = false
            Me.columnCertifiedBy.MaxLength = 50
            Me.columnCertificationLevel.AllowDBNull = false
            Me.columnCertificationLevel.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewCaribouRow() As CaribouRow
            Return CType(Me.NewRow,CaribouRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CaribouRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CaribouRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CaribouRowChangedEvent) Is Nothing) Then
                RaiseEvent CaribouRowChanged(Me, New CaribouRowChangeEvent(CType(e.Row,CaribouRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CaribouRowChangingEvent) Is Nothing) Then
                RaiseEvent CaribouRowChanging(Me, New CaribouRowChangeEvent(CType(e.Row,CaribouRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CaribouRowDeletedEvent) Is Nothing) Then
                RaiseEvent CaribouRowDeleted(Me, New CaribouRowChangeEvent(CType(e.Row,CaribouRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CaribouRowDeletingEvent) Is Nothing) Then
                RaiseEvent CaribouRowDeleting(Me, New CaribouRowChangeEvent(CType(e.Row,CaribouRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveCaribouRow(ByVal row As CaribouRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As WRST_CaribouDataSet = New WRST_CaribouDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CaribouDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CompositionCountsDataTable
        Inherits Global.System.Data.TypedTableBase(Of CompositionCountsRow)
        
        Private columnSightingDate As Global.System.Data.DataColumn
        
        Private columnHerd As Global.System.Data.DataColumn
        
        Private columnGroupNumber As Global.System.Data.DataColumn
        
        Private columnSearchArea As Global.System.Data.DataColumn
        
        Private columnSmallBull As Global.System.Data.DataColumn
        
        Private columnMediumBull As Global.System.Data.DataColumn
        
        Private columnLargeBull As Global.System.Data.DataColumn
        
        Private columnCow As Global.System.Data.DataColumn
        
        Private columnCalf As Global.System.Data.DataColumn
        
        Private columnIndeterminate As Global.System.Data.DataColumn
        
        Private columnWaypoint As Global.System.Data.DataColumn
        
        Private columnFrequencies As Global.System.Data.DataColumn
        
        Private columnFlightID As Global.System.Data.DataColumn
        
        Private columnCCID As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnTS As Global.System.Data.DataColumn
        
        Private columnSourceFilename As Global.System.Data.DataColumn
        
        Private columnComment As Global.System.Data.DataColumn
        
        Private columnLat As Global.System.Data.DataColumn
        
        Private columnLon As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CompositionCounts"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SightingDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSightingDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HerdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHerd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GroupNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroupNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SearchAreaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSearchArea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SmallBullColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSmallBull
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MediumBullColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMediumBull
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LargeBullColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLargeBull
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CowColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CalfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IndeterminateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIndeterminate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WaypointColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWaypoint
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FrequenciesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFrequencies
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FlightIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlightID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CCIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCCID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SourceFilenameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSourceFilename
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CommentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CompositionCountsRow
            Get
                Return CType(Me.Rows(index),CompositionCountsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CompositionCountsRowChanging As CompositionCountsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CompositionCountsRowChanged As CompositionCountsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CompositionCountsRowDeleting As CompositionCountsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CompositionCountsRowDeleted As CompositionCountsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddCompositionCountsRow(ByVal row As CompositionCountsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddCompositionCountsRow( _
                    ByVal SightingDate As Date,  _
                    ByVal Herd As String,  _
                    ByVal GroupNumber As Integer,  _
                    ByVal SearchArea As String,  _
                    ByVal SmallBull As Integer,  _
                    ByVal MediumBull As Integer,  _
                    ByVal LargeBull As Integer,  _
                    ByVal Cow As Integer,  _
                    ByVal Calf As Integer,  _
                    ByVal Indeterminate As Integer,  _
                    ByVal Waypoint As String,  _
                    ByVal Frequencies As String,  _
                    ByVal parentSurveyFlightsRowByFK_CompositionCounts_SurveyFlights As SurveyFlightsRow,  _
                    ByVal CCID As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal TS() As Byte,  _
                    ByVal SourceFilename As String,  _
                    ByVal Comment As String,  _
                    ByVal Lat As Decimal,  _
                    ByVal Lon As Decimal) As CompositionCountsRow
            Dim rowCompositionCountsRow As CompositionCountsRow = CType(Me.NewRow,CompositionCountsRow)
            Dim columnValuesArray() As Object = New Object() {SightingDate, Herd, GroupNumber, SearchArea, SmallBull, MediumBull, LargeBull, Cow, Calf, Indeterminate, Waypoint, Frequencies, Nothing, CCID, RecordInsertedDate, RecordInsertedBy, TS, SourceFilename, Comment, Lat, Lon}
            If (Not (parentSurveyFlightsRowByFK_CompositionCounts_SurveyFlights) Is Nothing) Then
                columnValuesArray(12) = parentSurveyFlightsRowByFK_CompositionCounts_SurveyFlights(22)
            End If
            rowCompositionCountsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCompositionCountsRow)
            Return rowCompositionCountsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByCCID(ByVal CCID As String) As CompositionCountsRow
            Return CType(Me.Rows.Find(New Object() {CCID}),CompositionCountsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CompositionCountsDataTable = CType(MyBase.Clone,CompositionCountsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CompositionCountsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSightingDate = MyBase.Columns("SightingDate")
            Me.columnHerd = MyBase.Columns("Herd")
            Me.columnGroupNumber = MyBase.Columns("GroupNumber")
            Me.columnSearchArea = MyBase.Columns("SearchArea")
            Me.columnSmallBull = MyBase.Columns("SmallBull")
            Me.columnMediumBull = MyBase.Columns("MediumBull")
            Me.columnLargeBull = MyBase.Columns("LargeBull")
            Me.columnCow = MyBase.Columns("Cow")
            Me.columnCalf = MyBase.Columns("Calf")
            Me.columnIndeterminate = MyBase.Columns("Indeterminate")
            Me.columnWaypoint = MyBase.Columns("Waypoint")
            Me.columnFrequencies = MyBase.Columns("Frequencies")
            Me.columnFlightID = MyBase.Columns("FlightID")
            Me.columnCCID = MyBase.Columns("CCID")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnTS = MyBase.Columns("TS")
            Me.columnSourceFilename = MyBase.Columns("SourceFilename")
            Me.columnComment = MyBase.Columns("Comment")
            Me.columnLat = MyBase.Columns("Lat")
            Me.columnLon = MyBase.Columns("Lon")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSightingDate = New Global.System.Data.DataColumn("SightingDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSightingDate)
            Me.columnHerd = New Global.System.Data.DataColumn("Herd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHerd)
            Me.columnGroupNumber = New Global.System.Data.DataColumn("GroupNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupNumber)
            Me.columnSearchArea = New Global.System.Data.DataColumn("SearchArea", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSearchArea)
            Me.columnSmallBull = New Global.System.Data.DataColumn("SmallBull", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSmallBull)
            Me.columnMediumBull = New Global.System.Data.DataColumn("MediumBull", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMediumBull)
            Me.columnLargeBull = New Global.System.Data.DataColumn("LargeBull", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLargeBull)
            Me.columnCow = New Global.System.Data.DataColumn("Cow", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCow)
            Me.columnCalf = New Global.System.Data.DataColumn("Calf", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalf)
            Me.columnIndeterminate = New Global.System.Data.DataColumn("Indeterminate", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIndeterminate)
            Me.columnWaypoint = New Global.System.Data.DataColumn("Waypoint", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWaypoint)
            Me.columnFrequencies = New Global.System.Data.DataColumn("Frequencies", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFrequencies)
            Me.columnFlightID = New Global.System.Data.DataColumn("FlightID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlightID)
            Me.columnCCID = New Global.System.Data.DataColumn("CCID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCID)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnTS = New Global.System.Data.DataColumn("TS", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTS)
            Me.columnSourceFilename = New Global.System.Data.DataColumn("SourceFilename", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSourceFilename)
            Me.columnComment = New Global.System.Data.DataColumn("Comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComment)
            Me.columnLat = New Global.System.Data.DataColumn("Lat", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLat)
            Me.columnLon = New Global.System.Data.DataColumn("Lon", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLon)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCCID}, true))
            Me.columnSightingDate.AllowDBNull = false
            Me.columnHerd.AllowDBNull = false
            Me.columnHerd.MaxLength = 8
            Me.columnGroupNumber.AllowDBNull = false
            Me.columnSearchArea.AllowDBNull = false
            Me.columnSearchArea.MaxLength = 20
            Me.columnSmallBull.AllowDBNull = false
            Me.columnMediumBull.AllowDBNull = false
            Me.columnLargeBull.AllowDBNull = false
            Me.columnCow.AllowDBNull = false
            Me.columnCalf.AllowDBNull = false
            Me.columnIndeterminate.AllowDBNull = false
            Me.columnWaypoint.AllowDBNull = false
            Me.columnWaypoint.MaxLength = 20
            Me.columnFrequencies.MaxLength = 255
            Me.columnFlightID.AllowDBNull = false
            Me.columnFlightID.MaxLength = 50
            Me.columnCCID.AllowDBNull = false
            Me.columnCCID.Unique = true
            Me.columnCCID.MaxLength = 50
            Me.columnRecordInsertedDate.AllowDBNull = false
            Me.columnRecordInsertedBy.AllowDBNull = false
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnTS.ReadOnly = true
            Me.columnSourceFilename.MaxLength = 255
            Me.columnComment.MaxLength = 255
            Me.columnLat.AllowDBNull = false
            Me.columnLon.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewCompositionCountsRow() As CompositionCountsRow
            Return CType(Me.NewRow,CompositionCountsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CompositionCountsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CompositionCountsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CompositionCountsRowChangedEvent) Is Nothing) Then
                RaiseEvent CompositionCountsRowChanged(Me, New CompositionCountsRowChangeEvent(CType(e.Row,CompositionCountsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CompositionCountsRowChangingEvent) Is Nothing) Then
                RaiseEvent CompositionCountsRowChanging(Me, New CompositionCountsRowChangeEvent(CType(e.Row,CompositionCountsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CompositionCountsRowDeletedEvent) Is Nothing) Then
                RaiseEvent CompositionCountsRowDeleted(Me, New CompositionCountsRowChangeEvent(CType(e.Row,CompositionCountsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CompositionCountsRowDeletingEvent) Is Nothing) Then
                RaiseEvent CompositionCountsRowDeleting(Me, New CompositionCountsRowChangeEvent(CType(e.Row,CompositionCountsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveCompositionCountsRow(ByVal row As CompositionCountsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As WRST_CaribouDataSet = New WRST_CaribouDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CompositionCountsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PopulationEstimateDataTable
        Inherits Global.System.Data.TypedTableBase(Of PopulationEstimateRow)
        
        Private columnHerd As Global.System.Data.DataColumn
        
        Private columnSearchArea As Global.System.Data.DataColumn
        
        Private columnGroupNumber As Global.System.Data.DataColumn
        
        Private columnWaypointName As Global.System.Data.DataColumn
        
        Private columnSightingDate As Global.System.Data.DataColumn
        
        Private columnSmallBull As Global.System.Data.DataColumn
        
        Private columnMediumBull As Global.System.Data.DataColumn
        
        Private columnLargeBull As Global.System.Data.DataColumn
        
        Private columnCow As Global.System.Data.DataColumn
        
        Private columnCalf As Global.System.Data.DataColumn
        
        Private columnInOrOut As Global.System.Data.DataColumn
        
        Private columnSeen As Global.System.Data.DataColumn
        
        Private columnMarked As Global.System.Data.DataColumn
        
        Private columnFrequenciesInGroup As Global.System.Data.DataColumn
        
        Private columnLat As Global.System.Data.DataColumn
        
        Private columnLon As Global.System.Data.DataColumn
        
        Private columnComment As Global.System.Data.DataColumn
        
        Private columnSourceFilename As Global.System.Data.DataColumn
        
        Private columnFlightID As Global.System.Data.DataColumn
        
        Private columnEID As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnTS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PopulationEstimate"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HerdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHerd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SearchAreaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSearchArea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GroupNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroupNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WaypointNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWaypointName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SightingDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSightingDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SmallBullColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSmallBull
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MediumBullColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMediumBull
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LargeBullColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLargeBull
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CowColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CalfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property InOrOutColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInOrOut
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SeenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MarkedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarked
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FrequenciesInGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFrequenciesInGroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CommentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SourceFilenameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSourceFilename
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FlightIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlightID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PopulationEstimateRow
            Get
                Return CType(Me.Rows(index),PopulationEstimateRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PopulationEstimateRowChanging As PopulationEstimateRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PopulationEstimateRowChanged As PopulationEstimateRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PopulationEstimateRowDeleting As PopulationEstimateRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PopulationEstimateRowDeleted As PopulationEstimateRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPopulationEstimateRow(ByVal row As PopulationEstimateRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPopulationEstimateRow( _
                    ByVal Herd As String,  _
                    ByVal SearchArea As String,  _
                    ByVal GroupNumber As Integer,  _
                    ByVal WaypointName As String,  _
                    ByVal SightingDate As Date,  _
                    ByVal SmallBull As Integer,  _
                    ByVal MediumBull As Integer,  _
                    ByVal LargeBull As Integer,  _
                    ByVal Cow As Integer,  _
                    ByVal Calf As Integer,  _
                    ByVal InOrOut As Integer,  _
                    ByVal Seen As Integer,  _
                    ByVal Marked As Integer,  _
                    ByVal FrequenciesInGroup As String,  _
                    ByVal Lat As Decimal,  _
                    ByVal Lon As Decimal,  _
                    ByVal Comment As String,  _
                    ByVal SourceFilename As String,  _
                    ByVal parentSurveyFlightsRowByFK_PopulationEstimate_SurveyFlights As SurveyFlightsRow,  _
                    ByVal EID As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal TS() As Byte) As PopulationEstimateRow
            Dim rowPopulationEstimateRow As PopulationEstimateRow = CType(Me.NewRow,PopulationEstimateRow)
            Dim columnValuesArray() As Object = New Object() {Herd, SearchArea, GroupNumber, WaypointName, SightingDate, SmallBull, MediumBull, LargeBull, Cow, Calf, InOrOut, Seen, Marked, FrequenciesInGroup, Lat, Lon, Comment, SourceFilename, Nothing, EID, RecordInsertedDate, RecordInsertedBy, TS}
            If (Not (parentSurveyFlightsRowByFK_PopulationEstimate_SurveyFlights) Is Nothing) Then
                columnValuesArray(18) = parentSurveyFlightsRowByFK_PopulationEstimate_SurveyFlights(22)
            End If
            rowPopulationEstimateRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPopulationEstimateRow)
            Return rowPopulationEstimateRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEID(ByVal EID As String) As PopulationEstimateRow
            Return CType(Me.Rows.Find(New Object() {EID}),PopulationEstimateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PopulationEstimateDataTable = CType(MyBase.Clone,PopulationEstimateDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PopulationEstimateDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnHerd = MyBase.Columns("Herd")
            Me.columnSearchArea = MyBase.Columns("SearchArea")
            Me.columnGroupNumber = MyBase.Columns("GroupNumber")
            Me.columnWaypointName = MyBase.Columns("WaypointName")
            Me.columnSightingDate = MyBase.Columns("SightingDate")
            Me.columnSmallBull = MyBase.Columns("SmallBull")
            Me.columnMediumBull = MyBase.Columns("MediumBull")
            Me.columnLargeBull = MyBase.Columns("LargeBull")
            Me.columnCow = MyBase.Columns("Cow")
            Me.columnCalf = MyBase.Columns("Calf")
            Me.columnInOrOut = MyBase.Columns("InOrOut")
            Me.columnSeen = MyBase.Columns("Seen")
            Me.columnMarked = MyBase.Columns("Marked")
            Me.columnFrequenciesInGroup = MyBase.Columns("FrequenciesInGroup")
            Me.columnLat = MyBase.Columns("Lat")
            Me.columnLon = MyBase.Columns("Lon")
            Me.columnComment = MyBase.Columns("Comment")
            Me.columnSourceFilename = MyBase.Columns("SourceFilename")
            Me.columnFlightID = MyBase.Columns("FlightID")
            Me.columnEID = MyBase.Columns("EID")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnTS = MyBase.Columns("TS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnHerd = New Global.System.Data.DataColumn("Herd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHerd)
            Me.columnSearchArea = New Global.System.Data.DataColumn("SearchArea", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSearchArea)
            Me.columnGroupNumber = New Global.System.Data.DataColumn("GroupNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupNumber)
            Me.columnWaypointName = New Global.System.Data.DataColumn("WaypointName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWaypointName)
            Me.columnSightingDate = New Global.System.Data.DataColumn("SightingDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSightingDate)
            Me.columnSmallBull = New Global.System.Data.DataColumn("SmallBull", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSmallBull)
            Me.columnMediumBull = New Global.System.Data.DataColumn("MediumBull", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMediumBull)
            Me.columnLargeBull = New Global.System.Data.DataColumn("LargeBull", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLargeBull)
            Me.columnCow = New Global.System.Data.DataColumn("Cow", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCow)
            Me.columnCalf = New Global.System.Data.DataColumn("Calf", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalf)
            Me.columnInOrOut = New Global.System.Data.DataColumn("InOrOut", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInOrOut)
            Me.columnSeen = New Global.System.Data.DataColumn("Seen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeen)
            Me.columnMarked = New Global.System.Data.DataColumn("Marked", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarked)
            Me.columnFrequenciesInGroup = New Global.System.Data.DataColumn("FrequenciesInGroup", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFrequenciesInGroup)
            Me.columnLat = New Global.System.Data.DataColumn("Lat", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLat)
            Me.columnLon = New Global.System.Data.DataColumn("Lon", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLon)
            Me.columnComment = New Global.System.Data.DataColumn("Comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComment)
            Me.columnSourceFilename = New Global.System.Data.DataColumn("SourceFilename", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSourceFilename)
            Me.columnFlightID = New Global.System.Data.DataColumn("FlightID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlightID)
            Me.columnEID = New Global.System.Data.DataColumn("EID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEID)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnTS = New Global.System.Data.DataColumn("TS", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEID}, true))
            Me.columnHerd.AllowDBNull = false
            Me.columnHerd.MaxLength = 8
            Me.columnSearchArea.AllowDBNull = false
            Me.columnSearchArea.MaxLength = 20
            Me.columnGroupNumber.AllowDBNull = false
            Me.columnWaypointName.AllowDBNull = false
            Me.columnWaypointName.MaxLength = 20
            Me.columnSightingDate.AllowDBNull = false
            Me.columnSmallBull.AllowDBNull = false
            Me.columnMediumBull.AllowDBNull = false
            Me.columnLargeBull.AllowDBNull = false
            Me.columnCow.AllowDBNull = false
            Me.columnCalf.AllowDBNull = false
            Me.columnSeen.AllowDBNull = false
            Me.columnMarked.AllowDBNull = false
            Me.columnFrequenciesInGroup.MaxLength = 100
            Me.columnLat.AllowDBNull = false
            Me.columnLon.AllowDBNull = false
            Me.columnComment.MaxLength = 255
            Me.columnSourceFilename.MaxLength = 255
            Me.columnFlightID.AllowDBNull = false
            Me.columnFlightID.MaxLength = 50
            Me.columnEID.AllowDBNull = false
            Me.columnEID.Unique = true
            Me.columnEID.MaxLength = 50
            Me.columnRecordInsertedDate.AllowDBNull = false
            Me.columnRecordInsertedBy.AllowDBNull = false
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnTS.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPopulationEstimateRow() As PopulationEstimateRow
            Return CType(Me.NewRow,PopulationEstimateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PopulationEstimateRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PopulationEstimateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PopulationEstimateRowChangedEvent) Is Nothing) Then
                RaiseEvent PopulationEstimateRowChanged(Me, New PopulationEstimateRowChangeEvent(CType(e.Row,PopulationEstimateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PopulationEstimateRowChangingEvent) Is Nothing) Then
                RaiseEvent PopulationEstimateRowChanging(Me, New PopulationEstimateRowChangeEvent(CType(e.Row,PopulationEstimateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PopulationEstimateRowDeletedEvent) Is Nothing) Then
                RaiseEvent PopulationEstimateRowDeleted(Me, New PopulationEstimateRowChangeEvent(CType(e.Row,PopulationEstimateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PopulationEstimateRowDeletingEvent) Is Nothing) Then
                RaiseEvent PopulationEstimateRowDeleting(Me, New PopulationEstimateRowChangeEvent(CType(e.Row,PopulationEstimateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePopulationEstimateRow(ByVal row As PopulationEstimateRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As WRST_CaribouDataSet = New WRST_CaribouDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PopulationEstimateDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RadioTrackingDataTable
        Inherits Global.System.Data.TypedTableBase(Of RadioTrackingRow)
        
        Private columnHerd As Global.System.Data.DataColumn
        
        Private columnGroupNumber As Global.System.Data.DataColumn
        
        Private columnFrequency As Global.System.Data.DataColumn
        
        Private columnVisualCollar As Global.System.Data.DataColumn
        
        Private columnSightingDate As Global.System.Data.DataColumn
        
        Private columnMode As Global.System.Data.DataColumn
        
        Private columnAccuracy As Global.System.Data.DataColumn
        
        Private columnBull As Global.System.Data.DataColumn
        
        Private columnCow As Global.System.Data.DataColumn
        
        Private columnCalf As Global.System.Data.DataColumn
        
        Private columnAdult As Global.System.Data.DataColumn
        
        Private columnUnknown As Global.System.Data.DataColumn
        
        Private columnWaypoint As Global.System.Data.DataColumn
        
        Private columnRetainedAntler As Global.System.Data.DataColumn
        
        Private columnDistendedUdders As Global.System.Data.DataColumn
        
        Private columnCalvesAtHeel As Global.System.Data.DataColumn
        
        Private columnSeen As Global.System.Data.DataColumn
        
        Private columnFlightID As Global.System.Data.DataColumn
        
        Private columnAnimalID As Global.System.Data.DataColumn
        
        Private columnProjectID As Global.System.Data.DataColumn
        
        Private columnRTID As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnSearchArea As Global.System.Data.DataColumn
        
        Private columnTS As Global.System.Data.DataColumn
        
        Private columnSourceFilename As Global.System.Data.DataColumn
        
        Private columnComment As Global.System.Data.DataColumn
        
        Private columnLat As Global.System.Data.DataColumn
        
        Private columnLon As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RadioTracking"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HerdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHerd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GroupNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroupNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FrequencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFrequency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property VisualCollarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVisualCollar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SightingDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSightingDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ModeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AccuracyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccuracy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BullColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBull
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CowColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CalfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AdultColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdult
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UnknownColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnknown
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WaypointColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWaypoint
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RetainedAntlerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRetainedAntler
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DistendedUddersColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistendedUdders
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CalvesAtHeelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalvesAtHeel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SeenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FlightIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlightID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AnimalIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnimalID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjectIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RTIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRTID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SearchAreaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSearchArea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SourceFilenameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSourceFilename
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CommentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RadioTrackingRow
            Get
                Return CType(Me.Rows(index),RadioTrackingRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RadioTrackingRowChanging As RadioTrackingRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RadioTrackingRowChanged As RadioTrackingRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RadioTrackingRowDeleting As RadioTrackingRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RadioTrackingRowDeleted As RadioTrackingRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddRadioTrackingRow(ByVal row As RadioTrackingRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddRadioTrackingRow( _
                    ByVal Herd As String,  _
                    ByVal GroupNumber As Integer,  _
                    ByVal Frequency As Double,  _
                    ByVal VisualCollar As String,  _
                    ByVal SightingDate As Date,  _
                    ByVal Mode As String,  _
                    ByVal Accuracy As Integer,  _
                    ByVal Bull As Integer,  _
                    ByVal Cow As Integer,  _
                    ByVal Calf As Integer,  _
                    ByVal Adult As Integer,  _
                    ByVal Unknown As Integer,  _
                    ByVal Waypoint As String,  _
                    ByVal RetainedAntler As Integer,  _
                    ByVal DistendedUdders As Integer,  _
                    ByVal CalvesAtHeel As Integer,  _
                    ByVal Seen As Integer,  _
                    ByVal parentSurveyFlightsRowByFK_RadioTracking_SurveyFlights As SurveyFlightsRow,  _
                    ByVal AnimalID As String,  _
                    ByVal ProjectID As String,  _
                    ByVal RTID As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal SearchArea As String,  _
                    ByVal TS() As Byte,  _
                    ByVal SourceFilename As String,  _
                    ByVal Comment As String,  _
                    ByVal Lat As Decimal,  _
                    ByVal Lon As Decimal) As RadioTrackingRow
            Dim rowRadioTrackingRow As RadioTrackingRow = CType(Me.NewRow,RadioTrackingRow)
            Dim columnValuesArray() As Object = New Object() {Herd, GroupNumber, Frequency, VisualCollar, SightingDate, Mode, Accuracy, Bull, Cow, Calf, Adult, Unknown, Waypoint, RetainedAntler, DistendedUdders, CalvesAtHeel, Seen, Nothing, AnimalID, ProjectID, RTID, RecordInsertedDate, RecordInsertedBy, SearchArea, TS, SourceFilename, Comment, Lat, Lon}
            If (Not (parentSurveyFlightsRowByFK_RadioTracking_SurveyFlights) Is Nothing) Then
                columnValuesArray(17) = parentSurveyFlightsRowByFK_RadioTracking_SurveyFlights(22)
            End If
            rowRadioTrackingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRadioTrackingRow)
            Return rowRadioTrackingRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByRTID(ByVal RTID As String) As RadioTrackingRow
            Return CType(Me.Rows.Find(New Object() {RTID}),RadioTrackingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RadioTrackingDataTable = CType(MyBase.Clone,RadioTrackingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RadioTrackingDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnHerd = MyBase.Columns("Herd")
            Me.columnGroupNumber = MyBase.Columns("GroupNumber")
            Me.columnFrequency = MyBase.Columns("Frequency")
            Me.columnVisualCollar = MyBase.Columns("VisualCollar")
            Me.columnSightingDate = MyBase.Columns("SightingDate")
            Me.columnMode = MyBase.Columns("Mode")
            Me.columnAccuracy = MyBase.Columns("Accuracy")
            Me.columnBull = MyBase.Columns("Bull")
            Me.columnCow = MyBase.Columns("Cow")
            Me.columnCalf = MyBase.Columns("Calf")
            Me.columnAdult = MyBase.Columns("Adult")
            Me.columnUnknown = MyBase.Columns("Unknown")
            Me.columnWaypoint = MyBase.Columns("Waypoint")
            Me.columnRetainedAntler = MyBase.Columns("RetainedAntler")
            Me.columnDistendedUdders = MyBase.Columns("DistendedUdders")
            Me.columnCalvesAtHeel = MyBase.Columns("CalvesAtHeel")
            Me.columnSeen = MyBase.Columns("Seen")
            Me.columnFlightID = MyBase.Columns("FlightID")
            Me.columnAnimalID = MyBase.Columns("AnimalID")
            Me.columnProjectID = MyBase.Columns("ProjectID")
            Me.columnRTID = MyBase.Columns("RTID")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnSearchArea = MyBase.Columns("SearchArea")
            Me.columnTS = MyBase.Columns("TS")
            Me.columnSourceFilename = MyBase.Columns("SourceFilename")
            Me.columnComment = MyBase.Columns("Comment")
            Me.columnLat = MyBase.Columns("Lat")
            Me.columnLon = MyBase.Columns("Lon")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnHerd = New Global.System.Data.DataColumn("Herd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHerd)
            Me.columnGroupNumber = New Global.System.Data.DataColumn("GroupNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupNumber)
            Me.columnFrequency = New Global.System.Data.DataColumn("Frequency", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFrequency)
            Me.columnVisualCollar = New Global.System.Data.DataColumn("VisualCollar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVisualCollar)
            Me.columnSightingDate = New Global.System.Data.DataColumn("SightingDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSightingDate)
            Me.columnMode = New Global.System.Data.DataColumn("Mode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMode)
            Me.columnAccuracy = New Global.System.Data.DataColumn("Accuracy", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccuracy)
            Me.columnBull = New Global.System.Data.DataColumn("Bull", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBull)
            Me.columnCow = New Global.System.Data.DataColumn("Cow", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCow)
            Me.columnCalf = New Global.System.Data.DataColumn("Calf", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalf)
            Me.columnAdult = New Global.System.Data.DataColumn("Adult", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdult)
            Me.columnUnknown = New Global.System.Data.DataColumn("Unknown", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnknown)
            Me.columnWaypoint = New Global.System.Data.DataColumn("Waypoint", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWaypoint)
            Me.columnRetainedAntler = New Global.System.Data.DataColumn("RetainedAntler", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRetainedAntler)
            Me.columnDistendedUdders = New Global.System.Data.DataColumn("DistendedUdders", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistendedUdders)
            Me.columnCalvesAtHeel = New Global.System.Data.DataColumn("CalvesAtHeel", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalvesAtHeel)
            Me.columnSeen = New Global.System.Data.DataColumn("Seen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeen)
            Me.columnFlightID = New Global.System.Data.DataColumn("FlightID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlightID)
            Me.columnAnimalID = New Global.System.Data.DataColumn("AnimalID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnimalID)
            Me.columnProjectID = New Global.System.Data.DataColumn("ProjectID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectID)
            Me.columnRTID = New Global.System.Data.DataColumn("RTID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRTID)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnSearchArea = New Global.System.Data.DataColumn("SearchArea", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSearchArea)
            Me.columnTS = New Global.System.Data.DataColumn("TS", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTS)
            Me.columnSourceFilename = New Global.System.Data.DataColumn("SourceFilename", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSourceFilename)
            Me.columnComment = New Global.System.Data.DataColumn("Comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComment)
            Me.columnLat = New Global.System.Data.DataColumn("Lat", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLat)
            Me.columnLon = New Global.System.Data.DataColumn("Lon", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLon)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnRTID}, true))
            Me.columnHerd.AllowDBNull = false
            Me.columnHerd.MaxLength = 8
            Me.columnGroupNumber.AllowDBNull = false
            Me.columnVisualCollar.MaxLength = 10
            Me.columnSightingDate.AllowDBNull = false
            Me.columnMode.MaxLength = 1
            Me.columnWaypoint.AllowDBNull = false
            Me.columnWaypoint.MaxLength = 20
            Me.columnFlightID.AllowDBNull = false
            Me.columnFlightID.MaxLength = 50
            Me.columnAnimalID.MaxLength = 16
            Me.columnProjectID.MaxLength = 16
            Me.columnRTID.AllowDBNull = false
            Me.columnRTID.Unique = true
            Me.columnRTID.MaxLength = 50
            Me.columnRecordInsertedDate.AllowDBNull = false
            Me.columnRecordInsertedBy.AllowDBNull = false
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnSearchArea.MaxLength = 15
            Me.columnTS.ReadOnly = true
            Me.columnSourceFilename.MaxLength = 255
            Me.columnComment.MaxLength = 255
            Me.columnLat.AllowDBNull = false
            Me.columnLon.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewRadioTrackingRow() As RadioTrackingRow
            Return CType(Me.NewRow,RadioTrackingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RadioTrackingRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RadioTrackingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RadioTrackingRowChangedEvent) Is Nothing) Then
                RaiseEvent RadioTrackingRowChanged(Me, New RadioTrackingRowChangeEvent(CType(e.Row,RadioTrackingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RadioTrackingRowChangingEvent) Is Nothing) Then
                RaiseEvent RadioTrackingRowChanging(Me, New RadioTrackingRowChangeEvent(CType(e.Row,RadioTrackingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RadioTrackingRowDeletedEvent) Is Nothing) Then
                RaiseEvent RadioTrackingRowDeleted(Me, New RadioTrackingRowChangeEvent(CType(e.Row,RadioTrackingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RadioTrackingRowDeletingEvent) Is Nothing) Then
                RaiseEvent RadioTrackingRowDeleting(Me, New RadioTrackingRowChangeEvent(CType(e.Row,RadioTrackingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveRadioTrackingRow(ByVal row As RadioTrackingRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As WRST_CaribouDataSet = New WRST_CaribouDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RadioTrackingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SurveyFlightsDataTable
        Inherits Global.System.Data.TypedTableBase(Of SurveyFlightsRow)
        
        Private columnCrewNumber As Global.System.Data.DataColumn
        
        Private columnPilot As Global.System.Data.DataColumn
        
        Private columnObserver1 As Global.System.Data.DataColumn
        
        Private columnObserver2 As Global.System.Data.DataColumn
        
        Private columnAircraftType As Global.System.Data.DataColumn
        
        Private columnTailNo As Global.System.Data.DataColumn
        
        Private columnTimeDepart As Global.System.Data.DataColumn
        
        Private columnTimeReturn As Global.System.Data.DataColumn
        
        Private columnSpotterPlaneTailNo As Global.System.Data.DataColumn
        
        Private columnSpotterPlaneType As Global.System.Data.DataColumn
        
        Private columnSpotterPlanePilot As Global.System.Data.DataColumn
        
        Private columnWeatherConditions As Global.System.Data.DataColumn
        
        Private columnSnowConditions As Global.System.Data.DataColumn
        
        Private columnNotes As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnHerd As Global.System.Data.DataColumn
        
        Private columnSOPNumber As Global.System.Data.DataColumn
        
        Private columnSOPVersion As Global.System.Data.DataColumn
        
        Private columnCertificationDate As Global.System.Data.DataColumn
        
        Private columnCertifiedBy As Global.System.Data.DataColumn
        
        Private columnCertificationLevel As Global.System.Data.DataColumn
        
        Private columnFlightID As Global.System.Data.DataColumn
        
        Private columnCampaignID As Global.System.Data.DataColumn
        
        Private columnTS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SurveyFlights"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CrewNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCrewNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PilotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPilot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Observer1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnObserver1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Observer2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnObserver2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AircraftTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAircraftType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TailNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTailNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TimeDepartColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTimeDepart
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TimeReturnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTimeReturn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SpotterPlaneTailNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpotterPlaneTailNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SpotterPlaneTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpotterPlaneType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SpotterPlanePilotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpotterPlanePilot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WeatherConditionsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWeatherConditions
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SnowConditionsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSnowConditions
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HerdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHerd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SOPNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOPNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SOPVersionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOPVersion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CertificationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCertificationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CertifiedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCertifiedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CertificationLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCertificationLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FlightIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlightID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CampaignIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCampaignID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SurveyFlightsRow
            Get
                Return CType(Me.Rows(index),SurveyFlightsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SurveyFlightsRowChanging As SurveyFlightsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SurveyFlightsRowChanged As SurveyFlightsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SurveyFlightsRowDeleting As SurveyFlightsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SurveyFlightsRowDeleted As SurveyFlightsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddSurveyFlightsRow(ByVal row As SurveyFlightsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddSurveyFlightsRow( _
                    ByVal CrewNumber As Integer,  _
                    ByVal Pilot As String,  _
                    ByVal Observer1 As String,  _
                    ByVal Observer2 As String,  _
                    ByVal AircraftType As String,  _
                    ByVal TailNo As String,  _
                    ByVal TimeDepart As Date,  _
                    ByVal TimeReturn As Date,  _
                    ByVal SpotterPlaneTailNo As String,  _
                    ByVal SpotterPlaneType As String,  _
                    ByVal SpotterPlanePilot As String,  _
                    ByVal WeatherConditions As String,  _
                    ByVal SnowConditions As String,  _
                    ByVal Notes As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal Herd As String,  _
                    ByVal SOPNumber As Integer,  _
                    ByVal SOPVersion As Decimal,  _
                    ByVal CertificationDate As Date,  _
                    ByVal CertifiedBy As String,  _
                    ByVal CertificationLevel As String,  _
                    ByVal FlightID As String,  _
                    ByVal parentCampaignsRowByFK_SurveyFlights_Campaigns As CampaignsRow,  _
                    ByVal TS() As Byte) As SurveyFlightsRow
            Dim rowSurveyFlightsRow As SurveyFlightsRow = CType(Me.NewRow,SurveyFlightsRow)
            Dim columnValuesArray() As Object = New Object() {CrewNumber, Pilot, Observer1, Observer2, AircraftType, TailNo, TimeDepart, TimeReturn, SpotterPlaneTailNo, SpotterPlaneType, SpotterPlanePilot, WeatherConditions, SnowConditions, Notes, RecordInsertedDate, RecordInsertedBy, Herd, SOPNumber, SOPVersion, CertificationDate, CertifiedBy, CertificationLevel, FlightID, Nothing, TS}
            If (Not (parentCampaignsRowByFK_SurveyFlights_Campaigns) Is Nothing) Then
                columnValuesArray(23) = parentCampaignsRowByFK_SurveyFlights_Campaigns(0)
            End If
            rowSurveyFlightsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSurveyFlightsRow)
            Return rowSurveyFlightsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByFlightID(ByVal FlightID As String) As SurveyFlightsRow
            Return CType(Me.Rows.Find(New Object() {FlightID}),SurveyFlightsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SurveyFlightsDataTable = CType(MyBase.Clone,SurveyFlightsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SurveyFlightsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCrewNumber = MyBase.Columns("CrewNumber")
            Me.columnPilot = MyBase.Columns("Pilot")
            Me.columnObserver1 = MyBase.Columns("Observer1")
            Me.columnObserver2 = MyBase.Columns("Observer2")
            Me.columnAircraftType = MyBase.Columns("AircraftType")
            Me.columnTailNo = MyBase.Columns("TailNo")
            Me.columnTimeDepart = MyBase.Columns("TimeDepart")
            Me.columnTimeReturn = MyBase.Columns("TimeReturn")
            Me.columnSpotterPlaneTailNo = MyBase.Columns("SpotterPlaneTailNo")
            Me.columnSpotterPlaneType = MyBase.Columns("SpotterPlaneType")
            Me.columnSpotterPlanePilot = MyBase.Columns("SpotterPlanePilot")
            Me.columnWeatherConditions = MyBase.Columns("WeatherConditions")
            Me.columnSnowConditions = MyBase.Columns("SnowConditions")
            Me.columnNotes = MyBase.Columns("Notes")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnHerd = MyBase.Columns("Herd")
            Me.columnSOPNumber = MyBase.Columns("SOPNumber")
            Me.columnSOPVersion = MyBase.Columns("SOPVersion")
            Me.columnCertificationDate = MyBase.Columns("CertificationDate")
            Me.columnCertifiedBy = MyBase.Columns("CertifiedBy")
            Me.columnCertificationLevel = MyBase.Columns("CertificationLevel")
            Me.columnFlightID = MyBase.Columns("FlightID")
            Me.columnCampaignID = MyBase.Columns("CampaignID")
            Me.columnTS = MyBase.Columns("TS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCrewNumber = New Global.System.Data.DataColumn("CrewNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCrewNumber)
            Me.columnPilot = New Global.System.Data.DataColumn("Pilot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPilot)
            Me.columnObserver1 = New Global.System.Data.DataColumn("Observer1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObserver1)
            Me.columnObserver2 = New Global.System.Data.DataColumn("Observer2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObserver2)
            Me.columnAircraftType = New Global.System.Data.DataColumn("AircraftType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAircraftType)
            Me.columnTailNo = New Global.System.Data.DataColumn("TailNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTailNo)
            Me.columnTimeDepart = New Global.System.Data.DataColumn("TimeDepart", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTimeDepart)
            Me.columnTimeReturn = New Global.System.Data.DataColumn("TimeReturn", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTimeReturn)
            Me.columnSpotterPlaneTailNo = New Global.System.Data.DataColumn("SpotterPlaneTailNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpotterPlaneTailNo)
            Me.columnSpotterPlaneType = New Global.System.Data.DataColumn("SpotterPlaneType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpotterPlaneType)
            Me.columnSpotterPlanePilot = New Global.System.Data.DataColumn("SpotterPlanePilot", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpotterPlanePilot)
            Me.columnWeatherConditions = New Global.System.Data.DataColumn("WeatherConditions", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeatherConditions)
            Me.columnSnowConditions = New Global.System.Data.DataColumn("SnowConditions", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSnowConditions)
            Me.columnNotes = New Global.System.Data.DataColumn("Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotes)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnHerd = New Global.System.Data.DataColumn("Herd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHerd)
            Me.columnSOPNumber = New Global.System.Data.DataColumn("SOPNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOPNumber)
            Me.columnSOPVersion = New Global.System.Data.DataColumn("SOPVersion", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOPVersion)
            Me.columnCertificationDate = New Global.System.Data.DataColumn("CertificationDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCertificationDate)
            Me.columnCertifiedBy = New Global.System.Data.DataColumn("CertifiedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCertifiedBy)
            Me.columnCertificationLevel = New Global.System.Data.DataColumn("CertificationLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCertificationLevel)
            Me.columnFlightID = New Global.System.Data.DataColumn("FlightID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlightID)
            Me.columnCampaignID = New Global.System.Data.DataColumn("CampaignID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCampaignID)
            Me.columnTS = New Global.System.Data.DataColumn("TS", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFlightID}, true))
            Me.columnCrewNumber.AllowDBNull = false
            Me.columnPilot.AllowDBNull = false
            Me.columnPilot.MaxLength = 20
            Me.columnObserver1.MaxLength = 20
            Me.columnObserver2.MaxLength = 20
            Me.columnAircraftType.MaxLength = 20
            Me.columnTailNo.AllowDBNull = false
            Me.columnTailNo.MaxLength = 10
            Me.columnTimeDepart.AllowDBNull = false
            Me.columnTimeReturn.AllowDBNull = false
            Me.columnSpotterPlaneTailNo.MaxLength = 10
            Me.columnSpotterPlaneType.MaxLength = 30
            Me.columnSpotterPlanePilot.MaxLength = 40
            Me.columnWeatherConditions.MaxLength = 1000
            Me.columnSnowConditions.MaxLength = 255
            Me.columnNotes.MaxLength = 1000
            Me.columnRecordInsertedDate.AllowDBNull = false
            Me.columnRecordInsertedBy.AllowDBNull = false
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnHerd.AllowDBNull = false
            Me.columnHerd.MaxLength = 8
            Me.columnSOPNumber.AllowDBNull = false
            Me.columnSOPVersion.AllowDBNull = false
            Me.columnCertifiedBy.MaxLength = 50
            Me.columnCertificationLevel.AllowDBNull = false
            Me.columnCertificationLevel.MaxLength = 15
            Me.columnFlightID.AllowDBNull = false
            Me.columnFlightID.Unique = true
            Me.columnFlightID.MaxLength = 50
            Me.columnCampaignID.AllowDBNull = false
            Me.columnCampaignID.MaxLength = 50
            Me.columnTS.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewSurveyFlightsRow() As SurveyFlightsRow
            Return CType(Me.NewRow,SurveyFlightsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SurveyFlightsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SurveyFlightsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SurveyFlightsRowChangedEvent) Is Nothing) Then
                RaiseEvent SurveyFlightsRowChanged(Me, New SurveyFlightsRowChangeEvent(CType(e.Row,SurveyFlightsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SurveyFlightsRowChangingEvent) Is Nothing) Then
                RaiseEvent SurveyFlightsRowChanging(Me, New SurveyFlightsRowChangeEvent(CType(e.Row,SurveyFlightsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SurveyFlightsRowDeletedEvent) Is Nothing) Then
                RaiseEvent SurveyFlightsRowDeleted(Me, New SurveyFlightsRowChangeEvent(CType(e.Row,SurveyFlightsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SurveyFlightsRowDeletingEvent) Is Nothing) Then
                RaiseEvent SurveyFlightsRowDeleting(Me, New SurveyFlightsRowChangeEvent(CType(e.Row,SurveyFlightsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveSurveyFlightsRow(ByVal row As SurveyFlightsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As WRST_CaribouDataSet = New WRST_CaribouDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SurveyFlightsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WorkLogDataTable
        Inherits Global.System.Data.TypedTableBase(Of WorkLogRow)
        
        Private columnWorkLogID As Global.System.Data.DataColumn
        
        Private columnLogDate As Global.System.Data.DataColumn
        
        Private columnUserName As Global.System.Data.DataColumn
        
        Private columnLogEntry As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordLastUpdatedBy As Global.System.Data.DataColumn
        
        Private columnRecordLastUpdatedDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WorkLog"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WorkLogIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWorkLogID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LogDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UserNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LogEntryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogEntry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecordLastUpdatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordLastUpdatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecordLastUpdatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordLastUpdatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WorkLogRow
            Get
                Return CType(Me.Rows(index),WorkLogRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WorkLogRowChanging As WorkLogRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WorkLogRowChanged As WorkLogRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WorkLogRowDeleting As WorkLogRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WorkLogRowDeleted As WorkLogRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddWorkLogRow(ByVal row As WorkLogRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddWorkLogRow(ByVal LogDate As Date, ByVal UserName As String, ByVal LogEntry As String, ByVal RecordInsertedBy As String, ByVal RecordInsertedDate As Date, ByVal RecordLastUpdatedBy As String, ByVal RecordLastUpdatedDate As Date) As WorkLogRow
            Dim rowWorkLogRow As WorkLogRow = CType(Me.NewRow,WorkLogRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, LogDate, UserName, LogEntry, RecordInsertedBy, RecordInsertedDate, RecordLastUpdatedBy, RecordLastUpdatedDate}
            rowWorkLogRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowWorkLogRow)
            Return rowWorkLogRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByWorkLogID(ByVal WorkLogID As Integer) As WorkLogRow
            Return CType(Me.Rows.Find(New Object() {WorkLogID}),WorkLogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As WorkLogDataTable = CType(MyBase.Clone,WorkLogDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New WorkLogDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnWorkLogID = MyBase.Columns("WorkLogID")
            Me.columnLogDate = MyBase.Columns("LogDate")
            Me.columnUserName = MyBase.Columns("UserName")
            Me.columnLogEntry = MyBase.Columns("LogEntry")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordLastUpdatedBy = MyBase.Columns("RecordLastUpdatedBy")
            Me.columnRecordLastUpdatedDate = MyBase.Columns("RecordLastUpdatedDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnWorkLogID = New Global.System.Data.DataColumn("WorkLogID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWorkLogID)
            Me.columnLogDate = New Global.System.Data.DataColumn("LogDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogDate)
            Me.columnUserName = New Global.System.Data.DataColumn("UserName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserName)
            Me.columnLogEntry = New Global.System.Data.DataColumn("LogEntry", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogEntry)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordLastUpdatedBy = New Global.System.Data.DataColumn("RecordLastUpdatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordLastUpdatedBy)
            Me.columnRecordLastUpdatedDate = New Global.System.Data.DataColumn("RecordLastUpdatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordLastUpdatedDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnWorkLogID}, true))
            Me.columnWorkLogID.AutoIncrement = true
            Me.columnWorkLogID.AutoIncrementSeed = -1
            Me.columnWorkLogID.AutoIncrementStep = -1
            Me.columnWorkLogID.AllowDBNull = false
            Me.columnWorkLogID.ReadOnly = true
            Me.columnWorkLogID.Unique = true
            Me.columnLogDate.AllowDBNull = false
            Me.columnUserName.AllowDBNull = false
            Me.columnUserName.MaxLength = 50
            Me.columnLogEntry.AllowDBNull = false
            Me.columnLogEntry.MaxLength = 2147483647
            Me.columnRecordInsertedBy.AllowDBNull = false
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnRecordInsertedDate.AllowDBNull = false
            Me.columnRecordLastUpdatedBy.AllowDBNull = false
            Me.columnRecordLastUpdatedBy.MaxLength = 50
            Me.columnRecordLastUpdatedDate.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewWorkLogRow() As WorkLogRow
            Return CType(Me.NewRow,WorkLogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New WorkLogRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(WorkLogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WorkLogRowChangedEvent) Is Nothing) Then
                RaiseEvent WorkLogRowChanged(Me, New WorkLogRowChangeEvent(CType(e.Row,WorkLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WorkLogRowChangingEvent) Is Nothing) Then
                RaiseEvent WorkLogRowChanging(Me, New WorkLogRowChangeEvent(CType(e.Row,WorkLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WorkLogRowDeletedEvent) Is Nothing) Then
                RaiseEvent WorkLogRowDeleted(Me, New WorkLogRowChangeEvent(CType(e.Row,WorkLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WorkLogRowDeletingEvent) Is Nothing) Then
                RaiseEvent WorkLogRowDeleting(Me, New WorkLogRowChangeEvent(CType(e.Row,WorkLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveWorkLogRow(ByVal row As WorkLogRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As WRST_CaribouDataSet = New WRST_CaribouDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WorkLogDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class xrefCompCountCaribouDataTable
        Inherits Global.System.Data.TypedTableBase(Of xrefCompCountCaribouRow)
        
        Private columnCCCID As Global.System.Data.DataColumn
        
        Private columnCCID As Global.System.Data.DataColumn
        
        Private columnProjectID As Global.System.Data.DataColumn
        
        Private columnAnimalID As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnTS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "xrefCompCountCaribou"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CCCIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCCCID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CCIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCCID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjectIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AnimalIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnimalID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As xrefCompCountCaribouRow
            Get
                Return CType(Me.Rows(index),xrefCompCountCaribouRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event xrefCompCountCaribouRowChanging As xrefCompCountCaribouRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event xrefCompCountCaribouRowChanged As xrefCompCountCaribouRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event xrefCompCountCaribouRowDeleting As xrefCompCountCaribouRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event xrefCompCountCaribouRowDeleted As xrefCompCountCaribouRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddxrefCompCountCaribouRow(ByVal row As xrefCompCountCaribouRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddxrefCompCountCaribouRow(ByVal CCCID As String, ByVal parentCompositionCountsRowByFK_xrefCompCountCaribou_CompositionCounts As CompositionCountsRow, ByVal ProjectID As String, ByVal AnimalID As String, ByVal RecordInsertedDate As Date, ByVal RecordInsertedBy As String, ByVal TS() As Byte) As xrefCompCountCaribouRow
            Dim rowxrefCompCountCaribouRow As xrefCompCountCaribouRow = CType(Me.NewRow,xrefCompCountCaribouRow)
            Dim columnValuesArray() As Object = New Object() {CCCID, Nothing, ProjectID, AnimalID, RecordInsertedDate, RecordInsertedBy, TS}
            If (Not (parentCompositionCountsRowByFK_xrefCompCountCaribou_CompositionCounts) Is Nothing) Then
                columnValuesArray(1) = parentCompositionCountsRowByFK_xrefCompCountCaribou_CompositionCounts(13)
            End If
            rowxrefCompCountCaribouRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowxrefCompCountCaribouRow)
            Return rowxrefCompCountCaribouRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByCCCID(ByVal CCCID As String) As xrefCompCountCaribouRow
            Return CType(Me.Rows.Find(New Object() {CCCID}),xrefCompCountCaribouRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As xrefCompCountCaribouDataTable = CType(MyBase.Clone,xrefCompCountCaribouDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New xrefCompCountCaribouDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCCCID = MyBase.Columns("CCCID")
            Me.columnCCID = MyBase.Columns("CCID")
            Me.columnProjectID = MyBase.Columns("ProjectID")
            Me.columnAnimalID = MyBase.Columns("AnimalID")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnTS = MyBase.Columns("TS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCCCID = New Global.System.Data.DataColumn("CCCID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCCID)
            Me.columnCCID = New Global.System.Data.DataColumn("CCID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCCID)
            Me.columnProjectID = New Global.System.Data.DataColumn("ProjectID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectID)
            Me.columnAnimalID = New Global.System.Data.DataColumn("AnimalID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnimalID)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnTS = New Global.System.Data.DataColumn("TS", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCCCID}, true))
            Me.columnCCCID.AllowDBNull = false
            Me.columnCCCID.Unique = true
            Me.columnCCCID.MaxLength = 50
            Me.columnCCID.AllowDBNull = false
            Me.columnCCID.MaxLength = 50
            Me.columnProjectID.AllowDBNull = false
            Me.columnProjectID.MaxLength = 16
            Me.columnAnimalID.AllowDBNull = false
            Me.columnAnimalID.MaxLength = 16
            Me.columnRecordInsertedDate.AllowDBNull = false
            Me.columnRecordInsertedBy.AllowDBNull = false
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnTS.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewxrefCompCountCaribouRow() As xrefCompCountCaribouRow
            Return CType(Me.NewRow,xrefCompCountCaribouRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New xrefCompCountCaribouRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(xrefCompCountCaribouRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.xrefCompCountCaribouRowChangedEvent) Is Nothing) Then
                RaiseEvent xrefCompCountCaribouRowChanged(Me, New xrefCompCountCaribouRowChangeEvent(CType(e.Row,xrefCompCountCaribouRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.xrefCompCountCaribouRowChangingEvent) Is Nothing) Then
                RaiseEvent xrefCompCountCaribouRowChanging(Me, New xrefCompCountCaribouRowChangeEvent(CType(e.Row,xrefCompCountCaribouRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.xrefCompCountCaribouRowDeletedEvent) Is Nothing) Then
                RaiseEvent xrefCompCountCaribouRowDeleted(Me, New xrefCompCountCaribouRowChangeEvent(CType(e.Row,xrefCompCountCaribouRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.xrefCompCountCaribouRowDeletingEvent) Is Nothing) Then
                RaiseEvent xrefCompCountCaribouRowDeleting(Me, New xrefCompCountCaribouRowChangeEvent(CType(e.Row,xrefCompCountCaribouRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovexrefCompCountCaribouRow(ByVal row As xrefCompCountCaribouRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As WRST_CaribouDataSet = New WRST_CaribouDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "xrefCompCountCaribouDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class xrefPopulationCaribouDataTable
        Inherits Global.System.Data.TypedTableBase(Of xrefPopulationCaribouRow)
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnEID As Global.System.Data.DataColumn
        
        Private columnProjectID As Global.System.Data.DataColumn
        
        Private columnAnimalID As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnPCID As Global.System.Data.DataColumn
        
        Private columnTS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "xrefPopulationCaribou"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjectIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AnimalIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnimalID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PCIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPCID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As xrefPopulationCaribouRow
            Get
                Return CType(Me.Rows(index),xrefPopulationCaribouRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event xrefPopulationCaribouRowChanging As xrefPopulationCaribouRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event xrefPopulationCaribouRowChanged As xrefPopulationCaribouRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event xrefPopulationCaribouRowDeleting As xrefPopulationCaribouRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event xrefPopulationCaribouRowDeleted As xrefPopulationCaribouRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddxrefPopulationCaribouRow(ByVal row As xrefPopulationCaribouRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddxrefPopulationCaribouRow(ByVal RecordInsertedBy As String, ByVal parentPopulationEstimateRowByFK_xrefPopulationCaribou_PopulationEstimate As PopulationEstimateRow, ByVal ProjectID As String, ByVal AnimalID As String, ByVal RecordInsertedDate As Date, ByVal PCID As String, ByVal TS() As Byte) As xrefPopulationCaribouRow
            Dim rowxrefPopulationCaribouRow As xrefPopulationCaribouRow = CType(Me.NewRow,xrefPopulationCaribouRow)
            Dim columnValuesArray() As Object = New Object() {RecordInsertedBy, Nothing, ProjectID, AnimalID, RecordInsertedDate, PCID, TS}
            If (Not (parentPopulationEstimateRowByFK_xrefPopulationCaribou_PopulationEstimate) Is Nothing) Then
                columnValuesArray(1) = parentPopulationEstimateRowByFK_xrefPopulationCaribou_PopulationEstimate(19)
            End If
            rowxrefPopulationCaribouRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowxrefPopulationCaribouRow)
            Return rowxrefPopulationCaribouRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPCID(ByVal PCID As String) As xrefPopulationCaribouRow
            Return CType(Me.Rows.Find(New Object() {PCID}),xrefPopulationCaribouRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As xrefPopulationCaribouDataTable = CType(MyBase.Clone,xrefPopulationCaribouDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New xrefPopulationCaribouDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnEID = MyBase.Columns("EID")
            Me.columnProjectID = MyBase.Columns("ProjectID")
            Me.columnAnimalID = MyBase.Columns("AnimalID")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnPCID = MyBase.Columns("PCID")
            Me.columnTS = MyBase.Columns("TS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnEID = New Global.System.Data.DataColumn("EID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEID)
            Me.columnProjectID = New Global.System.Data.DataColumn("ProjectID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectID)
            Me.columnAnimalID = New Global.System.Data.DataColumn("AnimalID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnimalID)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnPCID = New Global.System.Data.DataColumn("PCID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPCID)
            Me.columnTS = New Global.System.Data.DataColumn("TS", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPCID}, true))
            Me.columnRecordInsertedBy.AllowDBNull = false
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnEID.AllowDBNull = false
            Me.columnEID.MaxLength = 50
            Me.columnProjectID.AllowDBNull = false
            Me.columnProjectID.MaxLength = 16
            Me.columnAnimalID.AllowDBNull = false
            Me.columnAnimalID.MaxLength = 16
            Me.columnRecordInsertedDate.AllowDBNull = false
            Me.columnPCID.AllowDBNull = false
            Me.columnPCID.Unique = true
            Me.columnPCID.MaxLength = 50
            Me.columnTS.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewxrefPopulationCaribouRow() As xrefPopulationCaribouRow
            Return CType(Me.NewRow,xrefPopulationCaribouRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New xrefPopulationCaribouRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(xrefPopulationCaribouRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.xrefPopulationCaribouRowChangedEvent) Is Nothing) Then
                RaiseEvent xrefPopulationCaribouRowChanged(Me, New xrefPopulationCaribouRowChangeEvent(CType(e.Row,xrefPopulationCaribouRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.xrefPopulationCaribouRowChangingEvent) Is Nothing) Then
                RaiseEvent xrefPopulationCaribouRowChanging(Me, New xrefPopulationCaribouRowChangeEvent(CType(e.Row,xrefPopulationCaribouRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.xrefPopulationCaribouRowDeletedEvent) Is Nothing) Then
                RaiseEvent xrefPopulationCaribouRowDeleted(Me, New xrefPopulationCaribouRowChangeEvent(CType(e.Row,xrefPopulationCaribouRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.xrefPopulationCaribouRowDeletingEvent) Is Nothing) Then
                RaiseEvent xrefPopulationCaribouRowDeleting(Me, New xrefPopulationCaribouRowChangeEvent(CType(e.Row,xrefPopulationCaribouRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovexrefPopulationCaribouRow(ByVal row As xrefPopulationCaribouRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As WRST_CaribouDataSet = New WRST_CaribouDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "xrefPopulationCaribouDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class xrefRadiotrackingCaribouDataTable
        Inherits Global.System.Data.TypedTableBase(Of xrefRadiotrackingCaribouRow)
        
        Private columnRTCID As Global.System.Data.DataColumn
        
        Private columnRTID As Global.System.Data.DataColumn
        
        Private columnProjectID As Global.System.Data.DataColumn
        
        Private columnAnimalID As Global.System.Data.DataColumn
        
        Private columnRecordInsertedDate As Global.System.Data.DataColumn
        
        Private columnRecordInsertedBy As Global.System.Data.DataColumn
        
        Private columnTS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "xrefRadiotrackingCaribou"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RTCIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRTCID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RTIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRTID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProjectIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AnimalIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnimalID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecordInsertedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RecordInsertedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordInsertedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As xrefRadiotrackingCaribouRow
            Get
                Return CType(Me.Rows(index),xrefRadiotrackingCaribouRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event xrefRadiotrackingCaribouRowChanging As xrefRadiotrackingCaribouRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event xrefRadiotrackingCaribouRowChanged As xrefRadiotrackingCaribouRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event xrefRadiotrackingCaribouRowDeleting As xrefRadiotrackingCaribouRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event xrefRadiotrackingCaribouRowDeleted As xrefRadiotrackingCaribouRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddxrefRadiotrackingCaribouRow(ByVal row As xrefRadiotrackingCaribouRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddxrefRadiotrackingCaribouRow(ByVal RTCID As String, ByVal parentRadioTrackingRowByFK_xrefRadiotrackingCaribou_RadioTracking As RadioTrackingRow, ByVal ProjectID As String, ByVal AnimalID As String, ByVal RecordInsertedDate As Date, ByVal RecordInsertedBy As String, ByVal TS() As Byte) As xrefRadiotrackingCaribouRow
            Dim rowxrefRadiotrackingCaribouRow As xrefRadiotrackingCaribouRow = CType(Me.NewRow,xrefRadiotrackingCaribouRow)
            Dim columnValuesArray() As Object = New Object() {RTCID, Nothing, ProjectID, AnimalID, RecordInsertedDate, RecordInsertedBy, TS}
            If (Not (parentRadioTrackingRowByFK_xrefRadiotrackingCaribou_RadioTracking) Is Nothing) Then
                columnValuesArray(1) = parentRadioTrackingRowByFK_xrefRadiotrackingCaribou_RadioTracking(20)
            End If
            rowxrefRadiotrackingCaribouRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowxrefRadiotrackingCaribouRow)
            Return rowxrefRadiotrackingCaribouRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByRTCID(ByVal RTCID As String) As xrefRadiotrackingCaribouRow
            Return CType(Me.Rows.Find(New Object() {RTCID}),xrefRadiotrackingCaribouRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As xrefRadiotrackingCaribouDataTable = CType(MyBase.Clone,xrefRadiotrackingCaribouDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New xrefRadiotrackingCaribouDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnRTCID = MyBase.Columns("RTCID")
            Me.columnRTID = MyBase.Columns("RTID")
            Me.columnProjectID = MyBase.Columns("ProjectID")
            Me.columnAnimalID = MyBase.Columns("AnimalID")
            Me.columnRecordInsertedDate = MyBase.Columns("RecordInsertedDate")
            Me.columnRecordInsertedBy = MyBase.Columns("RecordInsertedBy")
            Me.columnTS = MyBase.Columns("TS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnRTCID = New Global.System.Data.DataColumn("RTCID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRTCID)
            Me.columnRTID = New Global.System.Data.DataColumn("RTID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRTID)
            Me.columnProjectID = New Global.System.Data.DataColumn("ProjectID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectID)
            Me.columnAnimalID = New Global.System.Data.DataColumn("AnimalID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnimalID)
            Me.columnRecordInsertedDate = New Global.System.Data.DataColumn("RecordInsertedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedDate)
            Me.columnRecordInsertedBy = New Global.System.Data.DataColumn("RecordInsertedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordInsertedBy)
            Me.columnTS = New Global.System.Data.DataColumn("TS", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnRTCID}, true))
            Me.columnRTCID.AllowDBNull = false
            Me.columnRTCID.Unique = true
            Me.columnRTCID.MaxLength = 50
            Me.columnRTID.AllowDBNull = false
            Me.columnRTID.MaxLength = 50
            Me.columnProjectID.AllowDBNull = false
            Me.columnProjectID.MaxLength = 16
            Me.columnAnimalID.AllowDBNull = false
            Me.columnAnimalID.MaxLength = 16
            Me.columnRecordInsertedDate.AllowDBNull = false
            Me.columnRecordInsertedBy.AllowDBNull = false
            Me.columnRecordInsertedBy.MaxLength = 50
            Me.columnTS.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewxrefRadiotrackingCaribouRow() As xrefRadiotrackingCaribouRow
            Return CType(Me.NewRow,xrefRadiotrackingCaribouRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New xrefRadiotrackingCaribouRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(xrefRadiotrackingCaribouRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.xrefRadiotrackingCaribouRowChangedEvent) Is Nothing) Then
                RaiseEvent xrefRadiotrackingCaribouRowChanged(Me, New xrefRadiotrackingCaribouRowChangeEvent(CType(e.Row,xrefRadiotrackingCaribouRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.xrefRadiotrackingCaribouRowChangingEvent) Is Nothing) Then
                RaiseEvent xrefRadiotrackingCaribouRowChanging(Me, New xrefRadiotrackingCaribouRowChangeEvent(CType(e.Row,xrefRadiotrackingCaribouRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.xrefRadiotrackingCaribouRowDeletedEvent) Is Nothing) Then
                RaiseEvent xrefRadiotrackingCaribouRowDeleted(Me, New xrefRadiotrackingCaribouRowChangeEvent(CType(e.Row,xrefRadiotrackingCaribouRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.xrefRadiotrackingCaribouRowDeletingEvent) Is Nothing) Then
                RaiseEvent xrefRadiotrackingCaribouRowDeleting(Me, New xrefRadiotrackingCaribouRowChangeEvent(CType(e.Row,xrefRadiotrackingCaribouRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovexrefRadiotrackingCaribouRow(ByVal row As xrefRadiotrackingCaribouRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As WRST_CaribouDataSet = New WRST_CaribouDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "xrefRadiotrackingCaribouDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CampaignsRow
        Inherits Global.System.Data.DataRow
        
        Private tableCampaigns As CampaignsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCampaigns = CType(Me.Table,CampaignsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CampaignID() As String
            Get
                Return CType(Me(Me.tableCampaigns.CampaignIDColumn),String)
            End Get
            Set
                Me(Me.tableCampaigns.CampaignIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Campaign() As String
            Get
                Return CType(Me(Me.tableCampaigns.CampaignColumn),String)
            End Get
            Set
                Me(Me.tableCampaigns.CampaignColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Year() As Integer
            Get
                Return CType(Me(Me.tableCampaigns.YearColumn),Integer)
            End Get
            Set
                Me(Me.tableCampaigns.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SurveyType() As String
            Get
                Return CType(Me(Me.tableCampaigns.SurveyTypeColumn),String)
            End Get
            Set
                Me(Me.tableCampaigns.SurveyTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Herd() As String
            Get
                Return CType(Me(Me.tableCampaigns.HerdColumn),String)
            End Get
            Set
                Me(Me.tableCampaigns.HerdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property StartDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCampaigns.StartDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StartDate' in table 'Campaigns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCampaigns.StartDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EndDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCampaigns.EndDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EndDate' in table 'Campaigns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCampaigns.EndDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableCampaigns.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'Campaigns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCampaigns.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Personnel() As String
            Get
                Try 
                    Return CType(Me(Me.tableCampaigns.PersonnelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Personnel' in table 'Campaigns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCampaigns.PersonnelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tableCampaigns.NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Notes' in table 'Campaigns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCampaigns.NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Return CType(Me(Me.tableCampaigns.RecordInsertedDateColumn),Date)
            End Get
            Set
                Me(Me.tableCampaigns.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Return CType(Me(Me.tableCampaigns.RecordInsertedByColumn),String)
            End Get
            Set
                Me(Me.tableCampaigns.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProtocolIRMAReference() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCampaigns.ProtocolIRMAReferenceColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProtocolIRMAReference' in table 'Campaigns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCampaigns.ProtocolIRMAReferenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsStartDateNull() As Boolean
            Return Me.IsNull(Me.tableCampaigns.StartDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetStartDateNull()
            Me(Me.tableCampaigns.StartDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEndDateNull() As Boolean
            Return Me.IsNull(Me.tableCampaigns.EndDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEndDateNull()
            Me(Me.tableCampaigns.EndDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableCampaigns.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableCampaigns.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPersonnelNull() As Boolean
            Return Me.IsNull(Me.tableCampaigns.PersonnelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPersonnelNull()
            Me(Me.tableCampaigns.PersonnelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNotesNull() As Boolean
            Return Me.IsNull(Me.tableCampaigns.NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNotesNull()
            Me(Me.tableCampaigns.NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsProtocolIRMAReferenceNull() As Boolean
            Return Me.IsNull(Me.tableCampaigns.ProtocolIRMAReferenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetProtocolIRMAReferenceNull()
            Me(Me.tableCampaigns.ProtocolIRMAReferenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetSurveyFlightsRows() As SurveyFlightsRow()
            If (Me.Table.ChildRelations("FK_SurveyFlights_Campaigns") Is Nothing) Then
                Return New SurveyFlightsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_SurveyFlights_Campaigns")),SurveyFlightsRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CapturesRow
        Inherits Global.System.Data.DataRow
        
        Private tableCaptures As CapturesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCaptures = CType(Me.Table,CapturesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AnimalID() As String
            Get
                Return CType(Me(Me.tableCaptures.AnimalIDColumn),String)
            End Get
            Set
                Me(Me.tableCaptures.AnimalIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CaptureDate() As Date
            Get
                Return CType(Me(Me.tableCaptures.CaptureDateColumn),Date)
            End Get
            Set
                Me(Me.tableCaptures.CaptureDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Crew() As String
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.CrewColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Crew' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.CrewColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Shooter() As String
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.ShooterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Shooter' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.ShooterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Frequency() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.FrequencyColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Frequency' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.FrequencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property VisualCollar() As String
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.VisualCollarColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VisualCollar' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.VisualCollarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SerialNumber() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.SerialNumberColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SerialNumber' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.SerialNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CaptureLatitude() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.CaptureLatitudeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CaptureLatitude' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.CaptureLatitudeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CaptureLongitude() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.CaptureLongitudeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CaptureLongitude' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.CaptureLongitudeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OldFrequency() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.OldFrequencyColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OldFrequency' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.OldFrequencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OldVisualCollar() As String
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.OldVisualCollarColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OldVisualCollar' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.OldVisualCollarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GeneralLocation() As String
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.GeneralLocationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GeneralLocation' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.GeneralLocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TimeStartChase() As System.TimeSpan
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.TimeStartChaseColumn),Global.System.TimeSpan)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TimeStartChase' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.TimeStartChaseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TimeFirstHitBounce() As System.TimeSpan
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.TimeFirstHitBounceColumn),Global.System.TimeSpan)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TimeFirstHitBounce' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.TimeFirstHitBounceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TimeSecordHitBounce() As System.TimeSpan
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.TimeSecordHitBounceColumn),Global.System.TimeSpan)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TimeSecordHitBounce' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.TimeSecordHitBounceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TimeThirdHitBounce() As System.TimeSpan
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.TimeThirdHitBounceColumn),Global.System.TimeSpan)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TimeThirdHitBounce' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.TimeThirdHitBounceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TimeVisibleEffect() As System.TimeSpan
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.TimeVisibleEffectColumn),Global.System.TimeSpan)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TimeVisibleEffect' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.TimeVisibleEffectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TimeAnimalDown() As System.TimeSpan
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.TimeAnimalDownColumn),Global.System.TimeSpan)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TimeAnimalDown' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.TimeAnimalDownColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DartLocation() As String
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.DartLocationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DartLocation' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.DartLocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Anesthetic() As String
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.AnestheticColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Anesthetic' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.AnestheticColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AnestheticDosage_mg() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.AnestheticDosage_mgColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AnestheticDosage_mg' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.AnestheticDosage_mgColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AnestheticConcentration_mg_ml() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.AnestheticConcentration_mg_mlColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AnestheticConcentration_mg_ml' in table 'Captures' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.AnestheticConcentration_mg_mlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Sedative() As String
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.SedativeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sedative' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.SedativeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SedativeDosage_mg() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.SedativeDosage_mgColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SedativeDosage_mg' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.SedativeDosage_mgColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SedativeConcentration_mg_ml() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.SedativeConcentration_mg_mlColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SedativeConcentration_mg_ml' in table 'Captures' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.SedativeConcentration_mg_mlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NumHits() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.NumHitsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumHits' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.NumHitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NumMisses() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.NumMissesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumMisses' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.NumMissesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DrugEffect() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.DrugEffectColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DrugEffect' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.DrugEffectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property InitialBodyTemp() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.InitialBodyTempColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InitialBodyTemp' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.InitialBodyTempColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property InitialBodyTempTime() As System.TimeSpan
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.InitialBodyTempTimeColumn),Global.System.TimeSpan)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InitialBodyTempTime' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.InitialBodyTempTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FinalBodyTemperature() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.FinalBodyTemperatureColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FinalBodyTemperature' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.FinalBodyTemperatureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FinalBodyTemperatureTime() As System.TimeSpan
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.FinalBodyTemperatureTimeColumn),Global.System.TimeSpan)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FinalBodyTemperatureTime' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.FinalBodyTemperatureTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AdditionalDrugs() As String
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.AdditionalDrugsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdditionalDrugs' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.AdditionalDrugsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Sex() As String
            Get
                Return CType(Me(Me.tableCaptures.SexColumn),String)
            End Get
            Set
                Me(Me.tableCaptures.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EstimatedAge() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.EstimatedAgeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EstimatedAge' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.EstimatedAgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WithCalf() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.WithCalfColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WithCalf' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.WithCalfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Lactating() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.LactatingColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Lactating' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.LactatingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BodyCondition() As String
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.BodyConditionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BodyCondition' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.BodyConditionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Weight_Kg() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.Weight_KgColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Weight_Kg' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.Weight_KgColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BodyLength() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.BodyLengthColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BodyLength' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.BodyLengthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NeckCircumference() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.NeckCircumferenceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NeckCircumference' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.NeckCircumferenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Jaw() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.JawColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Jaw' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.JawColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MetatarsusLength() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.MetatarsusLengthColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MetatarsusLength' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.MetatarsusLengthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HindfootLength() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.HindfootLengthColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HindfootLength' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.HindfootLengthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ChestGirth() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.ChestGirthColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ChestGirth' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.ChestGirthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BloodSampleRed() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.BloodSampleRedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BloodSampleRed' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.BloodSampleRedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BloodSamplePurple() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.BloodSamplePurpleColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BloodSamplePurple' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.BloodSamplePurpleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BloodSampleGreen() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.BloodSampleGreenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BloodSampleGreen' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.BloodSampleGreenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AnestheticReversal() As String
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.AnestheticReversalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AnestheticReversal' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.AnestheticReversalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AnestheticReversalDosage_mg() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.AnestheticReversalDosage_mgColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AnestheticReversalDosage_mg' in table 'Captures' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.AnestheticReversalDosage_mgColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AnestheticReversalConcentration_mg_ml() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.AnestheticReversalConcentration_mg_mlColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AnestheticReversalConcentration_mg_ml' in table 'Captures' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.AnestheticReversalConcentration_mg_mlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AnestheticReversalRoute() As String
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.AnestheticReversalRouteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AnestheticReversalRoute' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.AnestheticReversalRouteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AnestheticReversalTime() As System.TimeSpan
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.AnestheticReversalTimeColumn),Global.System.TimeSpan)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AnestheticReversalTime' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.AnestheticReversalTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SedativeReversal() As String
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.SedativeReversalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SedativeReversal' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.SedativeReversalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SedativeReversalDosage_mg() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.SedativeReversalDosage_mgColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SedativeReversalDosage_mg' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.SedativeReversalDosage_mgColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SedativeReversalConcentration_mg_ml() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.SedativeReversalConcentration_mg_mlColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SedativeReversalConcentration_mg_ml' in table 'Captures' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.SedativeReversalConcentration_mg_mlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SedativeReversalRoute() As String
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.SedativeReversalRouteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SedativeReversalRoute' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.SedativeReversalRouteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SedativeReversalTime() As System.TimeSpan
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.SedativeReversalTimeColumn),Global.System.TimeSpan)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SedativeReversalTime' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.SedativeReversalTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TimeStanding() As System.TimeSpan
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.TimeStandingColumn),Global.System.TimeSpan)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TimeStanding' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.TimeStandingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TimeMobile() As System.TimeSpan
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.TimeMobileColumn),Global.System.TimeSpan)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TimeMobile' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.TimeMobileColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Comments() As String
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.CommentsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comments' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.CommentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CaptureID() As String
            Get
                Return CType(Me(Me.tableCaptures.CaptureIDColumn),String)
            End Get
            Set
                Me(Me.tableCaptures.CaptureIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Return CType(Me(Me.tableCaptures.RecordInsertedDateColumn),Date)
            End Get
            Set
                Me(Me.tableCaptures.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Return CType(Me(Me.tableCaptures.RecordInsertedByColumn),String)
            End Get
            Set
                Me(Me.tableCaptures.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjectID() As String
            Get
                Return CType(Me(Me.tableCaptures.ProjectIDColumn),String)
            End Get
            Set
                Me(Me.tableCaptures.ProjectIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TS() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.TSColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TS' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.TSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AnestheticDosage_ml() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.AnestheticDosage_mlColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AnestheticDosage_ml' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.AnestheticDosage_mlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SedativeDosage_ml() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.SedativeDosage_mlColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SedativeDosage_ml' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.SedativeDosage_mlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AnestheticReversalDosage_ml() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.AnestheticReversalDosage_mlColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AnestheticReversalDosage_ml' in table 'Captures' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.AnestheticReversalDosage_mlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SedativeReversalDosage_ml() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.SedativeReversalDosage_mlColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SedativeReversalDosage_ml' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.SedativeReversalDosage_mlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProtocolVersion() As Decimal
            Get
                Return CType(Me(Me.tableCaptures.ProtocolVersionColumn),Decimal)
            End Get
            Set
                Me(Me.tableCaptures.ProtocolVersionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SOPNumber() As Integer
            Get
                Return CType(Me(Me.tableCaptures.SOPNumberColumn),Integer)
            End Get
            Set
                Me(Me.tableCaptures.SOPNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SOPVersion() As Decimal
            Get
                Return CType(Me(Me.tableCaptures.SOPVersionColumn),Decimal)
            End Get
            Set
                Me(Me.tableCaptures.SOPVersionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CertificationDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.CertificationDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CertificationDate' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.CertificationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CertifiedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.CertifiedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CertifiedBy' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.CertifiedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProtocolIRMAReference() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCaptures.ProtocolIRMAReferenceColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProtocolIRMAReference' in table 'Captures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaptures.ProtocolIRMAReferenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CertificationLevel() As String
            Get
                Return CType(Me(Me.tableCaptures.CertificationLevelColumn),String)
            End Get
            Set
                Me(Me.tableCaptures.CertificationLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CaribouRowParent() As CaribouRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Captures_Caribou")),CaribouRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Captures_Caribou"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCrewNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.CrewColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCrewNull()
            Me(Me.tableCaptures.CrewColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsShooterNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.ShooterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetShooterNull()
            Me(Me.tableCaptures.ShooterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFrequencyNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.FrequencyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFrequencyNull()
            Me(Me.tableCaptures.FrequencyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsVisualCollarNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.VisualCollarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetVisualCollarNull()
            Me(Me.tableCaptures.VisualCollarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSerialNumberNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.SerialNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSerialNumberNull()
            Me(Me.tableCaptures.SerialNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCaptureLatitudeNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.CaptureLatitudeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCaptureLatitudeNull()
            Me(Me.tableCaptures.CaptureLatitudeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCaptureLongitudeNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.CaptureLongitudeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCaptureLongitudeNull()
            Me(Me.tableCaptures.CaptureLongitudeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOldFrequencyNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.OldFrequencyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOldFrequencyNull()
            Me(Me.tableCaptures.OldFrequencyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOldVisualCollarNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.OldVisualCollarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOldVisualCollarNull()
            Me(Me.tableCaptures.OldVisualCollarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsGeneralLocationNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.GeneralLocationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetGeneralLocationNull()
            Me(Me.tableCaptures.GeneralLocationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTimeStartChaseNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.TimeStartChaseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTimeStartChaseNull()
            Me(Me.tableCaptures.TimeStartChaseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTimeFirstHitBounceNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.TimeFirstHitBounceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTimeFirstHitBounceNull()
            Me(Me.tableCaptures.TimeFirstHitBounceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTimeSecordHitBounceNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.TimeSecordHitBounceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTimeSecordHitBounceNull()
            Me(Me.tableCaptures.TimeSecordHitBounceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTimeThirdHitBounceNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.TimeThirdHitBounceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTimeThirdHitBounceNull()
            Me(Me.tableCaptures.TimeThirdHitBounceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTimeVisibleEffectNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.TimeVisibleEffectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTimeVisibleEffectNull()
            Me(Me.tableCaptures.TimeVisibleEffectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTimeAnimalDownNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.TimeAnimalDownColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTimeAnimalDownNull()
            Me(Me.tableCaptures.TimeAnimalDownColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDartLocationNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.DartLocationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDartLocationNull()
            Me(Me.tableCaptures.DartLocationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAnestheticNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.AnestheticColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAnestheticNull()
            Me(Me.tableCaptures.AnestheticColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAnestheticDosage_mgNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.AnestheticDosage_mgColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAnestheticDosage_mgNull()
            Me(Me.tableCaptures.AnestheticDosage_mgColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAnestheticConcentration_mg_mlNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.AnestheticConcentration_mg_mlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAnestheticConcentration_mg_mlNull()
            Me(Me.tableCaptures.AnestheticConcentration_mg_mlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSedativeNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.SedativeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSedativeNull()
            Me(Me.tableCaptures.SedativeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSedativeDosage_mgNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.SedativeDosage_mgColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSedativeDosage_mgNull()
            Me(Me.tableCaptures.SedativeDosage_mgColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSedativeConcentration_mg_mlNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.SedativeConcentration_mg_mlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSedativeConcentration_mg_mlNull()
            Me(Me.tableCaptures.SedativeConcentration_mg_mlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNumHitsNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.NumHitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNumHitsNull()
            Me(Me.tableCaptures.NumHitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNumMissesNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.NumMissesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNumMissesNull()
            Me(Me.tableCaptures.NumMissesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDrugEffectNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.DrugEffectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDrugEffectNull()
            Me(Me.tableCaptures.DrugEffectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsInitialBodyTempNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.InitialBodyTempColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetInitialBodyTempNull()
            Me(Me.tableCaptures.InitialBodyTempColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsInitialBodyTempTimeNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.InitialBodyTempTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetInitialBodyTempTimeNull()
            Me(Me.tableCaptures.InitialBodyTempTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFinalBodyTemperatureNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.FinalBodyTemperatureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFinalBodyTemperatureNull()
            Me(Me.tableCaptures.FinalBodyTemperatureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFinalBodyTemperatureTimeNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.FinalBodyTemperatureTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFinalBodyTemperatureTimeNull()
            Me(Me.tableCaptures.FinalBodyTemperatureTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAdditionalDrugsNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.AdditionalDrugsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAdditionalDrugsNull()
            Me(Me.tableCaptures.AdditionalDrugsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEstimatedAgeNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.EstimatedAgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEstimatedAgeNull()
            Me(Me.tableCaptures.EstimatedAgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsWithCalfNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.WithCalfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetWithCalfNull()
            Me(Me.tableCaptures.WithCalfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLactatingNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.LactatingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLactatingNull()
            Me(Me.tableCaptures.LactatingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBodyConditionNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.BodyConditionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBodyConditionNull()
            Me(Me.tableCaptures.BodyConditionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsWeight_KgNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.Weight_KgColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetWeight_KgNull()
            Me(Me.tableCaptures.Weight_KgColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBodyLengthNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.BodyLengthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBodyLengthNull()
            Me(Me.tableCaptures.BodyLengthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNeckCircumferenceNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.NeckCircumferenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNeckCircumferenceNull()
            Me(Me.tableCaptures.NeckCircumferenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsJawNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.JawColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetJawNull()
            Me(Me.tableCaptures.JawColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMetatarsusLengthNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.MetatarsusLengthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMetatarsusLengthNull()
            Me(Me.tableCaptures.MetatarsusLengthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsHindfootLengthNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.HindfootLengthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetHindfootLengthNull()
            Me(Me.tableCaptures.HindfootLengthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsChestGirthNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.ChestGirthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetChestGirthNull()
            Me(Me.tableCaptures.ChestGirthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBloodSampleRedNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.BloodSampleRedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBloodSampleRedNull()
            Me(Me.tableCaptures.BloodSampleRedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBloodSamplePurpleNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.BloodSamplePurpleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBloodSamplePurpleNull()
            Me(Me.tableCaptures.BloodSamplePurpleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBloodSampleGreenNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.BloodSampleGreenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBloodSampleGreenNull()
            Me(Me.tableCaptures.BloodSampleGreenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAnestheticReversalNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.AnestheticReversalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAnestheticReversalNull()
            Me(Me.tableCaptures.AnestheticReversalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAnestheticReversalDosage_mgNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.AnestheticReversalDosage_mgColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAnestheticReversalDosage_mgNull()
            Me(Me.tableCaptures.AnestheticReversalDosage_mgColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAnestheticReversalConcentration_mg_mlNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.AnestheticReversalConcentration_mg_mlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAnestheticReversalConcentration_mg_mlNull()
            Me(Me.tableCaptures.AnestheticReversalConcentration_mg_mlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAnestheticReversalRouteNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.AnestheticReversalRouteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAnestheticReversalRouteNull()
            Me(Me.tableCaptures.AnestheticReversalRouteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAnestheticReversalTimeNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.AnestheticReversalTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAnestheticReversalTimeNull()
            Me(Me.tableCaptures.AnestheticReversalTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSedativeReversalNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.SedativeReversalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSedativeReversalNull()
            Me(Me.tableCaptures.SedativeReversalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSedativeReversalDosage_mgNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.SedativeReversalDosage_mgColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSedativeReversalDosage_mgNull()
            Me(Me.tableCaptures.SedativeReversalDosage_mgColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSedativeReversalConcentration_mg_mlNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.SedativeReversalConcentration_mg_mlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSedativeReversalConcentration_mg_mlNull()
            Me(Me.tableCaptures.SedativeReversalConcentration_mg_mlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSedativeReversalRouteNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.SedativeReversalRouteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSedativeReversalRouteNull()
            Me(Me.tableCaptures.SedativeReversalRouteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSedativeReversalTimeNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.SedativeReversalTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSedativeReversalTimeNull()
            Me(Me.tableCaptures.SedativeReversalTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTimeStandingNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.TimeStandingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTimeStandingNull()
            Me(Me.tableCaptures.TimeStandingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTimeMobileNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.TimeMobileColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTimeMobileNull()
            Me(Me.tableCaptures.TimeMobileColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCommentsNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.CommentsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCommentsNull()
            Me(Me.tableCaptures.CommentsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTSNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.TSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTSNull()
            Me(Me.tableCaptures.TSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAnestheticDosage_mlNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.AnestheticDosage_mlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAnestheticDosage_mlNull()
            Me(Me.tableCaptures.AnestheticDosage_mlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSedativeDosage_mlNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.SedativeDosage_mlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSedativeDosage_mlNull()
            Me(Me.tableCaptures.SedativeDosage_mlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAnestheticReversalDosage_mlNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.AnestheticReversalDosage_mlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAnestheticReversalDosage_mlNull()
            Me(Me.tableCaptures.AnestheticReversalDosage_mlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSedativeReversalDosage_mlNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.SedativeReversalDosage_mlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSedativeReversalDosage_mlNull()
            Me(Me.tableCaptures.SedativeReversalDosage_mlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCertificationDateNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.CertificationDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCertificationDateNull()
            Me(Me.tableCaptures.CertificationDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCertifiedByNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.CertifiedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCertifiedByNull()
            Me(Me.tableCaptures.CertifiedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsProtocolIRMAReferenceNull() As Boolean
            Return Me.IsNull(Me.tableCaptures.ProtocolIRMAReferenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetProtocolIRMAReferenceNull()
            Me(Me.tableCaptures.ProtocolIRMAReferenceColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CaribouRow
        Inherits Global.System.Data.DataRow
        
        Private tableCaribou As CaribouDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCaribou = CType(Me.Table,CaribouDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjectID() As String
            Get
                Return CType(Me(Me.tableCaribou.ProjectIDColumn),String)
            End Get
            Set
                Me(Me.tableCaribou.ProjectIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AnimalID() As String
            Get
                Return CType(Me(Me.tableCaribou.AnimalIDColumn),String)
            End Get
            Set
                Me(Me.tableCaribou.AnimalIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Sex() As String
            Get
                Try 
                    Return CType(Me(Me.tableCaribou.SexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sex' in table 'Caribou' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaribou.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CaptureDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCaribou.CaptureDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CaptureDate' in table 'Caribou' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaribou.CaptureDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AgeAtCapture() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCaribou.AgeAtCaptureColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AgeAtCapture' in table 'Caribou' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaribou.AgeAtCaptureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MortalityDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCaribou.MortalityDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MortalityDate' in table 'Caribou' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaribou.MortalityDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CarcassSeen() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCaribou.CarcassSeenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CarcassSeen' in table 'Caribou' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaribou.CarcassSeenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Source() As String
            Get
                Try 
                    Return CType(Me(Me.tableCaribou.SourceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Source' in table 'Caribou' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaribou.SourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tableCaribou.NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Notes' in table 'Caribou' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaribou.NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LegacyID() As String
            Get
                Try 
                    Return CType(Me(Me.tableCaribou.LegacyIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LegacyID' in table 'Caribou' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaribou.LegacyIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OtherID() As String
            Get
                Try 
                    Return CType(Me(Me.tableCaribou.OtherIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OtherID' in table 'Caribou' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaribou.OtherIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Return CType(Me(Me.tableCaribou.RecordInsertedDateColumn),Date)
            End Get
            Set
                Me(Me.tableCaribou.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Return CType(Me(Me.tableCaribou.RecordInsertedByColumn),String)
            End Get
            Set
                Me(Me.tableCaribou.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TS() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableCaribou.TSColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TS' in table 'Caribou' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaribou.TSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Herd() As String
            Get
                Try 
                    Return CType(Me(Me.tableCaribou.HerdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Herd' in table 'Caribou' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaribou.HerdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProtocolVersion() As Decimal
            Get
                Return CType(Me(Me.tableCaribou.ProtocolVersionColumn),Decimal)
            End Get
            Set
                Me(Me.tableCaribou.ProtocolVersionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SOPNumber() As Integer
            Get
                Return CType(Me(Me.tableCaribou.SOPNumberColumn),Integer)
            End Get
            Set
                Me(Me.tableCaribou.SOPNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SOPVersion() As Decimal
            Get
                Return CType(Me(Me.tableCaribou.SOPVersionColumn),Decimal)
            End Get
            Set
                Me(Me.tableCaribou.SOPVersionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CertificationDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCaribou.CertificationDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CertificationDate' in table 'Caribou' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaribou.CertificationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CertifiedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableCaribou.CertifiedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CertifiedBy' in table 'Caribou' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaribou.CertifiedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProtocolIRMAReference() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCaribou.ProtocolIRMAReferenceColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProtocolIRMAReference' in table 'Caribou' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaribou.ProtocolIRMAReferenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CertificationLevel() As String
            Get
                Return CType(Me(Me.tableCaribou.CertificationLevelColumn),String)
            End Get
            Set
                Me(Me.tableCaribou.CertificationLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MortalityLat() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCaribou.MortalityLatColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MortalityLat' in table 'Caribou' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaribou.MortalityLatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MortalityLon() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCaribou.MortalityLonColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MortalityLon' in table 'Caribou' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaribou.MortalityLonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSexNull() As Boolean
            Return Me.IsNull(Me.tableCaribou.SexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSexNull()
            Me(Me.tableCaribou.SexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCaptureDateNull() As Boolean
            Return Me.IsNull(Me.tableCaribou.CaptureDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCaptureDateNull()
            Me(Me.tableCaribou.CaptureDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAgeAtCaptureNull() As Boolean
            Return Me.IsNull(Me.tableCaribou.AgeAtCaptureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAgeAtCaptureNull()
            Me(Me.tableCaribou.AgeAtCaptureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMortalityDateNull() As Boolean
            Return Me.IsNull(Me.tableCaribou.MortalityDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMortalityDateNull()
            Me(Me.tableCaribou.MortalityDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCarcassSeenNull() As Boolean
            Return Me.IsNull(Me.tableCaribou.CarcassSeenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCarcassSeenNull()
            Me(Me.tableCaribou.CarcassSeenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSourceNull() As Boolean
            Return Me.IsNull(Me.tableCaribou.SourceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSourceNull()
            Me(Me.tableCaribou.SourceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNotesNull() As Boolean
            Return Me.IsNull(Me.tableCaribou.NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNotesNull()
            Me(Me.tableCaribou.NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLegacyIDNull() As Boolean
            Return Me.IsNull(Me.tableCaribou.LegacyIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLegacyIDNull()
            Me(Me.tableCaribou.LegacyIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOtherIDNull() As Boolean
            Return Me.IsNull(Me.tableCaribou.OtherIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOtherIDNull()
            Me(Me.tableCaribou.OtherIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTSNull() As Boolean
            Return Me.IsNull(Me.tableCaribou.TSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTSNull()
            Me(Me.tableCaribou.TSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsHerdNull() As Boolean
            Return Me.IsNull(Me.tableCaribou.HerdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetHerdNull()
            Me(Me.tableCaribou.HerdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCertificationDateNull() As Boolean
            Return Me.IsNull(Me.tableCaribou.CertificationDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCertificationDateNull()
            Me(Me.tableCaribou.CertificationDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCertifiedByNull() As Boolean
            Return Me.IsNull(Me.tableCaribou.CertifiedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCertifiedByNull()
            Me(Me.tableCaribou.CertifiedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsProtocolIRMAReferenceNull() As Boolean
            Return Me.IsNull(Me.tableCaribou.ProtocolIRMAReferenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetProtocolIRMAReferenceNull()
            Me(Me.tableCaribou.ProtocolIRMAReferenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMortalityLatNull() As Boolean
            Return Me.IsNull(Me.tableCaribou.MortalityLatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMortalityLatNull()
            Me(Me.tableCaribou.MortalityLatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMortalityLonNull() As Boolean
            Return Me.IsNull(Me.tableCaribou.MortalityLonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMortalityLonNull()
            Me(Me.tableCaribou.MortalityLonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetCapturesRows() As CapturesRow()
            If (Me.Table.ChildRelations("FK_Captures_Caribou") Is Nothing) Then
                Return New CapturesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Captures_Caribou")),CapturesRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetxrefCompCountCaribouRows() As xrefCompCountCaribouRow()
            If (Me.Table.ChildRelations("FK_xrefCompCountCaribou_Caribou") Is Nothing) Then
                Return New xrefCompCountCaribouRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_xrefCompCountCaribou_Caribou")),xrefCompCountCaribouRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetxrefPopulationCaribouRows() As xrefPopulationCaribouRow()
            If (Me.Table.ChildRelations("FK_xrefPopulationCaribou_Caribou") Is Nothing) Then
                Return New xrefPopulationCaribouRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_xrefPopulationCaribou_Caribou")),xrefPopulationCaribouRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetxrefRadiotrackingCaribouRows() As xrefRadiotrackingCaribouRow()
            If (Me.Table.ChildRelations("FK_xrefRadiotrackingCaribou_Caribou") Is Nothing) Then
                Return New xrefRadiotrackingCaribouRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_xrefRadiotrackingCaribou_Caribou")),xrefRadiotrackingCaribouRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CompositionCountsRow
        Inherits Global.System.Data.DataRow
        
        Private tableCompositionCounts As CompositionCountsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCompositionCounts = CType(Me.Table,CompositionCountsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SightingDate() As Date
            Get
                Return CType(Me(Me.tableCompositionCounts.SightingDateColumn),Date)
            End Get
            Set
                Me(Me.tableCompositionCounts.SightingDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Herd() As String
            Get
                Return CType(Me(Me.tableCompositionCounts.HerdColumn),String)
            End Get
            Set
                Me(Me.tableCompositionCounts.HerdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GroupNumber() As Integer
            Get
                Return CType(Me(Me.tableCompositionCounts.GroupNumberColumn),Integer)
            End Get
            Set
                Me(Me.tableCompositionCounts.GroupNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SearchArea() As String
            Get
                Return CType(Me(Me.tableCompositionCounts.SearchAreaColumn),String)
            End Get
            Set
                Me(Me.tableCompositionCounts.SearchAreaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SmallBull() As Integer
            Get
                Return CType(Me(Me.tableCompositionCounts.SmallBullColumn),Integer)
            End Get
            Set
                Me(Me.tableCompositionCounts.SmallBullColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MediumBull() As Integer
            Get
                Return CType(Me(Me.tableCompositionCounts.MediumBullColumn),Integer)
            End Get
            Set
                Me(Me.tableCompositionCounts.MediumBullColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LargeBull() As Integer
            Get
                Return CType(Me(Me.tableCompositionCounts.LargeBullColumn),Integer)
            End Get
            Set
                Me(Me.tableCompositionCounts.LargeBullColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cow() As Integer
            Get
                Return CType(Me(Me.tableCompositionCounts.CowColumn),Integer)
            End Get
            Set
                Me(Me.tableCompositionCounts.CowColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Calf() As Integer
            Get
                Return CType(Me(Me.tableCompositionCounts.CalfColumn),Integer)
            End Get
            Set
                Me(Me.tableCompositionCounts.CalfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Indeterminate() As Integer
            Get
                Return CType(Me(Me.tableCompositionCounts.IndeterminateColumn),Integer)
            End Get
            Set
                Me(Me.tableCompositionCounts.IndeterminateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Waypoint() As String
            Get
                Return CType(Me(Me.tableCompositionCounts.WaypointColumn),String)
            End Get
            Set
                Me(Me.tableCompositionCounts.WaypointColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Frequencies() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompositionCounts.FrequenciesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Frequencies' in table 'CompositionCounts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompositionCounts.FrequenciesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FlightID() As String
            Get
                Return CType(Me(Me.tableCompositionCounts.FlightIDColumn),String)
            End Get
            Set
                Me(Me.tableCompositionCounts.FlightIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CCID() As String
            Get
                Return CType(Me(Me.tableCompositionCounts.CCIDColumn),String)
            End Get
            Set
                Me(Me.tableCompositionCounts.CCIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Return CType(Me(Me.tableCompositionCounts.RecordInsertedDateColumn),Date)
            End Get
            Set
                Me(Me.tableCompositionCounts.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Return CType(Me(Me.tableCompositionCounts.RecordInsertedByColumn),String)
            End Get
            Set
                Me(Me.tableCompositionCounts.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TS() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableCompositionCounts.TSColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TS' in table 'CompositionCounts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompositionCounts.TSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SourceFilename() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompositionCounts.SourceFilenameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SourceFilename' in table 'CompositionCounts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompositionCounts.SourceFilenameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Comment() As String
            Get
                Try 
                    Return CType(Me(Me.tableCompositionCounts.CommentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comment' in table 'CompositionCounts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompositionCounts.CommentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Lat() As Decimal
            Get
                Return CType(Me(Me.tableCompositionCounts.LatColumn),Decimal)
            End Get
            Set
                Me(Me.tableCompositionCounts.LatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Lon() As Decimal
            Get
                Return CType(Me(Me.tableCompositionCounts.LonColumn),Decimal)
            End Get
            Set
                Me(Me.tableCompositionCounts.LonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SurveyFlightsRow() As SurveyFlightsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_CompositionCounts_SurveyFlights")),SurveyFlightsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_CompositionCounts_SurveyFlights"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFrequenciesNull() As Boolean
            Return Me.IsNull(Me.tableCompositionCounts.FrequenciesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFrequenciesNull()
            Me(Me.tableCompositionCounts.FrequenciesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTSNull() As Boolean
            Return Me.IsNull(Me.tableCompositionCounts.TSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTSNull()
            Me(Me.tableCompositionCounts.TSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSourceFilenameNull() As Boolean
            Return Me.IsNull(Me.tableCompositionCounts.SourceFilenameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSourceFilenameNull()
            Me(Me.tableCompositionCounts.SourceFilenameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCommentNull() As Boolean
            Return Me.IsNull(Me.tableCompositionCounts.CommentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCommentNull()
            Me(Me.tableCompositionCounts.CommentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetxrefCompCountCaribouRows() As xrefCompCountCaribouRow()
            If (Me.Table.ChildRelations("FK_xrefCompCountCaribou_CompositionCounts") Is Nothing) Then
                Return New xrefCompCountCaribouRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_xrefCompCountCaribou_CompositionCounts")),xrefCompCountCaribouRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PopulationEstimateRow
        Inherits Global.System.Data.DataRow
        
        Private tablePopulationEstimate As PopulationEstimateDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePopulationEstimate = CType(Me.Table,PopulationEstimateDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Herd() As String
            Get
                Return CType(Me(Me.tablePopulationEstimate.HerdColumn),String)
            End Get
            Set
                Me(Me.tablePopulationEstimate.HerdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SearchArea() As String
            Get
                Return CType(Me(Me.tablePopulationEstimate.SearchAreaColumn),String)
            End Get
            Set
                Me(Me.tablePopulationEstimate.SearchAreaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GroupNumber() As Integer
            Get
                Return CType(Me(Me.tablePopulationEstimate.GroupNumberColumn),Integer)
            End Get
            Set
                Me(Me.tablePopulationEstimate.GroupNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WaypointName() As String
            Get
                Return CType(Me(Me.tablePopulationEstimate.WaypointNameColumn),String)
            End Get
            Set
                Me(Me.tablePopulationEstimate.WaypointNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SightingDate() As Date
            Get
                Return CType(Me(Me.tablePopulationEstimate.SightingDateColumn),Date)
            End Get
            Set
                Me(Me.tablePopulationEstimate.SightingDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SmallBull() As Integer
            Get
                Return CType(Me(Me.tablePopulationEstimate.SmallBullColumn),Integer)
            End Get
            Set
                Me(Me.tablePopulationEstimate.SmallBullColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MediumBull() As Integer
            Get
                Return CType(Me(Me.tablePopulationEstimate.MediumBullColumn),Integer)
            End Get
            Set
                Me(Me.tablePopulationEstimate.MediumBullColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LargeBull() As Integer
            Get
                Return CType(Me(Me.tablePopulationEstimate.LargeBullColumn),Integer)
            End Get
            Set
                Me(Me.tablePopulationEstimate.LargeBullColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cow() As Integer
            Get
                Return CType(Me(Me.tablePopulationEstimate.CowColumn),Integer)
            End Get
            Set
                Me(Me.tablePopulationEstimate.CowColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Calf() As Integer
            Get
                Return CType(Me(Me.tablePopulationEstimate.CalfColumn),Integer)
            End Get
            Set
                Me(Me.tablePopulationEstimate.CalfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property InOrOut() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePopulationEstimate.InOrOutColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InOrOut' in table 'PopulationEstimate' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePopulationEstimate.InOrOutColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Seen() As Integer
            Get
                Return CType(Me(Me.tablePopulationEstimate.SeenColumn),Integer)
            End Get
            Set
                Me(Me.tablePopulationEstimate.SeenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Marked() As Integer
            Get
                Return CType(Me(Me.tablePopulationEstimate.MarkedColumn),Integer)
            End Get
            Set
                Me(Me.tablePopulationEstimate.MarkedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FrequenciesInGroup() As String
            Get
                Try 
                    Return CType(Me(Me.tablePopulationEstimate.FrequenciesInGroupColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FrequenciesInGroup' in table 'PopulationEstimate' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePopulationEstimate.FrequenciesInGroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Lat() As Decimal
            Get
                Return CType(Me(Me.tablePopulationEstimate.LatColumn),Decimal)
            End Get
            Set
                Me(Me.tablePopulationEstimate.LatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Lon() As Decimal
            Get
                Return CType(Me(Me.tablePopulationEstimate.LonColumn),Decimal)
            End Get
            Set
                Me(Me.tablePopulationEstimate.LonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Comment() As String
            Get
                Try 
                    Return CType(Me(Me.tablePopulationEstimate.CommentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comment' in table 'PopulationEstimate' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePopulationEstimate.CommentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SourceFilename() As String
            Get
                Try 
                    Return CType(Me(Me.tablePopulationEstimate.SourceFilenameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SourceFilename' in table 'PopulationEstimate' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePopulationEstimate.SourceFilenameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FlightID() As String
            Get
                Return CType(Me(Me.tablePopulationEstimate.FlightIDColumn),String)
            End Get
            Set
                Me(Me.tablePopulationEstimate.FlightIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EID() As String
            Get
                Return CType(Me(Me.tablePopulationEstimate.EIDColumn),String)
            End Get
            Set
                Me(Me.tablePopulationEstimate.EIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Return CType(Me(Me.tablePopulationEstimate.RecordInsertedDateColumn),Date)
            End Get
            Set
                Me(Me.tablePopulationEstimate.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Return CType(Me(Me.tablePopulationEstimate.RecordInsertedByColumn),String)
            End Get
            Set
                Me(Me.tablePopulationEstimate.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TS() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablePopulationEstimate.TSColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TS' in table 'PopulationEstimate' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePopulationEstimate.TSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SurveyFlightsRow() As SurveyFlightsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PopulationEstimate_SurveyFlights")),SurveyFlightsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PopulationEstimate_SurveyFlights"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsInOrOutNull() As Boolean
            Return Me.IsNull(Me.tablePopulationEstimate.InOrOutColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetInOrOutNull()
            Me(Me.tablePopulationEstimate.InOrOutColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFrequenciesInGroupNull() As Boolean
            Return Me.IsNull(Me.tablePopulationEstimate.FrequenciesInGroupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFrequenciesInGroupNull()
            Me(Me.tablePopulationEstimate.FrequenciesInGroupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCommentNull() As Boolean
            Return Me.IsNull(Me.tablePopulationEstimate.CommentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCommentNull()
            Me(Me.tablePopulationEstimate.CommentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSourceFilenameNull() As Boolean
            Return Me.IsNull(Me.tablePopulationEstimate.SourceFilenameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSourceFilenameNull()
            Me(Me.tablePopulationEstimate.SourceFilenameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTSNull() As Boolean
            Return Me.IsNull(Me.tablePopulationEstimate.TSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTSNull()
            Me(Me.tablePopulationEstimate.TSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetxrefPopulationCaribouRows() As xrefPopulationCaribouRow()
            If (Me.Table.ChildRelations("FK_xrefPopulationCaribou_PopulationEstimate") Is Nothing) Then
                Return New xrefPopulationCaribouRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_xrefPopulationCaribou_PopulationEstimate")),xrefPopulationCaribouRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class RadioTrackingRow
        Inherits Global.System.Data.DataRow
        
        Private tableRadioTracking As RadioTrackingDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRadioTracking = CType(Me.Table,RadioTrackingDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Herd() As String
            Get
                Return CType(Me(Me.tableRadioTracking.HerdColumn),String)
            End Get
            Set
                Me(Me.tableRadioTracking.HerdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GroupNumber() As Integer
            Get
                Return CType(Me(Me.tableRadioTracking.GroupNumberColumn),Integer)
            End Get
            Set
                Me(Me.tableRadioTracking.GroupNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Frequency() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRadioTracking.FrequencyColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Frequency' in table 'RadioTracking' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRadioTracking.FrequencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property VisualCollar() As String
            Get
                Try 
                    Return CType(Me(Me.tableRadioTracking.VisualCollarColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VisualCollar' in table 'RadioTracking' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRadioTracking.VisualCollarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SightingDate() As Date
            Get
                Return CType(Me(Me.tableRadioTracking.SightingDateColumn),Date)
            End Get
            Set
                Me(Me.tableRadioTracking.SightingDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Mode() As String
            Get
                Try 
                    Return CType(Me(Me.tableRadioTracking.ModeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Mode' in table 'RadioTracking' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRadioTracking.ModeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Accuracy() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRadioTracking.AccuracyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Accuracy' in table 'RadioTracking' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRadioTracking.AccuracyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Bull() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRadioTracking.BullColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bull' in table 'RadioTracking' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRadioTracking.BullColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cow() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRadioTracking.CowColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cow' in table 'RadioTracking' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRadioTracking.CowColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Calf() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRadioTracking.CalfColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Calf' in table 'RadioTracking' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRadioTracking.CalfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Adult() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRadioTracking.AdultColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Adult' in table 'RadioTracking' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRadioTracking.AdultColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Unknown() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRadioTracking.UnknownColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Unknown' in table 'RadioTracking' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRadioTracking.UnknownColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Waypoint() As String
            Get
                Return CType(Me(Me.tableRadioTracking.WaypointColumn),String)
            End Get
            Set
                Me(Me.tableRadioTracking.WaypointColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RetainedAntler() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRadioTracking.RetainedAntlerColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RetainedAntler' in table 'RadioTracking' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRadioTracking.RetainedAntlerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DistendedUdders() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRadioTracking.DistendedUddersColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DistendedUdders' in table 'RadioTracking' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRadioTracking.DistendedUddersColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CalvesAtHeel() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRadioTracking.CalvesAtHeelColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CalvesAtHeel' in table 'RadioTracking' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRadioTracking.CalvesAtHeelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Seen() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRadioTracking.SeenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Seen' in table 'RadioTracking' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRadioTracking.SeenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FlightID() As String
            Get
                Return CType(Me(Me.tableRadioTracking.FlightIDColumn),String)
            End Get
            Set
                Me(Me.tableRadioTracking.FlightIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AnimalID() As String
            Get
                Try 
                    Return CType(Me(Me.tableRadioTracking.AnimalIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AnimalID' in table 'RadioTracking' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRadioTracking.AnimalIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjectID() As String
            Get
                Try 
                    Return CType(Me(Me.tableRadioTracking.ProjectIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProjectID' in table 'RadioTracking' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRadioTracking.ProjectIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RTID() As String
            Get
                Return CType(Me(Me.tableRadioTracking.RTIDColumn),String)
            End Get
            Set
                Me(Me.tableRadioTracking.RTIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Return CType(Me(Me.tableRadioTracking.RecordInsertedDateColumn),Date)
            End Get
            Set
                Me(Me.tableRadioTracking.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Return CType(Me(Me.tableRadioTracking.RecordInsertedByColumn),String)
            End Get
            Set
                Me(Me.tableRadioTracking.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SearchArea() As String
            Get
                Try 
                    Return CType(Me(Me.tableRadioTracking.SearchAreaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SearchArea' in table 'RadioTracking' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRadioTracking.SearchAreaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TS() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableRadioTracking.TSColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TS' in table 'RadioTracking' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRadioTracking.TSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SourceFilename() As String
            Get
                Try 
                    Return CType(Me(Me.tableRadioTracking.SourceFilenameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SourceFilename' in table 'RadioTracking' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRadioTracking.SourceFilenameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Comment() As String
            Get
                Try 
                    Return CType(Me(Me.tableRadioTracking.CommentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comment' in table 'RadioTracking' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRadioTracking.CommentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Lat() As Decimal
            Get
                Return CType(Me(Me.tableRadioTracking.LatColumn),Decimal)
            End Get
            Set
                Me(Me.tableRadioTracking.LatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Lon() As Decimal
            Get
                Return CType(Me(Me.tableRadioTracking.LonColumn),Decimal)
            End Get
            Set
                Me(Me.tableRadioTracking.LonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SurveyFlightsRow() As SurveyFlightsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_RadioTracking_SurveyFlights")),SurveyFlightsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_RadioTracking_SurveyFlights"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFrequencyNull() As Boolean
            Return Me.IsNull(Me.tableRadioTracking.FrequencyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFrequencyNull()
            Me(Me.tableRadioTracking.FrequencyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsVisualCollarNull() As Boolean
            Return Me.IsNull(Me.tableRadioTracking.VisualCollarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetVisualCollarNull()
            Me(Me.tableRadioTracking.VisualCollarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsModeNull() As Boolean
            Return Me.IsNull(Me.tableRadioTracking.ModeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetModeNull()
            Me(Me.tableRadioTracking.ModeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAccuracyNull() As Boolean
            Return Me.IsNull(Me.tableRadioTracking.AccuracyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAccuracyNull()
            Me(Me.tableRadioTracking.AccuracyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBullNull() As Boolean
            Return Me.IsNull(Me.tableRadioTracking.BullColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBullNull()
            Me(Me.tableRadioTracking.BullColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCowNull() As Boolean
            Return Me.IsNull(Me.tableRadioTracking.CowColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCowNull()
            Me(Me.tableRadioTracking.CowColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCalfNull() As Boolean
            Return Me.IsNull(Me.tableRadioTracking.CalfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCalfNull()
            Me(Me.tableRadioTracking.CalfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAdultNull() As Boolean
            Return Me.IsNull(Me.tableRadioTracking.AdultColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAdultNull()
            Me(Me.tableRadioTracking.AdultColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUnknownNull() As Boolean
            Return Me.IsNull(Me.tableRadioTracking.UnknownColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUnknownNull()
            Me(Me.tableRadioTracking.UnknownColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRetainedAntlerNull() As Boolean
            Return Me.IsNull(Me.tableRadioTracking.RetainedAntlerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRetainedAntlerNull()
            Me(Me.tableRadioTracking.RetainedAntlerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDistendedUddersNull() As Boolean
            Return Me.IsNull(Me.tableRadioTracking.DistendedUddersColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDistendedUddersNull()
            Me(Me.tableRadioTracking.DistendedUddersColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCalvesAtHeelNull() As Boolean
            Return Me.IsNull(Me.tableRadioTracking.CalvesAtHeelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCalvesAtHeelNull()
            Me(Me.tableRadioTracking.CalvesAtHeelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSeenNull() As Boolean
            Return Me.IsNull(Me.tableRadioTracking.SeenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSeenNull()
            Me(Me.tableRadioTracking.SeenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAnimalIDNull() As Boolean
            Return Me.IsNull(Me.tableRadioTracking.AnimalIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAnimalIDNull()
            Me(Me.tableRadioTracking.AnimalIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsProjectIDNull() As Boolean
            Return Me.IsNull(Me.tableRadioTracking.ProjectIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetProjectIDNull()
            Me(Me.tableRadioTracking.ProjectIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSearchAreaNull() As Boolean
            Return Me.IsNull(Me.tableRadioTracking.SearchAreaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSearchAreaNull()
            Me(Me.tableRadioTracking.SearchAreaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTSNull() As Boolean
            Return Me.IsNull(Me.tableRadioTracking.TSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTSNull()
            Me(Me.tableRadioTracking.TSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSourceFilenameNull() As Boolean
            Return Me.IsNull(Me.tableRadioTracking.SourceFilenameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSourceFilenameNull()
            Me(Me.tableRadioTracking.SourceFilenameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCommentNull() As Boolean
            Return Me.IsNull(Me.tableRadioTracking.CommentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCommentNull()
            Me(Me.tableRadioTracking.CommentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetxrefRadiotrackingCaribouRows() As xrefRadiotrackingCaribouRow()
            If (Me.Table.ChildRelations("FK_xrefRadiotrackingCaribou_RadioTracking") Is Nothing) Then
                Return New xrefRadiotrackingCaribouRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_xrefRadiotrackingCaribou_RadioTracking")),xrefRadiotrackingCaribouRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SurveyFlightsRow
        Inherits Global.System.Data.DataRow
        
        Private tableSurveyFlights As SurveyFlightsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSurveyFlights = CType(Me.Table,SurveyFlightsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CrewNumber() As Integer
            Get
                Return CType(Me(Me.tableSurveyFlights.CrewNumberColumn),Integer)
            End Get
            Set
                Me(Me.tableSurveyFlights.CrewNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pilot() As String
            Get
                Return CType(Me(Me.tableSurveyFlights.PilotColumn),String)
            End Get
            Set
                Me(Me.tableSurveyFlights.PilotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Observer1() As String
            Get
                Try 
                    Return CType(Me(Me.tableSurveyFlights.Observer1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observer1' in table 'SurveyFlights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSurveyFlights.Observer1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Observer2() As String
            Get
                Try 
                    Return CType(Me(Me.tableSurveyFlights.Observer2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Observer2' in table 'SurveyFlights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSurveyFlights.Observer2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AircraftType() As String
            Get
                Try 
                    Return CType(Me(Me.tableSurveyFlights.AircraftTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AircraftType' in table 'SurveyFlights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSurveyFlights.AircraftTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TailNo() As String
            Get
                Return CType(Me(Me.tableSurveyFlights.TailNoColumn),String)
            End Get
            Set
                Me(Me.tableSurveyFlights.TailNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TimeDepart() As Date
            Get
                Return CType(Me(Me.tableSurveyFlights.TimeDepartColumn),Date)
            End Get
            Set
                Me(Me.tableSurveyFlights.TimeDepartColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TimeReturn() As Date
            Get
                Return CType(Me(Me.tableSurveyFlights.TimeReturnColumn),Date)
            End Get
            Set
                Me(Me.tableSurveyFlights.TimeReturnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SpotterPlaneTailNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableSurveyFlights.SpotterPlaneTailNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SpotterPlaneTailNo' in table 'SurveyFlights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSurveyFlights.SpotterPlaneTailNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SpotterPlaneType() As String
            Get
                Try 
                    Return CType(Me(Me.tableSurveyFlights.SpotterPlaneTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SpotterPlaneType' in table 'SurveyFlights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSurveyFlights.SpotterPlaneTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SpotterPlanePilot() As String
            Get
                Try 
                    Return CType(Me(Me.tableSurveyFlights.SpotterPlanePilotColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SpotterPlanePilot' in table 'SurveyFlights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSurveyFlights.SpotterPlanePilotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WeatherConditions() As String
            Get
                Try 
                    Return CType(Me(Me.tableSurveyFlights.WeatherConditionsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WeatherConditions' in table 'SurveyFlights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSurveyFlights.WeatherConditionsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SnowConditions() As String
            Get
                Try 
                    Return CType(Me(Me.tableSurveyFlights.SnowConditionsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SnowConditions' in table 'SurveyFlights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSurveyFlights.SnowConditionsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tableSurveyFlights.NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Notes' in table 'SurveyFlights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSurveyFlights.NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Return CType(Me(Me.tableSurveyFlights.RecordInsertedDateColumn),Date)
            End Get
            Set
                Me(Me.tableSurveyFlights.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Return CType(Me(Me.tableSurveyFlights.RecordInsertedByColumn),String)
            End Get
            Set
                Me(Me.tableSurveyFlights.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Herd() As String
            Get
                Return CType(Me(Me.tableSurveyFlights.HerdColumn),String)
            End Get
            Set
                Me(Me.tableSurveyFlights.HerdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SOPNumber() As Integer
            Get
                Return CType(Me(Me.tableSurveyFlights.SOPNumberColumn),Integer)
            End Get
            Set
                Me(Me.tableSurveyFlights.SOPNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SOPVersion() As Decimal
            Get
                Return CType(Me(Me.tableSurveyFlights.SOPVersionColumn),Decimal)
            End Get
            Set
                Me(Me.tableSurveyFlights.SOPVersionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CertificationDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSurveyFlights.CertificationDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CertificationDate' in table 'SurveyFlights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSurveyFlights.CertificationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CertifiedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableSurveyFlights.CertifiedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CertifiedBy' in table 'SurveyFlights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSurveyFlights.CertifiedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CertificationLevel() As String
            Get
                Return CType(Me(Me.tableSurveyFlights.CertificationLevelColumn),String)
            End Get
            Set
                Me(Me.tableSurveyFlights.CertificationLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FlightID() As String
            Get
                Return CType(Me(Me.tableSurveyFlights.FlightIDColumn),String)
            End Get
            Set
                Me(Me.tableSurveyFlights.FlightIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CampaignID() As String
            Get
                Return CType(Me(Me.tableSurveyFlights.CampaignIDColumn),String)
            End Get
            Set
                Me(Me.tableSurveyFlights.CampaignIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TS() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableSurveyFlights.TSColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TS' in table 'SurveyFlights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSurveyFlights.TSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CampaignsRow() As CampaignsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_SurveyFlights_Campaigns")),CampaignsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_SurveyFlights_Campaigns"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsObserver1Null() As Boolean
            Return Me.IsNull(Me.tableSurveyFlights.Observer1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetObserver1Null()
            Me(Me.tableSurveyFlights.Observer1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsObserver2Null() As Boolean
            Return Me.IsNull(Me.tableSurveyFlights.Observer2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetObserver2Null()
            Me(Me.tableSurveyFlights.Observer2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAircraftTypeNull() As Boolean
            Return Me.IsNull(Me.tableSurveyFlights.AircraftTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAircraftTypeNull()
            Me(Me.tableSurveyFlights.AircraftTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSpotterPlaneTailNoNull() As Boolean
            Return Me.IsNull(Me.tableSurveyFlights.SpotterPlaneTailNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSpotterPlaneTailNoNull()
            Me(Me.tableSurveyFlights.SpotterPlaneTailNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSpotterPlaneTypeNull() As Boolean
            Return Me.IsNull(Me.tableSurveyFlights.SpotterPlaneTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSpotterPlaneTypeNull()
            Me(Me.tableSurveyFlights.SpotterPlaneTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSpotterPlanePilotNull() As Boolean
            Return Me.IsNull(Me.tableSurveyFlights.SpotterPlanePilotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSpotterPlanePilotNull()
            Me(Me.tableSurveyFlights.SpotterPlanePilotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsWeatherConditionsNull() As Boolean
            Return Me.IsNull(Me.tableSurveyFlights.WeatherConditionsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetWeatherConditionsNull()
            Me(Me.tableSurveyFlights.WeatherConditionsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSnowConditionsNull() As Boolean
            Return Me.IsNull(Me.tableSurveyFlights.SnowConditionsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSnowConditionsNull()
            Me(Me.tableSurveyFlights.SnowConditionsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNotesNull() As Boolean
            Return Me.IsNull(Me.tableSurveyFlights.NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNotesNull()
            Me(Me.tableSurveyFlights.NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCertificationDateNull() As Boolean
            Return Me.IsNull(Me.tableSurveyFlights.CertificationDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCertificationDateNull()
            Me(Me.tableSurveyFlights.CertificationDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCertifiedByNull() As Boolean
            Return Me.IsNull(Me.tableSurveyFlights.CertifiedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCertifiedByNull()
            Me(Me.tableSurveyFlights.CertifiedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTSNull() As Boolean
            Return Me.IsNull(Me.tableSurveyFlights.TSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTSNull()
            Me(Me.tableSurveyFlights.TSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetCompositionCountsRows() As CompositionCountsRow()
            If (Me.Table.ChildRelations("FK_CompositionCounts_SurveyFlights") Is Nothing) Then
                Return New CompositionCountsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_CompositionCounts_SurveyFlights")),CompositionCountsRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPopulationEstimateRows() As PopulationEstimateRow()
            If (Me.Table.ChildRelations("FK_PopulationEstimate_SurveyFlights") Is Nothing) Then
                Return New PopulationEstimateRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PopulationEstimate_SurveyFlights")),PopulationEstimateRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetRadioTrackingRows() As RadioTrackingRow()
            If (Me.Table.ChildRelations("FK_RadioTracking_SurveyFlights") Is Nothing) Then
                Return New RadioTrackingRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_RadioTracking_SurveyFlights")),RadioTrackingRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class WorkLogRow
        Inherits Global.System.Data.DataRow
        
        Private tableWorkLog As WorkLogDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWorkLog = CType(Me.Table,WorkLogDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WorkLogID() As Integer
            Get
                Return CType(Me(Me.tableWorkLog.WorkLogIDColumn),Integer)
            End Get
            Set
                Me(Me.tableWorkLog.WorkLogIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LogDate() As Date
            Get
                Return CType(Me(Me.tableWorkLog.LogDateColumn),Date)
            End Get
            Set
                Me(Me.tableWorkLog.LogDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UserName() As String
            Get
                Return CType(Me(Me.tableWorkLog.UserNameColumn),String)
            End Get
            Set
                Me(Me.tableWorkLog.UserNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LogEntry() As String
            Get
                Return CType(Me(Me.tableWorkLog.LogEntryColumn),String)
            End Get
            Set
                Me(Me.tableWorkLog.LogEntryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Return CType(Me(Me.tableWorkLog.RecordInsertedByColumn),String)
            End Get
            Set
                Me(Me.tableWorkLog.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Return CType(Me(Me.tableWorkLog.RecordInsertedDateColumn),Date)
            End Get
            Set
                Me(Me.tableWorkLog.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecordLastUpdatedBy() As String
            Get
                Return CType(Me(Me.tableWorkLog.RecordLastUpdatedByColumn),String)
            End Get
            Set
                Me(Me.tableWorkLog.RecordLastUpdatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecordLastUpdatedDate() As Date
            Get
                Return CType(Me(Me.tableWorkLog.RecordLastUpdatedDateColumn),Date)
            End Get
            Set
                Me(Me.tableWorkLog.RecordLastUpdatedDateColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class xrefCompCountCaribouRow
        Inherits Global.System.Data.DataRow
        
        Private tablexrefCompCountCaribou As xrefCompCountCaribouDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablexrefCompCountCaribou = CType(Me.Table,xrefCompCountCaribouDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CCCID() As String
            Get
                Return CType(Me(Me.tablexrefCompCountCaribou.CCCIDColumn),String)
            End Get
            Set
                Me(Me.tablexrefCompCountCaribou.CCCIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CCID() As String
            Get
                Return CType(Me(Me.tablexrefCompCountCaribou.CCIDColumn),String)
            End Get
            Set
                Me(Me.tablexrefCompCountCaribou.CCIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjectID() As String
            Get
                Return CType(Me(Me.tablexrefCompCountCaribou.ProjectIDColumn),String)
            End Get
            Set
                Me(Me.tablexrefCompCountCaribou.ProjectIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AnimalID() As String
            Get
                Return CType(Me(Me.tablexrefCompCountCaribou.AnimalIDColumn),String)
            End Get
            Set
                Me(Me.tablexrefCompCountCaribou.AnimalIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Return CType(Me(Me.tablexrefCompCountCaribou.RecordInsertedDateColumn),Date)
            End Get
            Set
                Me(Me.tablexrefCompCountCaribou.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Return CType(Me(Me.tablexrefCompCountCaribou.RecordInsertedByColumn),String)
            End Get
            Set
                Me(Me.tablexrefCompCountCaribou.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TS() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablexrefCompCountCaribou.TSColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TS' in table 'xrefCompCountCaribou' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablexrefCompCountCaribou.TSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CaribouRowParent() As CaribouRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_xrefCompCountCaribou_Caribou")),CaribouRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_xrefCompCountCaribou_Caribou"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CompositionCountsRow() As CompositionCountsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_xrefCompCountCaribou_CompositionCounts")),CompositionCountsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_xrefCompCountCaribou_CompositionCounts"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTSNull() As Boolean
            Return Me.IsNull(Me.tablexrefCompCountCaribou.TSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTSNull()
            Me(Me.tablexrefCompCountCaribou.TSColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class xrefPopulationCaribouRow
        Inherits Global.System.Data.DataRow
        
        Private tablexrefPopulationCaribou As xrefPopulationCaribouDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablexrefPopulationCaribou = CType(Me.Table,xrefPopulationCaribouDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Return CType(Me(Me.tablexrefPopulationCaribou.RecordInsertedByColumn),String)
            End Get
            Set
                Me(Me.tablexrefPopulationCaribou.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EID() As String
            Get
                Return CType(Me(Me.tablexrefPopulationCaribou.EIDColumn),String)
            End Get
            Set
                Me(Me.tablexrefPopulationCaribou.EIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjectID() As String
            Get
                Return CType(Me(Me.tablexrefPopulationCaribou.ProjectIDColumn),String)
            End Get
            Set
                Me(Me.tablexrefPopulationCaribou.ProjectIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AnimalID() As String
            Get
                Return CType(Me(Me.tablexrefPopulationCaribou.AnimalIDColumn),String)
            End Get
            Set
                Me(Me.tablexrefPopulationCaribou.AnimalIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Return CType(Me(Me.tablexrefPopulationCaribou.RecordInsertedDateColumn),Date)
            End Get
            Set
                Me(Me.tablexrefPopulationCaribou.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PCID() As String
            Get
                Return CType(Me(Me.tablexrefPopulationCaribou.PCIDColumn),String)
            End Get
            Set
                Me(Me.tablexrefPopulationCaribou.PCIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TS() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablexrefPopulationCaribou.TSColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TS' in table 'xrefPopulationCaribou' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablexrefPopulationCaribou.TSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CaribouRowParent() As CaribouRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_xrefPopulationCaribou_Caribou")),CaribouRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_xrefPopulationCaribou_Caribou"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PopulationEstimateRow() As PopulationEstimateRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_xrefPopulationCaribou_PopulationEstimate")),PopulationEstimateRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_xrefPopulationCaribou_PopulationEstimate"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTSNull() As Boolean
            Return Me.IsNull(Me.tablexrefPopulationCaribou.TSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTSNull()
            Me(Me.tablexrefPopulationCaribou.TSColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class xrefRadiotrackingCaribouRow
        Inherits Global.System.Data.DataRow
        
        Private tablexrefRadiotrackingCaribou As xrefRadiotrackingCaribouDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablexrefRadiotrackingCaribou = CType(Me.Table,xrefRadiotrackingCaribouDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RTCID() As String
            Get
                Return CType(Me(Me.tablexrefRadiotrackingCaribou.RTCIDColumn),String)
            End Get
            Set
                Me(Me.tablexrefRadiotrackingCaribou.RTCIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RTID() As String
            Get
                Return CType(Me(Me.tablexrefRadiotrackingCaribou.RTIDColumn),String)
            End Get
            Set
                Me(Me.tablexrefRadiotrackingCaribou.RTIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProjectID() As String
            Get
                Return CType(Me(Me.tablexrefRadiotrackingCaribou.ProjectIDColumn),String)
            End Get
            Set
                Me(Me.tablexrefRadiotrackingCaribou.ProjectIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AnimalID() As String
            Get
                Return CType(Me(Me.tablexrefRadiotrackingCaribou.AnimalIDColumn),String)
            End Get
            Set
                Me(Me.tablexrefRadiotrackingCaribou.AnimalIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecordInsertedDate() As Date
            Get
                Return CType(Me(Me.tablexrefRadiotrackingCaribou.RecordInsertedDateColumn),Date)
            End Get
            Set
                Me(Me.tablexrefRadiotrackingCaribou.RecordInsertedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RecordInsertedBy() As String
            Get
                Return CType(Me(Me.tablexrefRadiotrackingCaribou.RecordInsertedByColumn),String)
            End Get
            Set
                Me(Me.tablexrefRadiotrackingCaribou.RecordInsertedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TS() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablexrefRadiotrackingCaribou.TSColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TS' in table 'xrefRadiotrackingCaribou' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablexrefRadiotrackingCaribou.TSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CaribouRowParent() As CaribouRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_xrefRadiotrackingCaribou_Caribou")),CaribouRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_xrefRadiotrackingCaribou_Caribou"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RadioTrackingRow() As RadioTrackingRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_xrefRadiotrackingCaribou_RadioTracking")),RadioTrackingRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_xrefRadiotrackingCaribou_RadioTracking"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTSNull() As Boolean
            Return Me.IsNull(Me.tablexrefRadiotrackingCaribou.TSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTSNull()
            Me(Me.tablexrefRadiotrackingCaribou.TSColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class CampaignsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CampaignsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As CampaignsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As CampaignsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class CapturesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CapturesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As CapturesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As CapturesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class CaribouRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CaribouRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As CaribouRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As CaribouRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class CompositionCountsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CompositionCountsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As CompositionCountsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As CompositionCountsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PopulationEstimateRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PopulationEstimateRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PopulationEstimateRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PopulationEstimateRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class RadioTrackingRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RadioTrackingRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As RadioTrackingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As RadioTrackingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class SurveyFlightsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SurveyFlightsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As SurveyFlightsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As SurveyFlightsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class WorkLogRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As WorkLogRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As WorkLogRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As WorkLogRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class xrefCompCountCaribouRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As xrefCompCountCaribouRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As xrefCompCountCaribouRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As xrefCompCountCaribouRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class xrefPopulationCaribouRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As xrefPopulationCaribouRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As xrefPopulationCaribouRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As xrefPopulationCaribouRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class xrefRadiotrackingCaribouRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As xrefRadiotrackingCaribouRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As xrefRadiotrackingCaribouRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As xrefRadiotrackingCaribouRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace WRST_CaribouDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CampaignsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Campaigns"
            tableMapping.ColumnMappings.Add("CampaignID", "CampaignID")
            tableMapping.ColumnMappings.Add("Campaign", "Campaign")
            tableMapping.ColumnMappings.Add("Year", "Year")
            tableMapping.ColumnMappings.Add("SurveyType", "SurveyType")
            tableMapping.ColumnMappings.Add("Herd", "Herd")
            tableMapping.ColumnMappings.Add("StartDate", "StartDate")
            tableMapping.ColumnMappings.Add("EndDate", "EndDate")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("Personnel", "Personnel")
            tableMapping.ColumnMappings.Add("Notes", "Notes")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("ProtocolIRMAReference", "ProtocolIRMAReference")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Campaigns] WHERE (([CampaignID] = @Original_CampaignID) AND (["& _ 
                "Campaign] = @Original_Campaign) AND ([Year] = @Original_Year) AND ([SurveyType] "& _ 
                "= @Original_SurveyType) AND ([Herd] = @Original_Herd) AND ((@IsNull_StartDate = "& _ 
                "1 AND [StartDate] IS NULL) OR ([StartDate] = @Original_StartDate)) AND ((@IsNull"& _ 
                "_EndDate = 1 AND [EndDate] IS NULL) OR ([EndDate] = @Original_EndDate)) AND ((@I"& _ 
                "sNull_Personnel = 1 AND [Personnel] IS NULL) OR ([Personnel] = @Original_Personn"& _ 
                "el)) AND ([RecordInsertedDate] = @Original_RecordInsertedDate) AND ([RecordInser"& _ 
                "tedBy] = @Original_RecordInsertedBy) AND ((@IsNull_ProtocolIRMAReference = 1 AND"& _ 
                " [ProtocolIRMAReference] IS NULL) OR ([ProtocolIRMAReference] = @Original_Protoc"& _ 
                "olIRMAReference)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CampaignID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CampaignID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Campaign", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Campaign", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Year", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Year", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SurveyType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SurveyType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Herd", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Herd", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StartDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StartDate", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EndDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EndDate", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Personnel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Personnel", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Personnel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Personnel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ProtocolIRMAReference", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProtocolIRMAReference", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProtocolIRMAReference", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProtocolIRMAReference", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Campaigns] ([CampaignID], [Campaign], [Year], [SurveyType], [H"& _ 
                "erd], [StartDate], [EndDate], [Description], [Personnel], [Notes], [RecordInsert"& _ 
                "edDate], [RecordInsertedBy], [ProtocolIRMAReference]) VALUES (@CampaignID, @Camp"& _ 
                "aign, @Year, @SurveyType, @Herd, @StartDate, @EndDate, @Description, @Personnel,"& _ 
                " @Notes, @RecordInsertedDate, @RecordInsertedBy, @ProtocolIRMAReference);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELEC"& _ 
                "T CampaignID, Campaign, Year, SurveyType, Herd, StartDate, EndDate, Description,"& _ 
                " Personnel, Notes, RecordInsertedDate, RecordInsertedBy, ProtocolIRMAReference F"& _ 
                "ROM Campaigns WHERE (CampaignID = @CampaignID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CampaignID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CampaignID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Campaign", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Campaign", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Year", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Year", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SurveyType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SurveyType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Herd", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Herd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartDate", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EndDate", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Personnel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Personnel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Notes", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProtocolIRMAReference", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProtocolIRMAReference", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Campaigns] SET [CampaignID] = @CampaignID, [Campaign] = @Campaign, "& _ 
                "[Year] = @Year, [SurveyType] = @SurveyType, [Herd] = @Herd, [StartDate] = @Start"& _ 
                "Date, [EndDate] = @EndDate, [Description] = @Description, [Personnel] = @Personn"& _ 
                "el, [Notes] = @Notes, [RecordInsertedDate] = @RecordInsertedDate, [RecordInserte"& _ 
                "dBy] = @RecordInsertedBy, [ProtocolIRMAReference] = @ProtocolIRMAReference WHERE"& _ 
                " (([CampaignID] = @Original_CampaignID) AND ([Campaign] = @Original_Campaign) AN"& _ 
                "D ([Year] = @Original_Year) AND ([SurveyType] = @Original_SurveyType) AND ([Herd"& _ 
                "] = @Original_Herd) AND ((@IsNull_StartDate = 1 AND [StartDate] IS NULL) OR ([St"& _ 
                "artDate] = @Original_StartDate)) AND ((@IsNull_EndDate = 1 AND [EndDate] IS NULL"& _ 
                ") OR ([EndDate] = @Original_EndDate)) AND ((@IsNull_Personnel = 1 AND [Personnel"& _ 
                "] IS NULL) OR ([Personnel] = @Original_Personnel)) AND ([RecordInsertedDate] = @"& _ 
                "Original_RecordInsertedDate) AND ([RecordInsertedBy] = @Original_RecordInsertedB"& _ 
                "y) AND ((@IsNull_ProtocolIRMAReference = 1 AND [ProtocolIRMAReference] IS NULL) "& _ 
                "OR ([ProtocolIRMAReference] = @Original_ProtocolIRMAReference)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Campai"& _ 
                "gnID, Campaign, Year, SurveyType, Herd, StartDate, EndDate, Description, Personn"& _ 
                "el, Notes, RecordInsertedDate, RecordInsertedBy, ProtocolIRMAReference FROM Camp"& _ 
                "aigns WHERE (CampaignID = @CampaignID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CampaignID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CampaignID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Campaign", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Campaign", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Year", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Year", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SurveyType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SurveyType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Herd", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Herd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartDate", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EndDate", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Personnel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Personnel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Notes", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProtocolIRMAReference", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProtocolIRMAReference", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CampaignID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CampaignID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Campaign", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Campaign", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Year", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Year", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SurveyType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SurveyType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Herd", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Herd", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StartDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StartDate", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EndDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EndDate", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Personnel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Personnel", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Personnel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Personnel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ProtocolIRMAReference", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProtocolIRMAReference", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProtocolIRMAReference", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProtocolIRMAReference", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WRST_Caribou.My.MySettings.Default.WRST_CaribouConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CampaignID, Campaign, Year, SurveyType, Herd, StartDate, EndDate, Descript"& _ 
                "ion, Personnel, Notes, RecordInsertedDate, RecordInsertedBy, ProtocolIRMAReferen"& _ 
                "ce FROM dbo.Campaigns"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As WRST_CaribouDataSet.CampaignsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As WRST_CaribouDataSet.CampaignsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As WRST_CaribouDataSet.CampaignsDataTable = New WRST_CaribouDataSet.CampaignsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As WRST_CaribouDataSet.CampaignsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As WRST_CaribouDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Campaigns")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CampaignID As String, ByVal Original_Campaign As String, ByVal Original_Year As Integer, ByVal Original_SurveyType As String, ByVal Original_Herd As String, ByVal Original_StartDate As Global.System.Nullable(Of Date), ByVal Original_EndDate As Global.System.Nullable(Of Date), ByVal Original_Personnel As String, ByVal Original_RecordInsertedDate As Date, ByVal Original_RecordInsertedBy As String, ByVal Original_ProtocolIRMAReference As Global.System.Nullable(Of Integer)) As Integer
            If (Original_CampaignID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CampaignID")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CampaignID,String)
            End If
            If (Original_Campaign Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Campaign")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Campaign,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Year,Integer)
            If (Original_SurveyType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SurveyType")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SurveyType,String)
            End If
            If (Original_Herd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Herd")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Herd,String)
            End If
            If (Original_StartDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_StartDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_EndDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_EndDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_Personnel Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Personnel,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_RecordInsertedDate,Date)
            If (Original_RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RecordInsertedBy")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_RecordInsertedBy,String)
            End If
            If (Original_ProtocolIRMAReference.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_ProtocolIRMAReference.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CampaignID As String, ByVal Campaign As String, ByVal Year As Integer, ByVal SurveyType As String, ByVal Herd As String, ByVal StartDate As Global.System.Nullable(Of Date), ByVal EndDate As Global.System.Nullable(Of Date), ByVal Description As String, ByVal Personnel As String, ByVal Notes As String, ByVal RecordInsertedDate As Date, ByVal RecordInsertedBy As String, ByVal ProtocolIRMAReference As Global.System.Nullable(Of Integer)) As Integer
            If (CampaignID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CampaignID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CampaignID,String)
            End If
            If (Campaign Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Campaign")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Campaign,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(Year,Integer)
            If (SurveyType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SurveyType")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SurveyType,String)
            End If
            If (Herd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Herd")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Herd,String)
            End If
            If (StartDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(StartDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (EndDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(EndDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Description Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Description,String)
            End If
            If (Personnel Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Personnel,String)
            End If
            If (Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Notes,String)
            End If
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(RecordInsertedDate,Date)
            If (RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordInsertedBy")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(RecordInsertedBy,String)
            End If
            If (ProtocolIRMAReference.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(ProtocolIRMAReference.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CampaignID As String,  _
                    ByVal Campaign As String,  _
                    ByVal Year As Integer,  _
                    ByVal SurveyType As String,  _
                    ByVal Herd As String,  _
                    ByVal StartDate As Global.System.Nullable(Of Date),  _
                    ByVal EndDate As Global.System.Nullable(Of Date),  _
                    ByVal Description As String,  _
                    ByVal Personnel As String,  _
                    ByVal Notes As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal ProtocolIRMAReference As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CampaignID As String,  _
                    ByVal Original_Campaign As String,  _
                    ByVal Original_Year As Integer,  _
                    ByVal Original_SurveyType As String,  _
                    ByVal Original_Herd As String,  _
                    ByVal Original_StartDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_EndDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_Personnel As String,  _
                    ByVal Original_RecordInsertedDate As Date,  _
                    ByVal Original_RecordInsertedBy As String,  _
                    ByVal Original_ProtocolIRMAReference As Global.System.Nullable(Of Integer)) As Integer
            If (CampaignID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CampaignID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CampaignID,String)
            End If
            If (Campaign Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Campaign")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Campaign,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Year,Integer)
            If (SurveyType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SurveyType")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SurveyType,String)
            End If
            If (Herd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Herd")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Herd,String)
            End If
            If (StartDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(StartDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (EndDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(EndDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Description,String)
            End If
            If (Personnel Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Personnel,String)
            End If
            If (Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Notes,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(RecordInsertedDate,Date)
            If (RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordInsertedBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(RecordInsertedBy,String)
            End If
            If (ProtocolIRMAReference.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(ProtocolIRMAReference.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_CampaignID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CampaignID")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_CampaignID,String)
            End If
            If (Original_Campaign Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Campaign")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Campaign,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Year,Integer)
            If (Original_SurveyType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SurveyType")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_SurveyType,String)
            End If
            If (Original_Herd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Herd")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Herd,String)
            End If
            If (Original_StartDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_StartDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_EndDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_EndDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_Personnel Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_Personnel,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_RecordInsertedDate,Date)
            If (Original_RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RecordInsertedBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_RecordInsertedBy,String)
            End If
            If (Original_ProtocolIRMAReference.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_ProtocolIRMAReference.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Campaign As String,  _
                    ByVal Year As Integer,  _
                    ByVal SurveyType As String,  _
                    ByVal Herd As String,  _
                    ByVal StartDate As Global.System.Nullable(Of Date),  _
                    ByVal EndDate As Global.System.Nullable(Of Date),  _
                    ByVal Description As String,  _
                    ByVal Personnel As String,  _
                    ByVal Notes As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal ProtocolIRMAReference As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CampaignID As String,  _
                    ByVal Original_Campaign As String,  _
                    ByVal Original_Year As Integer,  _
                    ByVal Original_SurveyType As String,  _
                    ByVal Original_Herd As String,  _
                    ByVal Original_StartDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_EndDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_Personnel As String,  _
                    ByVal Original_RecordInsertedDate As Date,  _
                    ByVal Original_RecordInsertedBy As String,  _
                    ByVal Original_ProtocolIRMAReference As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_CampaignID, Campaign, Year, SurveyType, Herd, StartDate, EndDate, Description, Personnel, Notes, RecordInsertedDate, RecordInsertedBy, ProtocolIRMAReference, Original_CampaignID, Original_Campaign, Original_Year, Original_SurveyType, Original_Herd, Original_StartDate, Original_EndDate, Original_Personnel, Original_RecordInsertedDate, Original_RecordInsertedBy, Original_ProtocolIRMAReference)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CapturesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Captures"
            tableMapping.ColumnMappings.Add("AnimalID", "AnimalID")
            tableMapping.ColumnMappings.Add("CaptureDate", "CaptureDate")
            tableMapping.ColumnMappings.Add("Crew", "Crew")
            tableMapping.ColumnMappings.Add("Shooter", "Shooter")
            tableMapping.ColumnMappings.Add("Frequency", "Frequency")
            tableMapping.ColumnMappings.Add("VisualCollar", "VisualCollar")
            tableMapping.ColumnMappings.Add("SerialNumber", "SerialNumber")
            tableMapping.ColumnMappings.Add("CaptureLatitude", "CaptureLatitude")
            tableMapping.ColumnMappings.Add("CaptureLongitude", "CaptureLongitude")
            tableMapping.ColumnMappings.Add("OldFrequency", "OldFrequency")
            tableMapping.ColumnMappings.Add("OldVisualCollar", "OldVisualCollar")
            tableMapping.ColumnMappings.Add("GeneralLocation", "GeneralLocation")
            tableMapping.ColumnMappings.Add("TimeStartChase", "TimeStartChase")
            tableMapping.ColumnMappings.Add("TimeFirstHitBounce", "TimeFirstHitBounce")
            tableMapping.ColumnMappings.Add("TimeSecordHitBounce", "TimeSecordHitBounce")
            tableMapping.ColumnMappings.Add("TimeThirdHitBounce", "TimeThirdHitBounce")
            tableMapping.ColumnMappings.Add("TimeVisibleEffect", "TimeVisibleEffect")
            tableMapping.ColumnMappings.Add("TimeAnimalDown", "TimeAnimalDown")
            tableMapping.ColumnMappings.Add("DartLocation", "DartLocation")
            tableMapping.ColumnMappings.Add("Anesthetic", "Anesthetic")
            tableMapping.ColumnMappings.Add("AnestheticDosage_mg", "AnestheticDosage_mg")
            tableMapping.ColumnMappings.Add("AnestheticConcentration_mg_ml", "AnestheticConcentration_mg_ml")
            tableMapping.ColumnMappings.Add("Sedative", "Sedative")
            tableMapping.ColumnMappings.Add("SedativeDosage_mg", "SedativeDosage_mg")
            tableMapping.ColumnMappings.Add("SedativeConcentration_mg_ml", "SedativeConcentration_mg_ml")
            tableMapping.ColumnMappings.Add("NumHits", "NumHits")
            tableMapping.ColumnMappings.Add("NumMisses", "NumMisses")
            tableMapping.ColumnMappings.Add("DrugEffect", "DrugEffect")
            tableMapping.ColumnMappings.Add("InitialBodyTemp", "InitialBodyTemp")
            tableMapping.ColumnMappings.Add("InitialBodyTempTime", "InitialBodyTempTime")
            tableMapping.ColumnMappings.Add("FinalBodyTemperature", "FinalBodyTemperature")
            tableMapping.ColumnMappings.Add("FinalBodyTemperatureTime", "FinalBodyTemperatureTime")
            tableMapping.ColumnMappings.Add("AdditionalDrugs", "AdditionalDrugs")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("EstimatedAge", "EstimatedAge")
            tableMapping.ColumnMappings.Add("WithCalf", "WithCalf")
            tableMapping.ColumnMappings.Add("Lactating", "Lactating")
            tableMapping.ColumnMappings.Add("BodyCondition", "BodyCondition")
            tableMapping.ColumnMappings.Add("Weight_Kg", "Weight_Kg")
            tableMapping.ColumnMappings.Add("BodyLength", "BodyLength")
            tableMapping.ColumnMappings.Add("NeckCircumference", "NeckCircumference")
            tableMapping.ColumnMappings.Add("Jaw", "Jaw")
            tableMapping.ColumnMappings.Add("MetatarsusLength", "MetatarsusLength")
            tableMapping.ColumnMappings.Add("HindfootLength", "HindfootLength")
            tableMapping.ColumnMappings.Add("ChestGirth", "ChestGirth")
            tableMapping.ColumnMappings.Add("BloodSampleRed", "BloodSampleRed")
            tableMapping.ColumnMappings.Add("BloodSamplePurple", "BloodSamplePurple")
            tableMapping.ColumnMappings.Add("BloodSampleGreen", "BloodSampleGreen")
            tableMapping.ColumnMappings.Add("AnestheticReversal", "AnestheticReversal")
            tableMapping.ColumnMappings.Add("AnestheticReversalDosage_mg", "AnestheticReversalDosage_mg")
            tableMapping.ColumnMappings.Add("AnestheticReversalConcentration_mg_ml", "AnestheticReversalConcentration_mg_ml")
            tableMapping.ColumnMappings.Add("AnestheticReversalRoute", "AnestheticReversalRoute")
            tableMapping.ColumnMappings.Add("AnestheticReversalTime", "AnestheticReversalTime")
            tableMapping.ColumnMappings.Add("SedativeReversal", "SedativeReversal")
            tableMapping.ColumnMappings.Add("SedativeReversalDosage_mg", "SedativeReversalDosage_mg")
            tableMapping.ColumnMappings.Add("SedativeReversalConcentration_mg_ml", "SedativeReversalConcentration_mg_ml")
            tableMapping.ColumnMappings.Add("SedativeReversalRoute", "SedativeReversalRoute")
            tableMapping.ColumnMappings.Add("SedativeReversalTime", "SedativeReversalTime")
            tableMapping.ColumnMappings.Add("TimeStanding", "TimeStanding")
            tableMapping.ColumnMappings.Add("TimeMobile", "TimeMobile")
            tableMapping.ColumnMappings.Add("Comments", "Comments")
            tableMapping.ColumnMappings.Add("CaptureID", "CaptureID")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("ProjectID", "ProjectID")
            tableMapping.ColumnMappings.Add("TS", "TS")
            tableMapping.ColumnMappings.Add("AnestheticDosage_ml", "AnestheticDosage_ml")
            tableMapping.ColumnMappings.Add("SedativeDosage_ml", "SedativeDosage_ml")
            tableMapping.ColumnMappings.Add("AnestheticReversalDosage_ml", "AnestheticReversalDosage_ml")
            tableMapping.ColumnMappings.Add("SedativeReversalDosage_ml", "SedativeReversalDosage_ml")
            tableMapping.ColumnMappings.Add("ProtocolVersion", "ProtocolVersion")
            tableMapping.ColumnMappings.Add("SOPNumber", "SOPNumber")
            tableMapping.ColumnMappings.Add("SOPVersion", "SOPVersion")
            tableMapping.ColumnMappings.Add("CertificationDate", "CertificationDate")
            tableMapping.ColumnMappings.Add("CertifiedBy", "CertifiedBy")
            tableMapping.ColumnMappings.Add("ProtocolIRMAReference", "ProtocolIRMAReference")
            tableMapping.ColumnMappings.Add("CertificationLevel", "CertificationLevel")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Captures] WHERE (([CaptureID] = @Original_CaptureID) AND ((@Is"& _ 
                "Null_TS = 1 AND [TS] IS NULL) OR ([TS] = @Original_TS)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CaptureID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CaptureID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TS", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Captures] ([AnimalID], [CaptureDate], [Crew], [Shooter], [Freq"& _ 
                "uency], [VisualCollar], [SerialNumber], [CaptureLatitude], [CaptureLongitude], ["& _ 
                "OldFrequency], [OldVisualCollar], [GeneralLocation], [TimeStartChase], [TimeFirs"& _ 
                "tHitBounce], [TimeSecordHitBounce], [TimeThirdHitBounce], [TimeVisibleEffect], ["& _ 
                "TimeAnimalDown], [DartLocation], [Anesthetic], [AnestheticDosage_mg], [Anestheti"& _ 
                "cConcentration_mg_ml], [Sedative], [SedativeDosage_mg], [SedativeConcentration_m"& _ 
                "g_ml], [NumHits], [NumMisses], [DrugEffect], [InitialBodyTemp], [InitialBodyTemp"& _ 
                "Time], [FinalBodyTemperature], [FinalBodyTemperatureTime], [AdditionalDrugs], [S"& _ 
                "ex], [EstimatedAge], [WithCalf], [Lactating], [BodyCondition], [Weight_Kg], [Bod"& _ 
                "yLength], [NeckCircumference], [Jaw], [MetatarsusLength], [HindfootLength], [Che"& _ 
                "stGirth], [BloodSampleRed], [BloodSamplePurple], [BloodSampleGreen], [Anesthetic"& _ 
                "Reversal], [AnestheticReversalDosage_mg], [AnestheticReversalConcentration_mg_ml"& _ 
                "], [AnestheticReversalRoute], [AnestheticReversalTime], [SedativeReversal], [Sed"& _ 
                "ativeReversalDosage_mg], [SedativeReversalConcentration_mg_ml], [SedativeReversa"& _ 
                "lRoute], [SedativeReversalTime], [TimeStanding], [TimeMobile], [Comments], [Capt"& _ 
                "ureID], [RecordInsertedDate], [RecordInsertedBy], [ProjectID], [AnestheticDosage"& _ 
                "_ml], [SedativeDosage_ml], [AnestheticReversalDosage_ml], [SedativeReversalDosag"& _ 
                "e_ml], [ProtocolVersion], [SOPNumber], [SOPVersion], [CertificationDate], [Certi"& _ 
                "fiedBy], [ProtocolIRMAReference], [CertificationLevel]) VALUES (@AnimalID, @Capt"& _ 
                "ureDate, @Crew, @Shooter, @Frequency, @VisualCollar, @SerialNumber, @CaptureLati"& _ 
                "tude, @CaptureLongitude, @OldFrequency, @OldVisualCollar, @GeneralLocation, @Tim"& _ 
                "eStartChase, @TimeFirstHitBounce, @TimeSecordHitBounce, @TimeThirdHitBounce, @Ti"& _ 
                "meVisibleEffect, @TimeAnimalDown, @DartLocation, @Anesthetic, @AnestheticDosage_"& _ 
                "mg, @AnestheticConcentration_mg_ml, @Sedative, @SedativeDosage_mg, @SedativeConc"& _ 
                "entration_mg_ml, @NumHits, @NumMisses, @DrugEffect, @InitialBodyTemp, @InitialBo"& _ 
                "dyTempTime, @FinalBodyTemperature, @FinalBodyTemperatureTime, @AdditionalDrugs, "& _ 
                "@Sex, @EstimatedAge, @WithCalf, @Lactating, @BodyCondition, @Weight_Kg, @BodyLen"& _ 
                "gth, @NeckCircumference, @Jaw, @MetatarsusLength, @HindfootLength, @ChestGirth, "& _ 
                "@BloodSampleRed, @BloodSamplePurple, @BloodSampleGreen, @AnestheticReversal, @An"& _ 
                "estheticReversalDosage_mg, @AnestheticReversalConcentration_mg_ml, @AnestheticRe"& _ 
                "versalRoute, @AnestheticReversalTime, @SedativeReversal, @SedativeReversalDosage"& _ 
                "_mg, @SedativeReversalConcentration_mg_ml, @SedativeReversalRoute, @SedativeReve"& _ 
                "rsalTime, @TimeStanding, @TimeMobile, @Comments, @CaptureID, @RecordInsertedDate"& _ 
                ", @RecordInsertedBy, @ProjectID, @AnestheticDosage_ml, @SedativeDosage_ml, @Anes"& _ 
                "theticReversalDosage_ml, @SedativeReversalDosage_ml, @ProtocolVersion, @SOPNumbe"& _ 
                "r, @SOPVersion, @CertificationDate, @CertifiedBy, @ProtocolIRMAReference, @Certi"& _ 
                "ficationLevel);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT AnimalID, CaptureDate, Crew, Shooter, Frequency, VisualC"& _ 
                "ollar, SerialNumber, CaptureLatitude, CaptureLongitude, OldFrequency, OldVisualC"& _ 
                "ollar, GeneralLocation, TimeStartChase, TimeFirstHitBounce, TimeSecordHitBounce,"& _ 
                " TimeThirdHitBounce, TimeVisibleEffect, TimeAnimalDown, DartLocation, Anesthetic"& _ 
                ", AnestheticDosage_mg, AnestheticConcentration_mg_ml, Sedative, SedativeDosage_m"& _ 
                "g, SedativeConcentration_mg_ml, NumHits, NumMisses, DrugEffect, InitialBodyTemp,"& _ 
                " InitialBodyTempTime, FinalBodyTemperature, FinalBodyTemperatureTime, Additional"& _ 
                "Drugs, Sex, EstimatedAge, WithCalf, Lactating, BodyCondition, Weight_Kg, BodyLen"& _ 
                "gth, NeckCircumference, Jaw, MetatarsusLength, HindfootLength, ChestGirth, Blood"& _ 
                "SampleRed, BloodSamplePurple, BloodSampleGreen, AnestheticReversal, AnestheticRe"& _ 
                "versalDosage_mg, AnestheticReversalConcentration_mg_ml, AnestheticReversalRoute,"& _ 
                " AnestheticReversalTime, SedativeReversal, SedativeReversalDosage_mg, SedativeRe"& _ 
                "versalConcentration_mg_ml, SedativeReversalRoute, SedativeReversalTime, TimeStan"& _ 
                "ding, TimeMobile, Comments, CaptureID, RecordInsertedDate, RecordInsertedBy, Pro"& _ 
                "jectID, TS, AnestheticDosage_ml, SedativeDosage_ml, AnestheticReversalDosage_ml,"& _ 
                " SedativeReversalDosage_ml, ProtocolVersion, SOPNumber, SOPVersion, Certificatio"& _ 
                "nDate, CertifiedBy, ProtocolIRMAReference, CertificationLevel FROM Captures WHER"& _ 
                "E (CaptureID = @CaptureID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnimalID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnimalID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CaptureDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CaptureDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Crew", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Crew", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Shooter", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Shooter", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Frequency", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 3, "Frequency", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VisualCollar", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VisualCollar", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SerialNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SerialNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CaptureLatitude", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 9, "CaptureLatitude", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CaptureLongitude", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 9, "CaptureLongitude", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OldFrequency", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 3, "OldFrequency", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OldVisualCollar", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldVisualCollar", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GeneralLocation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GeneralLocation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeStartChase", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeStartChase", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeFirstHitBounce", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeFirstHitBounce", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeSecordHitBounce", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeSecordHitBounce", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeThirdHitBounce", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeThirdHitBounce", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeVisibleEffect", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeVisibleEffect", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeAnimalDown", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeAnimalDown", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DartLocation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DartLocation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Anesthetic", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anesthetic", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnestheticDosage_mg", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "AnestheticDosage_mg", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnestheticConcentration_mg_ml", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnestheticConcentration_mg_ml", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sedative", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sedative", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SedativeDosage_mg", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "SedativeDosage_mg", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SedativeConcentration_mg_ml", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SedativeConcentration_mg_ml", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NumHits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumHits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NumMisses", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumMisses", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DrugEffect", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DrugEffect", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InitialBodyTemp", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "InitialBodyTemp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InitialBodyTempTime", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InitialBodyTempTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FinalBodyTemperature", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "FinalBodyTemperature", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FinalBodyTemperatureTime", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinalBodyTemperatureTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AdditionalDrugs", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AdditionalDrugs", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sex", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sex", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EstimatedAge", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EstimatedAge", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WithCalf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WithCalf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lactating", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Lactating", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BodyCondition", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BodyCondition", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Weight_Kg", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 1, "Weight_Kg", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BodyLength", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 1, "BodyLength", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NeckCircumference", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 1, "NeckCircumference", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Jaw", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 1, "Jaw", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MetatarsusLength", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 1, "MetatarsusLength", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HindfootLength", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 1, "HindfootLength", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChestGirth", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 1, "ChestGirth", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BloodSampleRed", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BloodSampleRed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BloodSamplePurple", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BloodSamplePurple", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BloodSampleGreen", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BloodSampleGreen", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnestheticReversal", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnestheticReversal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnestheticReversalDosage_mg", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "AnestheticReversalDosage_mg", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnestheticReversalConcentration_mg_ml", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnestheticReversalConcentration_mg_ml", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnestheticReversalRoute", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnestheticReversalRoute", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnestheticReversalTime", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnestheticReversalTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SedativeReversal", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SedativeReversal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SedativeReversalDosage_mg", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "SedativeReversalDosage_mg", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SedativeReversalConcentration_mg_ml", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SedativeReversalConcentration_mg_ml", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SedativeReversalRoute", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SedativeReversalRoute", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SedativeReversalTime", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SedativeReversalTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeStanding", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeStanding", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeMobile", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeMobile", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Comments", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Comments", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CaptureID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CaptureID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProjectID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnestheticDosage_ml", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "AnestheticDosage_ml", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SedativeDosage_ml", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "SedativeDosage_ml", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnestheticReversalDosage_ml", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "AnestheticReversalDosage_ml", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SedativeReversalDosage_ml", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "SedativeReversalDosage_ml", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProtocolVersion", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "ProtocolVersion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOPNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOPNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOPVersion", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "SOPVersion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CertificationDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CertificationDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CertifiedBy", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CertifiedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProtocolIRMAReference", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProtocolIRMAReference", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CertificationLevel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CertificationLevel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Captures] SET [AnimalID] = @AnimalID, [CaptureDate] = @CaptureDate,"& _ 
                " [Crew] = @Crew, [Shooter] = @Shooter, [Frequency] = @Frequency, [VisualCollar] "& _ 
                "= @VisualCollar, [SerialNumber] = @SerialNumber, [CaptureLatitude] = @CaptureLat"& _ 
                "itude, [CaptureLongitude] = @CaptureLongitude, [OldFrequency] = @OldFrequency, ["& _ 
                "OldVisualCollar] = @OldVisualCollar, [GeneralLocation] = @GeneralLocation, [Time"& _ 
                "StartChase] = @TimeStartChase, [TimeFirstHitBounce] = @TimeFirstHitBounce, [Time"& _ 
                "SecordHitBounce] = @TimeSecordHitBounce, [TimeThirdHitBounce] = @TimeThirdHitBou"& _ 
                "nce, [TimeVisibleEffect] = @TimeVisibleEffect, [TimeAnimalDown] = @TimeAnimalDow"& _ 
                "n, [DartLocation] = @DartLocation, [Anesthetic] = @Anesthetic, [AnestheticDosage"& _ 
                "_mg] = @AnestheticDosage_mg, [AnestheticConcentration_mg_ml] = @AnestheticConcen"& _ 
                "tration_mg_ml, [Sedative] = @Sedative, [SedativeDosage_mg] = @SedativeDosage_mg,"& _ 
                " [SedativeConcentration_mg_ml] = @SedativeConcentration_mg_ml, [NumHits] = @NumH"& _ 
                "its, [NumMisses] = @NumMisses, [DrugEffect] = @DrugEffect, [InitialBodyTemp] = @"& _ 
                "InitialBodyTemp, [InitialBodyTempTime] = @InitialBodyTempTime, [FinalBodyTempera"& _ 
                "ture] = @FinalBodyTemperature, [FinalBodyTemperatureTime] = @FinalBodyTemperatur"& _ 
                "eTime, [AdditionalDrugs] = @AdditionalDrugs, [Sex] = @Sex, [EstimatedAge] = @Est"& _ 
                "imatedAge, [WithCalf] = @WithCalf, [Lactating] = @Lactating, [BodyCondition] = @"& _ 
                "BodyCondition, [Weight_Kg] = @Weight_Kg, [BodyLength] = @BodyLength, [NeckCircum"& _ 
                "ference] = @NeckCircumference, [Jaw] = @Jaw, [MetatarsusLength] = @MetatarsusLen"& _ 
                "gth, [HindfootLength] = @HindfootLength, [ChestGirth] = @ChestGirth, [BloodSampl"& _ 
                "eRed] = @BloodSampleRed, [BloodSamplePurple] = @BloodSamplePurple, [BloodSampleG"& _ 
                "reen] = @BloodSampleGreen, [AnestheticReversal] = @AnestheticReversal, [Anesthet"& _ 
                "icReversalDosage_mg] = @AnestheticReversalDosage_mg, [AnestheticReversalConcentr"& _ 
                "ation_mg_ml] = @AnestheticReversalConcentration_mg_ml, [AnestheticReversalRoute]"& _ 
                " = @AnestheticReversalRoute, [AnestheticReversalTime] = @AnestheticReversalTime,"& _ 
                " [SedativeReversal] = @SedativeReversal, [SedativeReversalDosage_mg] = @Sedative"& _ 
                "ReversalDosage_mg, [SedativeReversalConcentration_mg_ml] = @SedativeReversalConc"& _ 
                "entration_mg_ml, [SedativeReversalRoute] = @SedativeReversalRoute, [SedativeReve"& _ 
                "rsalTime] = @SedativeReversalTime, [TimeStanding] = @TimeStanding, [TimeMobile] "& _ 
                "= @TimeMobile, [Comments] = @Comments, [CaptureID] = @CaptureID, [RecordInserted"& _ 
                "Date] = @RecordInsertedDate, [RecordInsertedBy] = @RecordInsertedBy, [ProjectID]"& _ 
                " = @ProjectID, [AnestheticDosage_ml] = @AnestheticDosage_ml, [SedativeDosage_ml]"& _ 
                " = @SedativeDosage_ml, [AnestheticReversalDosage_ml] = @AnestheticReversalDosage"& _ 
                "_ml, [SedativeReversalDosage_ml] = @SedativeReversalDosage_ml, [ProtocolVersion]"& _ 
                " = @ProtocolVersion, [SOPNumber] = @SOPNumber, [SOPVersion] = @SOPVersion, [Cert"& _ 
                "ificationDate] = @CertificationDate, [CertifiedBy] = @CertifiedBy, [ProtocolIRMA"& _ 
                "Reference] = @ProtocolIRMAReference, [CertificationLevel] = @CertificationLevel "& _ 
                "WHERE (([CaptureID] = @Original_CaptureID) AND ((@IsNull_TS = 1 AND [TS] IS NULL"& _ 
                ") OR ([TS] = @Original_TS)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT AnimalID, CaptureDate, Crew, Shooter, Freq"& _ 
                "uency, VisualCollar, SerialNumber, CaptureLatitude, CaptureLongitude, OldFrequen"& _ 
                "cy, OldVisualCollar, GeneralLocation, TimeStartChase, TimeFirstHitBounce, TimeSe"& _ 
                "cordHitBounce, TimeThirdHitBounce, TimeVisibleEffect, TimeAnimalDown, DartLocati"& _ 
                "on, Anesthetic, AnestheticDosage_mg, AnestheticConcentration_mg_ml, Sedative, Se"& _ 
                "dativeDosage_mg, SedativeConcentration_mg_ml, NumHits, NumMisses, DrugEffect, In"& _ 
                "itialBodyTemp, InitialBodyTempTime, FinalBodyTemperature, FinalBodyTemperatureTi"& _ 
                "me, AdditionalDrugs, Sex, EstimatedAge, WithCalf, Lactating, BodyCondition, Weig"& _ 
                "ht_Kg, BodyLength, NeckCircumference, Jaw, MetatarsusLength, HindfootLength, Che"& _ 
                "stGirth, BloodSampleRed, BloodSamplePurple, BloodSampleGreen, AnestheticReversal"& _ 
                ", AnestheticReversalDosage_mg, AnestheticReversalConcentration_mg_ml, Anesthetic"& _ 
                "ReversalRoute, AnestheticReversalTime, SedativeReversal, SedativeReversalDosage_"& _ 
                "mg, SedativeReversalConcentration_mg_ml, SedativeReversalRoute, SedativeReversal"& _ 
                "Time, TimeStanding, TimeMobile, Comments, CaptureID, RecordInsertedDate, RecordI"& _ 
                "nsertedBy, ProjectID, TS, AnestheticDosage_ml, SedativeDosage_ml, AnestheticReve"& _ 
                "rsalDosage_ml, SedativeReversalDosage_ml, ProtocolVersion, SOPNumber, SOPVersion"& _ 
                ", CertificationDate, CertifiedBy, ProtocolIRMAReference, CertificationLevel FROM"& _ 
                " Captures WHERE (CaptureID = @CaptureID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnimalID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnimalID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CaptureDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CaptureDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Crew", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Crew", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Shooter", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Shooter", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Frequency", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 3, "Frequency", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VisualCollar", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VisualCollar", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SerialNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SerialNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CaptureLatitude", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 9, "CaptureLatitude", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CaptureLongitude", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 9, "CaptureLongitude", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OldFrequency", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 3, "OldFrequency", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OldVisualCollar", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldVisualCollar", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GeneralLocation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GeneralLocation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeStartChase", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeStartChase", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeFirstHitBounce", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeFirstHitBounce", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeSecordHitBounce", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeSecordHitBounce", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeThirdHitBounce", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeThirdHitBounce", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeVisibleEffect", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeVisibleEffect", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeAnimalDown", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeAnimalDown", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DartLocation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DartLocation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Anesthetic", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Anesthetic", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnestheticDosage_mg", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "AnestheticDosage_mg", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnestheticConcentration_mg_ml", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnestheticConcentration_mg_ml", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sedative", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sedative", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SedativeDosage_mg", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "SedativeDosage_mg", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SedativeConcentration_mg_ml", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SedativeConcentration_mg_ml", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NumHits", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumHits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NumMisses", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumMisses", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DrugEffect", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DrugEffect", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InitialBodyTemp", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "InitialBodyTemp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InitialBodyTempTime", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InitialBodyTempTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FinalBodyTemperature", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "FinalBodyTemperature", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FinalBodyTemperatureTime", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinalBodyTemperatureTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AdditionalDrugs", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AdditionalDrugs", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sex", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sex", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EstimatedAge", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EstimatedAge", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WithCalf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WithCalf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lactating", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Lactating", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BodyCondition", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BodyCondition", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Weight_Kg", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 1, "Weight_Kg", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BodyLength", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 1, "BodyLength", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NeckCircumference", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 1, "NeckCircumference", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Jaw", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 1, "Jaw", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MetatarsusLength", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 1, "MetatarsusLength", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HindfootLength", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 1, "HindfootLength", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChestGirth", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 1, "ChestGirth", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BloodSampleRed", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BloodSampleRed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BloodSamplePurple", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BloodSamplePurple", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BloodSampleGreen", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BloodSampleGreen", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnestheticReversal", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnestheticReversal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnestheticReversalDosage_mg", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "AnestheticReversalDosage_mg", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnestheticReversalConcentration_mg_ml", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnestheticReversalConcentration_mg_ml", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnestheticReversalRoute", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnestheticReversalRoute", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnestheticReversalTime", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnestheticReversalTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SedativeReversal", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SedativeReversal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SedativeReversalDosage_mg", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "SedativeReversalDosage_mg", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SedativeReversalConcentration_mg_ml", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SedativeReversalConcentration_mg_ml", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SedativeReversalRoute", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SedativeReversalRoute", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SedativeReversalTime", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SedativeReversalTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeStanding", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeStanding", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeMobile", Global.System.Data.SqlDbType.Time, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeMobile", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Comments", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Comments", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CaptureID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CaptureID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProjectID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnestheticDosage_ml", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "AnestheticDosage_ml", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SedativeDosage_ml", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "SedativeDosage_ml", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnestheticReversalDosage_ml", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "AnestheticReversalDosage_ml", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SedativeReversalDosage_ml", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "SedativeReversalDosage_ml", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProtocolVersion", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "ProtocolVersion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOPNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOPNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOPVersion", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "SOPVersion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CertificationDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CertificationDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CertifiedBy", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CertifiedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProtocolIRMAReference", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProtocolIRMAReference", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CertificationLevel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CertificationLevel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CaptureID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CaptureID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TS", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WRST_Caribou.My.MySettings.Default.WRST_CaribouConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT AnimalID, CaptureDate, Crew, Shooter, Frequency, VisualCollar, SerialNumbe"& _ 
                "r, CaptureLatitude, CaptureLongitude, OldFrequency, OldVisualCollar, GeneralLoca"& _ 
                "tion, TimeStartChase, TimeFirstHitBounce, TimeSecordHitBounce, TimeThirdHitBounc"& _ 
                "e, TimeVisibleEffect, TimeAnimalDown, DartLocation, Anesthetic, AnestheticDosage"& _ 
                "_mg, AnestheticConcentration_mg_ml, Sedative, SedativeDosage_mg, SedativeConcent"& _ 
                "ration_mg_ml, NumHits, NumMisses, DrugEffect, InitialBodyTemp, InitialBodyTempTi"& _ 
                "me, FinalBodyTemperature, FinalBodyTemperatureTime, AdditionalDrugs, Sex, Estima"& _ 
                "tedAge, WithCalf, Lactating, BodyCondition, Weight_Kg, BodyLength, NeckCircumfer"& _ 
                "ence, Jaw, MetatarsusLength, HindfootLength, ChestGirth, BloodSampleRed, BloodSa"& _ 
                "mplePurple, BloodSampleGreen, AnestheticReversal, AnestheticReversalDosage_mg, A"& _ 
                "nestheticReversalConcentration_mg_ml, AnestheticReversalRoute, AnestheticReversa"& _ 
                "lTime, SedativeReversal, SedativeReversalDosage_mg, SedativeReversalConcentratio"& _ 
                "n_mg_ml, SedativeReversalRoute, SedativeReversalTime, TimeStanding, TimeMobile, "& _ 
                "Comments, CaptureID, RecordInsertedDate, RecordInsertedBy, ProjectID, TS, Anesth"& _ 
                "eticDosage_ml, SedativeDosage_ml, AnestheticReversalDosage_ml, SedativeReversalD"& _ 
                "osage_ml, ProtocolVersion, SOPNumber, SOPVersion, CertificationDate, CertifiedBy"& _ 
                ", ProtocolIRMAReference, CertificationLevel FROM dbo.Captures"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As WRST_CaribouDataSet.CapturesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As WRST_CaribouDataSet.CapturesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As WRST_CaribouDataSet.CapturesDataTable = New WRST_CaribouDataSet.CapturesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As WRST_CaribouDataSet.CapturesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As WRST_CaribouDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Captures")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CaptureID As String, ByVal Original_TS() As Byte) As Integer
            If (Original_CaptureID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CaptureID")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CaptureID,String)
            End If
            If (Original_TS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_TS,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal AnimalID As String,  _
                    ByVal CaptureDate As Date,  _
                    ByVal Crew As String,  _
                    ByVal Shooter As String,  _
                    ByVal Frequency As Global.System.Nullable(Of Decimal),  _
                    ByVal VisualCollar As String,  _
                    ByVal SerialNumber As Global.System.Nullable(Of Integer),  _
                    ByVal CaptureLatitude As Global.System.Nullable(Of Decimal),  _
                    ByVal CaptureLongitude As Global.System.Nullable(Of Decimal),  _
                    ByVal OldFrequency As Global.System.Nullable(Of Decimal),  _
                    ByVal OldVisualCollar As String,  _
                    ByVal GeneralLocation As String,  _
                    ByVal TimeStartChase As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal TimeFirstHitBounce As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal TimeSecordHitBounce As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal TimeThirdHitBounce As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal TimeVisibleEffect As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal TimeAnimalDown As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal DartLocation As String,  _
                    ByVal Anesthetic As String,  _
                    ByVal AnestheticDosage_mg As Global.System.Nullable(Of Decimal),  _
                    ByVal AnestheticConcentration_mg_ml As Global.System.Nullable(Of Integer),  _
                    ByVal Sedative As String,  _
                    ByVal SedativeDosage_mg As Global.System.Nullable(Of Decimal),  _
                    ByVal SedativeConcentration_mg_ml As Global.System.Nullable(Of Integer),  _
                    ByVal NumHits As Global.System.Nullable(Of Integer),  _
                    ByVal NumMisses As Global.System.Nullable(Of Integer),  _
                    ByVal DrugEffect As Global.System.Nullable(Of Integer),  _
                    ByVal InitialBodyTemp As Global.System.Nullable(Of Decimal),  _
                    ByVal InitialBodyTempTime As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal FinalBodyTemperature As Global.System.Nullable(Of Decimal),  _
                    ByVal FinalBodyTemperatureTime As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal AdditionalDrugs As String,  _
                    ByVal Sex As String,  _
                    ByVal EstimatedAge As Global.System.Nullable(Of Integer),  _
                    ByVal WithCalf As Global.System.Nullable(Of Integer),  _
                    ByVal Lactating As Global.System.Nullable(Of Integer),  _
                    ByVal BodyCondition As String,  _
                    ByVal Weight_Kg As Global.System.Nullable(Of Decimal),  _
                    ByVal BodyLength As Global.System.Nullable(Of Decimal),  _
                    ByVal NeckCircumference As Global.System.Nullable(Of Decimal),  _
                    ByVal Jaw As Global.System.Nullable(Of Decimal),  _
                    ByVal MetatarsusLength As Global.System.Nullable(Of Decimal),  _
                    ByVal HindfootLength As Global.System.Nullable(Of Decimal),  _
                    ByVal ChestGirth As Global.System.Nullable(Of Decimal),  _
                    ByVal BloodSampleRed As Global.System.Nullable(Of Integer),  _
                    ByVal BloodSamplePurple As Global.System.Nullable(Of Integer),  _
                    ByVal BloodSampleGreen As Global.System.Nullable(Of Integer),  _
                    ByVal AnestheticReversal As String,  _
                    ByVal AnestheticReversalDosage_mg As Global.System.Nullable(Of Decimal),  _
                    ByVal AnestheticReversalConcentration_mg_ml As Global.System.Nullable(Of Integer),  _
                    ByVal AnestheticReversalRoute As String,  _
                    ByVal AnestheticReversalTime As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal SedativeReversal As String,  _
                    ByVal SedativeReversalDosage_mg As Global.System.Nullable(Of Decimal),  _
                    ByVal SedativeReversalConcentration_mg_ml As Global.System.Nullable(Of Integer),  _
                    ByVal SedativeReversalRoute As String,  _
                    ByVal SedativeReversalTime As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal TimeStanding As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal TimeMobile As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal Comments As String,  _
                    ByVal CaptureID As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal ProjectID As String,  _
                    ByVal AnestheticDosage_ml As Global.System.Nullable(Of Decimal),  _
                    ByVal SedativeDosage_ml As Global.System.Nullable(Of Decimal),  _
                    ByVal AnestheticReversalDosage_ml As Global.System.Nullable(Of Decimal),  _
                    ByVal SedativeReversalDosage_ml As Global.System.Nullable(Of Decimal),  _
                    ByVal ProtocolVersion As Decimal,  _
                    ByVal SOPNumber As Integer,  _
                    ByVal SOPVersion As Decimal,  _
                    ByVal CertificationDate As Global.System.Nullable(Of Date),  _
                    ByVal CertifiedBy As String,  _
                    ByVal ProtocolIRMAReference As Global.System.Nullable(Of Integer),  _
                    ByVal CertificationLevel As String) As Integer
            If (AnimalID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AnimalID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(AnimalID,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(CaptureDate,Date)
            If (Crew Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Crew,String)
            End If
            If (Shooter Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Shooter,String)
            End If
            If (Frequency.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Frequency.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (VisualCollar Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(VisualCollar,String)
            End If
            If (SerialNumber.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(SerialNumber.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (CaptureLatitude.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(CaptureLatitude.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (CaptureLongitude.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(CaptureLongitude.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (OldFrequency.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(OldFrequency.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (OldVisualCollar Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(OldVisualCollar,String)
            End If
            If (GeneralLocation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(GeneralLocation,String)
            End If
            If (TimeStartChase.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(TimeStartChase.Value,System.TimeSpan)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (TimeFirstHitBounce.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(TimeFirstHitBounce.Value,System.TimeSpan)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (TimeSecordHitBounce.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(TimeSecordHitBounce.Value,System.TimeSpan)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (TimeThirdHitBounce.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(TimeThirdHitBounce.Value,System.TimeSpan)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (TimeVisibleEffect.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(TimeVisibleEffect.Value,System.TimeSpan)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (TimeAnimalDown.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(TimeAnimalDown.Value,System.TimeSpan)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (DartLocation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(DartLocation,String)
            End If
            If (Anesthetic Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(Anesthetic,String)
            End If
            If (AnestheticDosage_mg.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(AnestheticDosage_mg.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (AnestheticConcentration_mg_ml.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(AnestheticConcentration_mg_ml.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Sedative Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(Sedative,String)
            End If
            If (SedativeDosage_mg.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(SedativeDosage_mg.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (SedativeConcentration_mg_ml.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(SedativeConcentration_mg_ml.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (NumHits.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(NumHits.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (NumMisses.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(NumMisses.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (DrugEffect.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(DrugEffect.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (InitialBodyTemp.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(InitialBodyTemp.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (InitialBodyTempTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(InitialBodyTempTime.Value,System.TimeSpan)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (FinalBodyTemperature.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(FinalBodyTemperature.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (FinalBodyTemperatureTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(FinalBodyTemperatureTime.Value,System.TimeSpan)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (AdditionalDrugs Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(AdditionalDrugs,String)
            End If
            If (Sex Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Sex")
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(Sex,String)
            End If
            If (EstimatedAge.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(EstimatedAge.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (WithCalf.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(WithCalf.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Lactating.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(Lactating.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (BodyCondition Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(BodyCondition,String)
            End If
            If (Weight_Kg.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(Weight_Kg.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (BodyLength.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(BodyLength.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (NeckCircumference.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(NeckCircumference.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Jaw.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(Jaw.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (MetatarsusLength.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(MetatarsusLength.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (HindfootLength.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(HindfootLength.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (ChestGirth.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(ChestGirth.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (BloodSampleRed.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(BloodSampleRed.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (BloodSamplePurple.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(BloodSamplePurple.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (BloodSampleGreen.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(BloodSampleGreen.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (AnestheticReversal Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(AnestheticReversal,String)
            End If
            If (AnestheticReversalDosage_mg.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(AnestheticReversalDosage_mg.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (AnestheticReversalConcentration_mg_ml.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(AnestheticReversalConcentration_mg_ml.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (AnestheticReversalRoute Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(AnestheticReversalRoute,String)
            End If
            If (AnestheticReversalTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(AnestheticReversalTime.Value,System.TimeSpan)
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (SedativeReversal Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(SedativeReversal,String)
            End If
            If (SedativeReversalDosage_mg.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(SedativeReversalDosage_mg.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (SedativeReversalConcentration_mg_ml.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(SedativeReversalConcentration_mg_ml.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (SedativeReversalRoute Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(SedativeReversalRoute,String)
            End If
            If (SedativeReversalTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(SedativeReversalTime.Value,System.TimeSpan)
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (TimeStanding.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(TimeStanding.Value,System.TimeSpan)
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (TimeMobile.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(TimeMobile.Value,System.TimeSpan)
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Comments Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(Comments,String)
            End If
            If (CaptureID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CaptureID")
            Else
                Me.Adapter.InsertCommand.Parameters(61).Value = CType(CaptureID,String)
            End If
            Me.Adapter.InsertCommand.Parameters(62).Value = CType(RecordInsertedDate,Date)
            If (RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordInsertedBy")
            Else
                Me.Adapter.InsertCommand.Parameters(63).Value = CType(RecordInsertedBy,String)
            End If
            If (ProjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ProjectID")
            Else
                Me.Adapter.InsertCommand.Parameters(64).Value = CType(ProjectID,String)
            End If
            If (AnestheticDosage_ml.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(65).Value = CType(AnestheticDosage_ml.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (SedativeDosage_ml.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(66).Value = CType(SedativeDosage_ml.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            If (AnestheticReversalDosage_ml.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(67).Value = CType(AnestheticReversalDosage_ml.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (SedativeReversalDosage_ml.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(68).Value = CType(SedativeReversalDosage_ml.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(69).Value = CType(ProtocolVersion,Decimal)
            Me.Adapter.InsertCommand.Parameters(70).Value = CType(SOPNumber,Integer)
            Me.Adapter.InsertCommand.Parameters(71).Value = CType(SOPVersion,Decimal)
            If (CertificationDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(72).Value = CType(CertificationDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(72).Value = Global.System.DBNull.Value
            End If
            If (CertifiedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(73).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(73).Value = CType(CertifiedBy,String)
            End If
            If (ProtocolIRMAReference.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(74).Value = CType(ProtocolIRMAReference.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(74).Value = Global.System.DBNull.Value
            End If
            If (CertificationLevel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CertificationLevel")
            Else
                Me.Adapter.InsertCommand.Parameters(75).Value = CType(CertificationLevel,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal AnimalID As String,  _
                    ByVal CaptureDate As Date,  _
                    ByVal Crew As String,  _
                    ByVal Shooter As String,  _
                    ByVal Frequency As Global.System.Nullable(Of Decimal),  _
                    ByVal VisualCollar As String,  _
                    ByVal SerialNumber As Global.System.Nullable(Of Integer),  _
                    ByVal CaptureLatitude As Global.System.Nullable(Of Decimal),  _
                    ByVal CaptureLongitude As Global.System.Nullable(Of Decimal),  _
                    ByVal OldFrequency As Global.System.Nullable(Of Decimal),  _
                    ByVal OldVisualCollar As String,  _
                    ByVal GeneralLocation As String,  _
                    ByVal TimeStartChase As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal TimeFirstHitBounce As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal TimeSecordHitBounce As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal TimeThirdHitBounce As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal TimeVisibleEffect As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal TimeAnimalDown As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal DartLocation As String,  _
                    ByVal Anesthetic As String,  _
                    ByVal AnestheticDosage_mg As Global.System.Nullable(Of Decimal),  _
                    ByVal AnestheticConcentration_mg_ml As Global.System.Nullable(Of Integer),  _
                    ByVal Sedative As String,  _
                    ByVal SedativeDosage_mg As Global.System.Nullable(Of Decimal),  _
                    ByVal SedativeConcentration_mg_ml As Global.System.Nullable(Of Integer),  _
                    ByVal NumHits As Global.System.Nullable(Of Integer),  _
                    ByVal NumMisses As Global.System.Nullable(Of Integer),  _
                    ByVal DrugEffect As Global.System.Nullable(Of Integer),  _
                    ByVal InitialBodyTemp As Global.System.Nullable(Of Decimal),  _
                    ByVal InitialBodyTempTime As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal FinalBodyTemperature As Global.System.Nullable(Of Decimal),  _
                    ByVal FinalBodyTemperatureTime As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal AdditionalDrugs As String,  _
                    ByVal Sex As String,  _
                    ByVal EstimatedAge As Global.System.Nullable(Of Integer),  _
                    ByVal WithCalf As Global.System.Nullable(Of Integer),  _
                    ByVal Lactating As Global.System.Nullable(Of Integer),  _
                    ByVal BodyCondition As String,  _
                    ByVal Weight_Kg As Global.System.Nullable(Of Decimal),  _
                    ByVal BodyLength As Global.System.Nullable(Of Decimal),  _
                    ByVal NeckCircumference As Global.System.Nullable(Of Decimal),  _
                    ByVal Jaw As Global.System.Nullable(Of Decimal),  _
                    ByVal MetatarsusLength As Global.System.Nullable(Of Decimal),  _
                    ByVal HindfootLength As Global.System.Nullable(Of Decimal),  _
                    ByVal ChestGirth As Global.System.Nullable(Of Decimal),  _
                    ByVal BloodSampleRed As Global.System.Nullable(Of Integer),  _
                    ByVal BloodSamplePurple As Global.System.Nullable(Of Integer),  _
                    ByVal BloodSampleGreen As Global.System.Nullable(Of Integer),  _
                    ByVal AnestheticReversal As String,  _
                    ByVal AnestheticReversalDosage_mg As Global.System.Nullable(Of Decimal),  _
                    ByVal AnestheticReversalConcentration_mg_ml As Global.System.Nullable(Of Integer),  _
                    ByVal AnestheticReversalRoute As String,  _
                    ByVal AnestheticReversalTime As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal SedativeReversal As String,  _
                    ByVal SedativeReversalDosage_mg As Global.System.Nullable(Of Decimal),  _
                    ByVal SedativeReversalConcentration_mg_ml As Global.System.Nullable(Of Integer),  _
                    ByVal SedativeReversalRoute As String,  _
                    ByVal SedativeReversalTime As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal TimeStanding As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal TimeMobile As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal Comments As String,  _
                    ByVal CaptureID As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal ProjectID As String,  _
                    ByVal AnestheticDosage_ml As Global.System.Nullable(Of Decimal),  _
                    ByVal SedativeDosage_ml As Global.System.Nullable(Of Decimal),  _
                    ByVal AnestheticReversalDosage_ml As Global.System.Nullable(Of Decimal),  _
                    ByVal SedativeReversalDosage_ml As Global.System.Nullable(Of Decimal),  _
                    ByVal ProtocolVersion As Decimal,  _
                    ByVal SOPNumber As Integer,  _
                    ByVal SOPVersion As Decimal,  _
                    ByVal CertificationDate As Global.System.Nullable(Of Date),  _
                    ByVal CertifiedBy As String,  _
                    ByVal ProtocolIRMAReference As Global.System.Nullable(Of Integer),  _
                    ByVal CertificationLevel As String,  _
                    ByVal Original_CaptureID As String,  _
                    ByVal Original_TS() As Byte) As Integer
            If (AnimalID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AnimalID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(AnimalID,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CaptureDate,Date)
            If (Crew Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Crew,String)
            End If
            If (Shooter Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Shooter,String)
            End If
            If (Frequency.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Frequency.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (VisualCollar Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(VisualCollar,String)
            End If
            If (SerialNumber.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SerialNumber.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (CaptureLatitude.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(CaptureLatitude.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (CaptureLongitude.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(CaptureLongitude.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (OldFrequency.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(OldFrequency.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (OldVisualCollar Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(OldVisualCollar,String)
            End If
            If (GeneralLocation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(GeneralLocation,String)
            End If
            If (TimeStartChase.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(TimeStartChase.Value,System.TimeSpan)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (TimeFirstHitBounce.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(TimeFirstHitBounce.Value,System.TimeSpan)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (TimeSecordHitBounce.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(TimeSecordHitBounce.Value,System.TimeSpan)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (TimeThirdHitBounce.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(TimeThirdHitBounce.Value,System.TimeSpan)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (TimeVisibleEffect.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(TimeVisibleEffect.Value,System.TimeSpan)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (TimeAnimalDown.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(TimeAnimalDown.Value,System.TimeSpan)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (DartLocation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(DartLocation,String)
            End If
            If (Anesthetic Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Anesthetic,String)
            End If
            If (AnestheticDosage_mg.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(AnestheticDosage_mg.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (AnestheticConcentration_mg_ml.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(AnestheticConcentration_mg_ml.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Sedative Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Sedative,String)
            End If
            If (SedativeDosage_mg.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(SedativeDosage_mg.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (SedativeConcentration_mg_ml.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(SedativeConcentration_mg_ml.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (NumHits.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(NumHits.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (NumMisses.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(NumMisses.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (DrugEffect.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(DrugEffect.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (InitialBodyTemp.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(InitialBodyTemp.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (InitialBodyTempTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(InitialBodyTempTime.Value,System.TimeSpan)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (FinalBodyTemperature.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(FinalBodyTemperature.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (FinalBodyTemperatureTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(FinalBodyTemperatureTime.Value,System.TimeSpan)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (AdditionalDrugs Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(AdditionalDrugs,String)
            End If
            If (Sex Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Sex")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Sex,String)
            End If
            If (EstimatedAge.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(EstimatedAge.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (WithCalf.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(WithCalf.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Lactating.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Lactating.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (BodyCondition Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(BodyCondition,String)
            End If
            If (Weight_Kg.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Weight_Kg.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (BodyLength.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(BodyLength.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (NeckCircumference.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(NeckCircumference.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Jaw.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Jaw.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (MetatarsusLength.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(MetatarsusLength.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (HindfootLength.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(HindfootLength.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (ChestGirth.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(ChestGirth.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (BloodSampleRed.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(BloodSampleRed.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (BloodSamplePurple.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(BloodSamplePurple.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (BloodSampleGreen.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(BloodSampleGreen.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (AnestheticReversal Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(AnestheticReversal,String)
            End If
            If (AnestheticReversalDosage_mg.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(AnestheticReversalDosage_mg.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (AnestheticReversalConcentration_mg_ml.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(AnestheticReversalConcentration_mg_ml.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (AnestheticReversalRoute Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(AnestheticReversalRoute,String)
            End If
            If (AnestheticReversalTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(AnestheticReversalTime.Value,System.TimeSpan)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (SedativeReversal Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(SedativeReversal,String)
            End If
            If (SedativeReversalDosage_mg.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(SedativeReversalDosage_mg.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (SedativeReversalConcentration_mg_ml.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(SedativeReversalConcentration_mg_ml.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (SedativeReversalRoute Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(SedativeReversalRoute,String)
            End If
            If (SedativeReversalTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(SedativeReversalTime.Value,System.TimeSpan)
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (TimeStanding.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(TimeStanding.Value,System.TimeSpan)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (TimeMobile.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(TimeMobile.Value,System.TimeSpan)
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Comments Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Comments,String)
            End If
            If (CaptureID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CaptureID")
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(CaptureID,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(62).Value = CType(RecordInsertedDate,Date)
            If (RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordInsertedBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(RecordInsertedBy,String)
            End If
            If (ProjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ProjectID")
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(ProjectID,String)
            End If
            If (AnestheticDosage_ml.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(AnestheticDosage_ml.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (SedativeDosage_ml.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(SedativeDosage_ml.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            If (AnestheticReversalDosage_ml.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(AnestheticReversalDosage_ml.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (SedativeReversalDosage_ml.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(SedativeReversalDosage_ml.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(69).Value = CType(ProtocolVersion,Decimal)
            Me.Adapter.UpdateCommand.Parameters(70).Value = CType(SOPNumber,Integer)
            Me.Adapter.UpdateCommand.Parameters(71).Value = CType(SOPVersion,Decimal)
            If (CertificationDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(CertificationDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = Global.System.DBNull.Value
            End If
            If (CertifiedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(CertifiedBy,String)
            End If
            If (ProtocolIRMAReference.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(ProtocolIRMAReference.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = Global.System.DBNull.Value
            End If
            If (CertificationLevel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CertificationLevel")
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(CertificationLevel,String)
            End If
            If (Original_CaptureID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CaptureID")
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(Original_CaptureID,String)
            End If
            If (Original_TS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(Original_TS,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal AnimalID As String,  _
                    ByVal CaptureDate As Date,  _
                    ByVal Crew As String,  _
                    ByVal Shooter As String,  _
                    ByVal Frequency As Global.System.Nullable(Of Decimal),  _
                    ByVal VisualCollar As String,  _
                    ByVal SerialNumber As Global.System.Nullable(Of Integer),  _
                    ByVal CaptureLatitude As Global.System.Nullable(Of Decimal),  _
                    ByVal CaptureLongitude As Global.System.Nullable(Of Decimal),  _
                    ByVal OldFrequency As Global.System.Nullable(Of Decimal),  _
                    ByVal OldVisualCollar As String,  _
                    ByVal GeneralLocation As String,  _
                    ByVal TimeStartChase As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal TimeFirstHitBounce As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal TimeSecordHitBounce As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal TimeThirdHitBounce As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal TimeVisibleEffect As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal TimeAnimalDown As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal DartLocation As String,  _
                    ByVal Anesthetic As String,  _
                    ByVal AnestheticDosage_mg As Global.System.Nullable(Of Decimal),  _
                    ByVal AnestheticConcentration_mg_ml As Global.System.Nullable(Of Integer),  _
                    ByVal Sedative As String,  _
                    ByVal SedativeDosage_mg As Global.System.Nullable(Of Decimal),  _
                    ByVal SedativeConcentration_mg_ml As Global.System.Nullable(Of Integer),  _
                    ByVal NumHits As Global.System.Nullable(Of Integer),  _
                    ByVal NumMisses As Global.System.Nullable(Of Integer),  _
                    ByVal DrugEffect As Global.System.Nullable(Of Integer),  _
                    ByVal InitialBodyTemp As Global.System.Nullable(Of Decimal),  _
                    ByVal InitialBodyTempTime As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal FinalBodyTemperature As Global.System.Nullable(Of Decimal),  _
                    ByVal FinalBodyTemperatureTime As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal AdditionalDrugs As String,  _
                    ByVal Sex As String,  _
                    ByVal EstimatedAge As Global.System.Nullable(Of Integer),  _
                    ByVal WithCalf As Global.System.Nullable(Of Integer),  _
                    ByVal Lactating As Global.System.Nullable(Of Integer),  _
                    ByVal BodyCondition As String,  _
                    ByVal Weight_Kg As Global.System.Nullable(Of Decimal),  _
                    ByVal BodyLength As Global.System.Nullable(Of Decimal),  _
                    ByVal NeckCircumference As Global.System.Nullable(Of Decimal),  _
                    ByVal Jaw As Global.System.Nullable(Of Decimal),  _
                    ByVal MetatarsusLength As Global.System.Nullable(Of Decimal),  _
                    ByVal HindfootLength As Global.System.Nullable(Of Decimal),  _
                    ByVal ChestGirth As Global.System.Nullable(Of Decimal),  _
                    ByVal BloodSampleRed As Global.System.Nullable(Of Integer),  _
                    ByVal BloodSamplePurple As Global.System.Nullable(Of Integer),  _
                    ByVal BloodSampleGreen As Global.System.Nullable(Of Integer),  _
                    ByVal AnestheticReversal As String,  _
                    ByVal AnestheticReversalDosage_mg As Global.System.Nullable(Of Decimal),  _
                    ByVal AnestheticReversalConcentration_mg_ml As Global.System.Nullable(Of Integer),  _
                    ByVal AnestheticReversalRoute As String,  _
                    ByVal AnestheticReversalTime As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal SedativeReversal As String,  _
                    ByVal SedativeReversalDosage_mg As Global.System.Nullable(Of Decimal),  _
                    ByVal SedativeReversalConcentration_mg_ml As Global.System.Nullable(Of Integer),  _
                    ByVal SedativeReversalRoute As String,  _
                    ByVal SedativeReversalTime As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal TimeStanding As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal TimeMobile As Global.System.Nullable(Of Global.System.TimeSpan),  _
                    ByVal Comments As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal ProjectID As String,  _
                    ByVal AnestheticDosage_ml As Global.System.Nullable(Of Decimal),  _
                    ByVal SedativeDosage_ml As Global.System.Nullable(Of Decimal),  _
                    ByVal AnestheticReversalDosage_ml As Global.System.Nullable(Of Decimal),  _
                    ByVal SedativeReversalDosage_ml As Global.System.Nullable(Of Decimal),  _
                    ByVal ProtocolVersion As Decimal,  _
                    ByVal SOPNumber As Integer,  _
                    ByVal SOPVersion As Decimal,  _
                    ByVal CertificationDate As Global.System.Nullable(Of Date),  _
                    ByVal CertifiedBy As String,  _
                    ByVal ProtocolIRMAReference As Global.System.Nullable(Of Integer),  _
                    ByVal CertificationLevel As String,  _
                    ByVal Original_CaptureID As String,  _
                    ByVal Original_TS() As Byte) As Integer
            Return Me.Update(AnimalID, CaptureDate, Crew, Shooter, Frequency, VisualCollar, SerialNumber, CaptureLatitude, CaptureLongitude, OldFrequency, OldVisualCollar, GeneralLocation, TimeStartChase, TimeFirstHitBounce, TimeSecordHitBounce, TimeThirdHitBounce, TimeVisibleEffect, TimeAnimalDown, DartLocation, Anesthetic, AnestheticDosage_mg, AnestheticConcentration_mg_ml, Sedative, SedativeDosage_mg, SedativeConcentration_mg_ml, NumHits, NumMisses, DrugEffect, InitialBodyTemp, InitialBodyTempTime, FinalBodyTemperature, FinalBodyTemperatureTime, AdditionalDrugs, Sex, EstimatedAge, WithCalf, Lactating, BodyCondition, Weight_Kg, BodyLength, NeckCircumference, Jaw, MetatarsusLength, HindfootLength, ChestGirth, BloodSampleRed, BloodSamplePurple, BloodSampleGreen, AnestheticReversal, AnestheticReversalDosage_mg, AnestheticReversalConcentration_mg_ml, AnestheticReversalRoute, AnestheticReversalTime, SedativeReversal, SedativeReversalDosage_mg, SedativeReversalConcentration_mg_ml, SedativeReversalRoute, SedativeReversalTime, TimeStanding, TimeMobile, Comments, Original_CaptureID, RecordInsertedDate, RecordInsertedBy, ProjectID, AnestheticDosage_ml, SedativeDosage_ml, AnestheticReversalDosage_ml, SedativeReversalDosage_ml, ProtocolVersion, SOPNumber, SOPVersion, CertificationDate, CertifiedBy, ProtocolIRMAReference, CertificationLevel, Original_CaptureID, Original_TS)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CaribouTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Caribou"
            tableMapping.ColumnMappings.Add("ProjectID", "ProjectID")
            tableMapping.ColumnMappings.Add("AnimalID", "AnimalID")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("CaptureDate", "CaptureDate")
            tableMapping.ColumnMappings.Add("AgeAtCapture", "AgeAtCapture")
            tableMapping.ColumnMappings.Add("MortalityDate", "MortalityDate")
            tableMapping.ColumnMappings.Add("CarcassSeen", "CarcassSeen")
            tableMapping.ColumnMappings.Add("Source", "Source")
            tableMapping.ColumnMappings.Add("Notes", "Notes")
            tableMapping.ColumnMappings.Add("LegacyID", "LegacyID")
            tableMapping.ColumnMappings.Add("OtherID", "OtherID")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("TS", "TS")
            tableMapping.ColumnMappings.Add("Herd", "Herd")
            tableMapping.ColumnMappings.Add("ProtocolVersion", "ProtocolVersion")
            tableMapping.ColumnMappings.Add("SOPNumber", "SOPNumber")
            tableMapping.ColumnMappings.Add("SOPVersion", "SOPVersion")
            tableMapping.ColumnMappings.Add("CertificationDate", "CertificationDate")
            tableMapping.ColumnMappings.Add("CertifiedBy", "CertifiedBy")
            tableMapping.ColumnMappings.Add("ProtocolIRMAReference", "ProtocolIRMAReference")
            tableMapping.ColumnMappings.Add("CertificationLevel", "CertificationLevel")
            tableMapping.ColumnMappings.Add("MortalityLat", "MortalityLat")
            tableMapping.ColumnMappings.Add("MortalityLon", "MortalityLon")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Caribou] WHERE (([ProjectID] = @Original_ProjectID) AND ([Anim"& _ 
                "alID] = @Original_AnimalID) AND ((@IsNull_TS = 1 AND [TS] IS NULL) OR ([TS] = @O"& _ 
                "riginal_TS)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProjectID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AnimalID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnimalID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TS", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Caribou] ([ProjectID], [AnimalID], [Sex], [CaptureDate], [AgeA"& _ 
                "tCapture], [MortalityDate], [CarcassSeen], [Source], [Notes], [LegacyID], [Other"& _ 
                "ID], [RecordInsertedDate], [RecordInsertedBy], [Herd], [ProtocolVersion], [SOPNu"& _ 
                "mber], [SOPVersion], [CertificationDate], [CertifiedBy], [ProtocolIRMAReference]"& _ 
                ", [CertificationLevel], [MortalityLat], [MortalityLon]) VALUES (@ProjectID, @Ani"& _ 
                "malID, @Sex, @CaptureDate, @AgeAtCapture, @MortalityDate, @CarcassSeen, @Source,"& _ 
                " @Notes, @LegacyID, @OtherID, @RecordInsertedDate, @RecordInsertedBy, @Herd, @Pr"& _ 
                "otocolVersion, @SOPNumber, @SOPVersion, @CertificationDate, @CertifiedBy, @Proto"& _ 
                "colIRMAReference, @CertificationLevel, @MortalityLat, @MortalityLon);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Pr"& _ 
                "ojectID, AnimalID, Sex, CaptureDate, AgeAtCapture, MortalityDate, CarcassSeen, S"& _ 
                "ource, Notes, LegacyID, OtherID, RecordInsertedDate, RecordInsertedBy, TS, Herd,"& _ 
                " ProtocolVersion, SOPNumber, SOPVersion, CertificationDate, CertifiedBy, Protoco"& _ 
                "lIRMAReference, CertificationLevel, MortalityLat, MortalityLon FROM Caribou WHER"& _ 
                "E (AnimalID = @AnimalID) AND (ProjectID = @ProjectID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProjectID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnimalID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnimalID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sex", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sex", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CaptureDate", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CaptureDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AgeAtCapture", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AgeAtCapture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MortalityDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MortalityDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CarcassSeen", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CarcassSeen", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Source", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Notes", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LegacyID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LegacyID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OtherID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OtherID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Herd", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Herd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProtocolVersion", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "ProtocolVersion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOPNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOPNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOPVersion", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "SOPVersion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CertificationDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CertificationDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CertifiedBy", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CertifiedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProtocolIRMAReference", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProtocolIRMAReference", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CertificationLevel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CertificationLevel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MortalityLat", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 13, 9, "MortalityLat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MortalityLon", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 13, 9, "MortalityLon", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Caribou] SET [ProjectID] = @ProjectID, [AnimalID] = @AnimalID, [Sex"& _ 
                "] = @Sex, [CaptureDate] = @CaptureDate, [AgeAtCapture] = @AgeAtCapture, [Mortali"& _ 
                "tyDate] = @MortalityDate, [CarcassSeen] = @CarcassSeen, [Source] = @Source, [Not"& _ 
                "es] = @Notes, [LegacyID] = @LegacyID, [OtherID] = @OtherID, [RecordInsertedDate]"& _ 
                " = @RecordInsertedDate, [RecordInsertedBy] = @RecordInsertedBy, [Herd] = @Herd, "& _ 
                "[ProtocolVersion] = @ProtocolVersion, [SOPNumber] = @SOPNumber, [SOPVersion] = @"& _ 
                "SOPVersion, [CertificationDate] = @CertificationDate, [CertifiedBy] = @Certified"& _ 
                "By, [ProtocolIRMAReference] = @ProtocolIRMAReference, [CertificationLevel] = @Ce"& _ 
                "rtificationLevel, [MortalityLat] = @MortalityLat, [MortalityLon] = @MortalityLon"& _ 
                " WHERE (([ProjectID] = @Original_ProjectID) AND ([AnimalID] = @Original_AnimalID"& _ 
                ") AND ((@IsNull_TS = 1 AND [TS] IS NULL) OR ([TS] = @Original_TS)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Pro"& _ 
                "jectID, AnimalID, Sex, CaptureDate, AgeAtCapture, MortalityDate, CarcassSeen, So"& _ 
                "urce, Notes, LegacyID, OtherID, RecordInsertedDate, RecordInsertedBy, TS, Herd, "& _ 
                "ProtocolVersion, SOPNumber, SOPVersion, CertificationDate, CertifiedBy, Protocol"& _ 
                "IRMAReference, CertificationLevel, MortalityLat, MortalityLon FROM Caribou WHERE"& _ 
                " (AnimalID = @AnimalID) AND (ProjectID = @ProjectID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProjectID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnimalID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnimalID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sex", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sex", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CaptureDate", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CaptureDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AgeAtCapture", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AgeAtCapture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MortalityDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MortalityDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CarcassSeen", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CarcassSeen", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Source", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Notes", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LegacyID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LegacyID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OtherID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OtherID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Herd", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Herd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProtocolVersion", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "ProtocolVersion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOPNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOPNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOPVersion", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 2, "SOPVersion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CertificationDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CertificationDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CertifiedBy", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CertifiedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProtocolIRMAReference", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProtocolIRMAReference", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CertificationLevel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CertificationLevel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MortalityLat", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 13, 9, "MortalityLat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MortalityLon", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 13, 9, "MortalityLon", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProjectID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AnimalID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnimalID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TS", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WRST_Caribou.My.MySettings.Default.WRST_CaribouConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ProjectID, AnimalID, Sex, CaptureDate, AgeAtCapture, MortalityDate, Carcas"& _ 
                "sSeen, Source, Notes, LegacyID, OtherID, RecordInsertedDate, RecordInsertedBy, T"& _ 
                "S, Herd, ProtocolVersion, SOPNumber, SOPVersion, CertificationDate, CertifiedBy,"& _ 
                " ProtocolIRMAReference, CertificationLevel, MortalityLat, MortalityLon FROM dbo."& _ 
                "Caribou"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As WRST_CaribouDataSet.CaribouDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As WRST_CaribouDataSet.CaribouDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As WRST_CaribouDataSet.CaribouDataTable = New WRST_CaribouDataSet.CaribouDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As WRST_CaribouDataSet.CaribouDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As WRST_CaribouDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Caribou")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ProjectID As String, ByVal Original_AnimalID As String, ByVal Original_TS() As Byte) As Integer
            If (Original_ProjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ProjectID")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ProjectID,String)
            End If
            If (Original_AnimalID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AnimalID")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_AnimalID,String)
            End If
            If (Original_TS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_TS,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ProjectID As String,  _
                    ByVal AnimalID As String,  _
                    ByVal Sex As String,  _
                    ByVal CaptureDate As Global.System.Nullable(Of Date),  _
                    ByVal AgeAtCapture As Global.System.Nullable(Of Integer),  _
                    ByVal MortalityDate As Global.System.Nullable(Of Date),  _
                    ByVal CarcassSeen As Global.System.Nullable(Of Integer),  _
                    ByVal Source As String,  _
                    ByVal Notes As String,  _
                    ByVal LegacyID As String,  _
                    ByVal OtherID As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal Herd As String,  _
                    ByVal ProtocolVersion As Decimal,  _
                    ByVal SOPNumber As Integer,  _
                    ByVal SOPVersion As Decimal,  _
                    ByVal CertificationDate As Global.System.Nullable(Of Date),  _
                    ByVal CertifiedBy As String,  _
                    ByVal ProtocolIRMAReference As Global.System.Nullable(Of Integer),  _
                    ByVal CertificationLevel As String,  _
                    ByVal MortalityLat As Global.System.Nullable(Of Decimal),  _
                    ByVal MortalityLon As Global.System.Nullable(Of Decimal)) As Integer
            If (ProjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ProjectID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ProjectID,String)
            End If
            If (AnimalID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AnimalID")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(AnimalID,String)
            End If
            If (Sex Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Sex,String)
            End If
            If (CaptureDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CaptureDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (AgeAtCapture.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(AgeAtCapture.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (MortalityDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(MortalityDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (CarcassSeen.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(CarcassSeen.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Source Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Source,String)
            End If
            If (Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Notes,String)
            End If
            If (LegacyID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(LegacyID,String)
            End If
            If (OtherID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(OtherID,String)
            End If
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(RecordInsertedDate,Date)
            If (RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordInsertedBy")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(RecordInsertedBy,String)
            End If
            If (Herd Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Herd,String)
            End If
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(ProtocolVersion,Decimal)
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(SOPNumber,Integer)
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(SOPVersion,Decimal)
            If (CertificationDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(CertificationDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (CertifiedBy Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(CertifiedBy,String)
            End If
            If (ProtocolIRMAReference.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(ProtocolIRMAReference.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (CertificationLevel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CertificationLevel")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(CertificationLevel,String)
            End If
            If (MortalityLat.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(MortalityLat.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (MortalityLon.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(MortalityLon.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ProjectID As String,  _
                    ByVal AnimalID As String,  _
                    ByVal Sex As String,  _
                    ByVal CaptureDate As Global.System.Nullable(Of Date),  _
                    ByVal AgeAtCapture As Global.System.Nullable(Of Integer),  _
                    ByVal MortalityDate As Global.System.Nullable(Of Date),  _
                    ByVal CarcassSeen As Global.System.Nullable(Of Integer),  _
                    ByVal Source As String,  _
                    ByVal Notes As String,  _
                    ByVal LegacyID As String,  _
                    ByVal OtherID As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal Herd As String,  _
                    ByVal ProtocolVersion As Decimal,  _
                    ByVal SOPNumber As Integer,  _
                    ByVal SOPVersion As Decimal,  _
                    ByVal CertificationDate As Global.System.Nullable(Of Date),  _
                    ByVal CertifiedBy As String,  _
                    ByVal ProtocolIRMAReference As Global.System.Nullable(Of Integer),  _
                    ByVal CertificationLevel As String,  _
                    ByVal MortalityLat As Global.System.Nullable(Of Decimal),  _
                    ByVal MortalityLon As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ProjectID As String,  _
                    ByVal Original_AnimalID As String,  _
                    ByVal Original_TS() As Byte) As Integer
            If (ProjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ProjectID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ProjectID,String)
            End If
            If (AnimalID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AnimalID")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(AnimalID,String)
            End If
            If (Sex Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Sex,String)
            End If
            If (CaptureDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CaptureDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (AgeAtCapture.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(AgeAtCapture.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (MortalityDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MortalityDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (CarcassSeen.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(CarcassSeen.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Source Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Source,String)
            End If
            If (Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Notes,String)
            End If
            If (LegacyID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(LegacyID,String)
            End If
            If (OtherID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(OtherID,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(RecordInsertedDate,Date)
            If (RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordInsertedBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(RecordInsertedBy,String)
            End If
            If (Herd Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Herd,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(ProtocolVersion,Decimal)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(SOPNumber,Integer)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(SOPVersion,Decimal)
            If (CertificationDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(CertificationDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (CertifiedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(CertifiedBy,String)
            End If
            If (ProtocolIRMAReference.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(ProtocolIRMAReference.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (CertificationLevel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CertificationLevel")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(CertificationLevel,String)
            End If
            If (MortalityLat.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(MortalityLat.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (MortalityLon.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(MortalityLon.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_ProjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ProjectID")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_ProjectID,String)
            End If
            If (Original_AnimalID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AnimalID")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_AnimalID,String)
            End If
            If (Original_TS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_TS,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Sex As String,  _
                    ByVal CaptureDate As Global.System.Nullable(Of Date),  _
                    ByVal AgeAtCapture As Global.System.Nullable(Of Integer),  _
                    ByVal MortalityDate As Global.System.Nullable(Of Date),  _
                    ByVal CarcassSeen As Global.System.Nullable(Of Integer),  _
                    ByVal Source As String,  _
                    ByVal Notes As String,  _
                    ByVal LegacyID As String,  _
                    ByVal OtherID As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal Herd As String,  _
                    ByVal ProtocolVersion As Decimal,  _
                    ByVal SOPNumber As Integer,  _
                    ByVal SOPVersion As Decimal,  _
                    ByVal CertificationDate As Global.System.Nullable(Of Date),  _
                    ByVal CertifiedBy As String,  _
                    ByVal ProtocolIRMAReference As Global.System.Nullable(Of Integer),  _
                    ByVal CertificationLevel As String,  _
                    ByVal MortalityLat As Global.System.Nullable(Of Decimal),  _
                    ByVal MortalityLon As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ProjectID As String,  _
                    ByVal Original_AnimalID As String,  _
                    ByVal Original_TS() As Byte) As Integer
            Return Me.Update(Original_ProjectID, Original_AnimalID, Sex, CaptureDate, AgeAtCapture, MortalityDate, CarcassSeen, Source, Notes, LegacyID, OtherID, RecordInsertedDate, RecordInsertedBy, Herd, ProtocolVersion, SOPNumber, SOPVersion, CertificationDate, CertifiedBy, ProtocolIRMAReference, CertificationLevel, MortalityLat, MortalityLon, Original_ProjectID, Original_AnimalID, Original_TS)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CompositionCountsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CompositionCounts"
            tableMapping.ColumnMappings.Add("SightingDate", "SightingDate")
            tableMapping.ColumnMappings.Add("Herd", "Herd")
            tableMapping.ColumnMappings.Add("GroupNumber", "GroupNumber")
            tableMapping.ColumnMappings.Add("SearchArea", "SearchArea")
            tableMapping.ColumnMappings.Add("SmallBull", "SmallBull")
            tableMapping.ColumnMappings.Add("MediumBull", "MediumBull")
            tableMapping.ColumnMappings.Add("LargeBull", "LargeBull")
            tableMapping.ColumnMappings.Add("Cow", "Cow")
            tableMapping.ColumnMappings.Add("Calf", "Calf")
            tableMapping.ColumnMappings.Add("Indeterminate", "Indeterminate")
            tableMapping.ColumnMappings.Add("Waypoint", "Waypoint")
            tableMapping.ColumnMappings.Add("Frequencies", "Frequencies")
            tableMapping.ColumnMappings.Add("FlightID", "FlightID")
            tableMapping.ColumnMappings.Add("CCID", "CCID")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("TS", "TS")
            tableMapping.ColumnMappings.Add("SourceFilename", "SourceFilename")
            tableMapping.ColumnMappings.Add("Comment", "Comment")
            tableMapping.ColumnMappings.Add("Lat", "Lat")
            tableMapping.ColumnMappings.Add("Lon", "Lon")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CompositionCounts] WHERE (([CCID] = @Original_CCID) AND ((@IsN"& _ 
                "ull_TS = 1 AND [TS] IS NULL) OR ([TS] = @Original_TS)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CCID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TS", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CompositionCounts] ([SightingDate], [Herd], [GroupNumber], [Se"& _ 
                "archArea], [SmallBull], [MediumBull], [LargeBull], [Cow], [Calf], [Indeterminate"& _ 
                "], [Waypoint], [Frequencies], [FlightID], [CCID], [RecordInsertedDate], [RecordI"& _ 
                "nsertedBy], [SourceFilename], [Comment], [Lat], [Lon]) VALUES (@SightingDate, @H"& _ 
                "erd, @GroupNumber, @SearchArea, @SmallBull, @MediumBull, @LargeBull, @Cow, @Calf"& _ 
                ", @Indeterminate, @Waypoint, @Frequencies, @FlightID, @CCID, @RecordInsertedDate"& _ 
                ", @RecordInsertedBy, @SourceFilename, @Comment, @Lat, @Lon);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SightingDat"& _ 
                "e, Herd, GroupNumber, SearchArea, SmallBull, MediumBull, LargeBull, Cow, Calf, I"& _ 
                "ndeterminate, Waypoint, Frequencies, FlightID, CCID, RecordInsertedDate, RecordI"& _ 
                "nsertedBy, TS, SourceFilename, Comment, Lat, Lon FROM CompositionCounts WHERE (C"& _ 
                "CID = @CCID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SightingDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SightingDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Herd", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Herd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GroupNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GroupNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SearchArea", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SearchArea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SmallBull", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SmallBull", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MediumBull", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MediumBull", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LargeBull", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LargeBull", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cow", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cow", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Calf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Calf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Indeterminate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Indeterminate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Waypoint", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Waypoint", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Frequencies", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Frequencies", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FlightID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FlightID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CCID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SourceFilename", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SourceFilename", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Comment", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Comment", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lat", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 13, 9, "Lat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lon", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 13, 9, "Lon", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[CompositionCounts] SET [SightingDate] = @SightingDate, [Herd] = @He"& _ 
                "rd, [GroupNumber] = @GroupNumber, [SearchArea] = @SearchArea, [SmallBull] = @Sma"& _ 
                "llBull, [MediumBull] = @MediumBull, [LargeBull] = @LargeBull, [Cow] = @Cow, [Cal"& _ 
                "f] = @Calf, [Indeterminate] = @Indeterminate, [Waypoint] = @Waypoint, [Frequenci"& _ 
                "es] = @Frequencies, [FlightID] = @FlightID, [CCID] = @CCID, [RecordInsertedDate]"& _ 
                " = @RecordInsertedDate, [RecordInsertedBy] = @RecordInsertedBy, [SourceFilename]"& _ 
                " = @SourceFilename, [Comment] = @Comment, [Lat] = @Lat, [Lon] = @Lon WHERE (([CC"& _ 
                "ID] = @Original_CCID) AND ((@IsNull_TS = 1 AND [TS] IS NULL) OR ([TS] = @Origina"& _ 
                "l_TS)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SightingDate, Herd, GroupNumber, SearchArea, SmallBull, MediumB"& _ 
                "ull, LargeBull, Cow, Calf, Indeterminate, Waypoint, Frequencies, FlightID, CCID,"& _ 
                " RecordInsertedDate, RecordInsertedBy, TS, SourceFilename, Comment, Lat, Lon FRO"& _ 
                "M CompositionCounts WHERE (CCID = @CCID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SightingDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SightingDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Herd", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Herd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GroupNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GroupNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SearchArea", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SearchArea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SmallBull", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SmallBull", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MediumBull", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MediumBull", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LargeBull", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LargeBull", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cow", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cow", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Calf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Calf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Indeterminate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Indeterminate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Waypoint", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Waypoint", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Frequencies", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Frequencies", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FlightID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FlightID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CCID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SourceFilename", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SourceFilename", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Comment", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Comment", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lat", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 13, 9, "Lat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lon", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 13, 9, "Lon", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CCID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TS", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WRST_Caribou.My.MySettings.Default.WRST_CaribouConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SightingDate, Herd, GroupNumber, SearchArea, SmallBull, MediumBull, LargeB"& _ 
                "ull, Cow, Calf, Indeterminate, Waypoint, Frequencies, FlightID, CCID, RecordInse"& _ 
                "rtedDate, RecordInsertedBy, TS, SourceFilename, Comment, Lat, Lon FROM dbo.Compo"& _ 
                "sitionCounts"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As WRST_CaribouDataSet.CompositionCountsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As WRST_CaribouDataSet.CompositionCountsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As WRST_CaribouDataSet.CompositionCountsDataTable = New WRST_CaribouDataSet.CompositionCountsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As WRST_CaribouDataSet.CompositionCountsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As WRST_CaribouDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CompositionCounts")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CCID As String, ByVal Original_TS() As Byte) As Integer
            If (Original_CCID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CCID")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CCID,String)
            End If
            If (Original_TS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_TS,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal SightingDate As Date,  _
                    ByVal Herd As String,  _
                    ByVal GroupNumber As Integer,  _
                    ByVal SearchArea As String,  _
                    ByVal SmallBull As Integer,  _
                    ByVal MediumBull As Integer,  _
                    ByVal LargeBull As Integer,  _
                    ByVal Cow As Integer,  _
                    ByVal Calf As Integer,  _
                    ByVal Indeterminate As Integer,  _
                    ByVal Waypoint As String,  _
                    ByVal Frequencies As String,  _
                    ByVal FlightID As String,  _
                    ByVal CCID As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal SourceFilename As String,  _
                    ByVal Comment As String,  _
                    ByVal Lat As Decimal,  _
                    ByVal Lon As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SightingDate,Date)
            If (Herd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Herd")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Herd,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(GroupNumber,Integer)
            If (SearchArea Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SearchArea")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SearchArea,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(SmallBull,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(MediumBull,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(LargeBull,Integer)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(Cow,Integer)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(Calf,Integer)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(Indeterminate,Integer)
            If (Waypoint Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Waypoint")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Waypoint,String)
            End If
            If (Frequencies Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Frequencies,String)
            End If
            If (FlightID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FlightID")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(FlightID,String)
            End If
            If (CCID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CCID")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(CCID,String)
            End If
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(RecordInsertedDate,Date)
            If (RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordInsertedBy")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(RecordInsertedBy,String)
            End If
            If (SourceFilename Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(SourceFilename,String)
            End If
            If (Comment Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Comment,String)
            End If
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(Lat,Decimal)
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(Lon,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SightingDate As Date,  _
                    ByVal Herd As String,  _
                    ByVal GroupNumber As Integer,  _
                    ByVal SearchArea As String,  _
                    ByVal SmallBull As Integer,  _
                    ByVal MediumBull As Integer,  _
                    ByVal LargeBull As Integer,  _
                    ByVal Cow As Integer,  _
                    ByVal Calf As Integer,  _
                    ByVal Indeterminate As Integer,  _
                    ByVal Waypoint As String,  _
                    ByVal Frequencies As String,  _
                    ByVal FlightID As String,  _
                    ByVal CCID As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal SourceFilename As String,  _
                    ByVal Comment As String,  _
                    ByVal Lat As Decimal,  _
                    ByVal Lon As Decimal,  _
                    ByVal Original_CCID As String,  _
                    ByVal Original_TS() As Byte) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SightingDate,Date)
            If (Herd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Herd")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Herd,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(GroupNumber,Integer)
            If (SearchArea Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SearchArea")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SearchArea,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SmallBull,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MediumBull,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(LargeBull,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Cow,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Calf,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Indeterminate,Integer)
            If (Waypoint Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Waypoint")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Waypoint,String)
            End If
            If (Frequencies Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Frequencies,String)
            End If
            If (FlightID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FlightID")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(FlightID,String)
            End If
            If (CCID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CCID")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(CCID,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(RecordInsertedDate,Date)
            If (RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordInsertedBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(RecordInsertedBy,String)
            End If
            If (SourceFilename Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(SourceFilename,String)
            End If
            If (Comment Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Comment,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Lat,Decimal)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Lon,Decimal)
            If (Original_CCID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CCID")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_CCID,String)
            End If
            If (Original_TS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_TS,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SightingDate As Date,  _
                    ByVal Herd As String,  _
                    ByVal GroupNumber As Integer,  _
                    ByVal SearchArea As String,  _
                    ByVal SmallBull As Integer,  _
                    ByVal MediumBull As Integer,  _
                    ByVal LargeBull As Integer,  _
                    ByVal Cow As Integer,  _
                    ByVal Calf As Integer,  _
                    ByVal Indeterminate As Integer,  _
                    ByVal Waypoint As String,  _
                    ByVal Frequencies As String,  _
                    ByVal FlightID As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal SourceFilename As String,  _
                    ByVal Comment As String,  _
                    ByVal Lat As Decimal,  _
                    ByVal Lon As Decimal,  _
                    ByVal Original_CCID As String,  _
                    ByVal Original_TS() As Byte) As Integer
            Return Me.Update(SightingDate, Herd, GroupNumber, SearchArea, SmallBull, MediumBull, LargeBull, Cow, Calf, Indeterminate, Waypoint, Frequencies, FlightID, Original_CCID, RecordInsertedDate, RecordInsertedBy, SourceFilename, Comment, Lat, Lon, Original_CCID, Original_TS)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PopulationEstimateTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PopulationEstimate"
            tableMapping.ColumnMappings.Add("Herd", "Herd")
            tableMapping.ColumnMappings.Add("SearchArea", "SearchArea")
            tableMapping.ColumnMappings.Add("GroupNumber", "GroupNumber")
            tableMapping.ColumnMappings.Add("WaypointName", "WaypointName")
            tableMapping.ColumnMappings.Add("SightingDate", "SightingDate")
            tableMapping.ColumnMappings.Add("SmallBull", "SmallBull")
            tableMapping.ColumnMappings.Add("MediumBull", "MediumBull")
            tableMapping.ColumnMappings.Add("LargeBull", "LargeBull")
            tableMapping.ColumnMappings.Add("Cow", "Cow")
            tableMapping.ColumnMappings.Add("Calf", "Calf")
            tableMapping.ColumnMappings.Add("InOrOut", "InOrOut")
            tableMapping.ColumnMappings.Add("Seen", "Seen")
            tableMapping.ColumnMappings.Add("Marked", "Marked")
            tableMapping.ColumnMappings.Add("FrequenciesInGroup", "FrequenciesInGroup")
            tableMapping.ColumnMappings.Add("Lat", "Lat")
            tableMapping.ColumnMappings.Add("Lon", "Lon")
            tableMapping.ColumnMappings.Add("Comment", "Comment")
            tableMapping.ColumnMappings.Add("SourceFilename", "SourceFilename")
            tableMapping.ColumnMappings.Add("FlightID", "FlightID")
            tableMapping.ColumnMappings.Add("EID", "EID")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("TS", "TS")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[PopulationEstimate] WHERE (([EID] = @Original_EID) AND ((@IsNu"& _ 
                "ll_TS = 1 AND [TS] IS NULL) OR ([TS] = @Original_TS)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TS", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO PopulationEstimate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  (Herd, SearchArea, GroupNumber,"& _ 
                " WaypointName, SightingDate, SmallBull, MediumBull, LargeBull, Cow, Calf, InOrOu"& _ 
                "t, Seen, Marked, FrequenciesInGroup, Lat, Lon, Comment, SourceFilename, FlightID"& _ 
                ", EID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  RecordInsertedDate, RecordInsertedBy)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES (@Herd,"& _ 
                "@SearchArea,@GroupNumber,@WaypointName,@SightingDate,@SmallBull,@MediumBull,@Lar"& _ 
                "geBull,@Cow,@Calf,@InOrOut,@Seen,@Marked,@FrequenciesInGroup,@Lat,@Lon,@Comment,"& _ 
                "@SourceFilename,@FlightID,@EID,@RecordInsertedDate,@RecordInsertedBy); "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT "& _ 
                "Herd, SearchArea, GroupNumber, WaypointName, SightingDate, SmallBull, MediumBull"& _ 
                ", LargeBull, Cow, Calf, InOrOut, Seen, Marked, FrequenciesInGroup, Lat, Lon, Com"& _ 
                "ment, SourceFilename, FlightID, EID, RecordInsertedDate, RecordInsertedBy, TS FR"& _ 
                "OM PopulationEstimate WHERE (EID = @EID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Herd", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Herd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SearchArea", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "SearchArea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GroupNumber", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "GroupNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WaypointName", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "WaypointName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SightingDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "SightingDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SmallBull", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SmallBull", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MediumBull", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "MediumBull", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LargeBull", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "LargeBull", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cow", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Cow", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Calf", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Calf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InOrOut", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "InOrOut", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Seen", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Seen", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Marked", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Marked", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FrequenciesInGroup", Global.System.Data.SqlDbType.VarChar, 100, Global.System.Data.ParameterDirection.Input, 0, 0, "FrequenciesInGroup", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lat", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 13, 9, "Lat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lon", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 13, 9, "Lon", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Comment", Global.System.Data.SqlDbType.VarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "Comment", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SourceFilename", Global.System.Data.SqlDbType.VarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "SourceFilename", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FlightID", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "FlightID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EID", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "EID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE PopulationEstimate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET          Herd = @Herd, SearchArea = @SearchArea, G"& _ 
                "roupNumber = @GroupNumber, WaypointName = @WaypointName, SightingDate = @Sightin"& _ 
                "gDate, SmallBull = @SmallBull, MediumBull = @MediumBull, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  Lar"& _ 
                "geBull = @LargeBull, Cow = @Cow, Calf = @Calf, InOrOut = @InOrOut, Seen = @Seen,"& _ 
                " Marked = @Marked, FrequenciesInGroup = @FrequenciesInGroup, Lat = @Lat, Lon = @"& _ 
                "Lon, Comment = @Comment, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  SourceFilename = @SourceFilename, F"& _ 
                "lightID = @FlightID, EID = @EID, RecordInsertedDate = @RecordInsertedDate, Recor"& _ 
                "dInsertedBy = @RecordInsertedBy"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (EID = @Original_EID); "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Herd, Se"& _ 
                "archArea, GroupNumber, WaypointName, SightingDate, SmallBull, MediumBull, LargeB"& _ 
                "ull, Cow, Calf, InOrOut, Seen, Marked, FrequenciesInGroup, Lat, Lon, Comment, So"& _ 
                "urceFilename, FlightID, EID, RecordInsertedDate, RecordInsertedBy, TS FROM Popul"& _ 
                "ationEstimate WHERE (EID = @EID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Herd", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Herd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SearchArea", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "SearchArea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GroupNumber", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "GroupNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WaypointName", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "WaypointName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SightingDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "SightingDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SmallBull", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SmallBull", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MediumBull", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "MediumBull", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LargeBull", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "LargeBull", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cow", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Cow", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Calf", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Calf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InOrOut", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "InOrOut", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Seen", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Seen", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Marked", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Marked", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FrequenciesInGroup", Global.System.Data.SqlDbType.VarChar, 100, Global.System.Data.ParameterDirection.Input, 0, 0, "FrequenciesInGroup", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lat", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 13, 9, "Lat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lon", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 13, 9, "Lon", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Comment", Global.System.Data.SqlDbType.VarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "Comment", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SourceFilename", Global.System.Data.SqlDbType.VarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "SourceFilename", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FlightID", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "FlightID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EID", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "EID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EID", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "EID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WRST_Caribou.My.MySettings.Default.WRST_CaribouConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Herd, SearchArea, GroupNumber, WaypointName, SightingDate, SmallBull, Medi"& _ 
                "umBull, LargeBull, Cow, Calf, InOrOut, Seen, Marked, FrequenciesInGroup, Lat, Lo"& _ 
                "n, Comment, SourceFilename, FlightID, EID, RecordInsertedDate, RecordInsertedBy,"& _ 
                " TS FROM dbo.PopulationEstimate"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As WRST_CaribouDataSet.PopulationEstimateDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As WRST_CaribouDataSet.PopulationEstimateDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As WRST_CaribouDataSet.PopulationEstimateDataTable = New WRST_CaribouDataSet.PopulationEstimateDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As WRST_CaribouDataSet.PopulationEstimateDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As WRST_CaribouDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "PopulationEstimate")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_EID As String, ByVal Original_TS() As Byte) As Integer
            If (Original_EID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_EID")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_EID,String)
            End If
            If (Original_TS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_TS,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Herd As String,  _
                    ByVal SearchArea As String,  _
                    ByVal GroupNumber As Integer,  _
                    ByVal WaypointName As String,  _
                    ByVal SightingDate As Date,  _
                    ByVal SmallBull As Integer,  _
                    ByVal MediumBull As Integer,  _
                    ByVal LargeBull As Integer,  _
                    ByVal Cow As Integer,  _
                    ByVal Calf As Integer,  _
                    ByVal InOrOut As Global.System.Nullable(Of Integer),  _
                    ByVal Seen As Integer,  _
                    ByVal Marked As Integer,  _
                    ByVal FrequenciesInGroup As String,  _
                    ByVal Lat As Decimal,  _
                    ByVal Lon As Decimal,  _
                    ByVal Comment As String,  _
                    ByVal SourceFilename As String,  _
                    ByVal FlightID As String,  _
                    ByVal EID As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String) As Integer
            If (Herd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Herd")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Herd,String)
            End If
            If (SearchArea Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SearchArea")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SearchArea,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(GroupNumber,Integer)
            If (WaypointName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("WaypointName")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(WaypointName,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(SightingDate,Date)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(SmallBull,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(MediumBull,Integer)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(LargeBull,Integer)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(Cow,Integer)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(Calf,Integer)
            If (InOrOut.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(InOrOut.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(Seen,Integer)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(Marked,Integer)
            If (FrequenciesInGroup Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(FrequenciesInGroup,String)
            End If
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(Lat,Decimal)
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(Lon,Decimal)
            If (Comment Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Comment,String)
            End If
            If (SourceFilename Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(SourceFilename,String)
            End If
            If (FlightID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FlightID")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(FlightID,String)
            End If
            If (EID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("EID")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(EID,String)
            End If
            Me.Adapter.InsertCommand.Parameters(20).Value = CType(RecordInsertedDate,Date)
            If (RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordInsertedBy")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(RecordInsertedBy,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Herd As String,  _
                    ByVal SearchArea As String,  _
                    ByVal GroupNumber As Integer,  _
                    ByVal WaypointName As String,  _
                    ByVal SightingDate As Date,  _
                    ByVal SmallBull As Integer,  _
                    ByVal MediumBull As Integer,  _
                    ByVal LargeBull As Integer,  _
                    ByVal Cow As Integer,  _
                    ByVal Calf As Integer,  _
                    ByVal InOrOut As Global.System.Nullable(Of Integer),  _
                    ByVal Seen As Integer,  _
                    ByVal Marked As Integer,  _
                    ByVal FrequenciesInGroup As String,  _
                    ByVal Lat As Decimal,  _
                    ByVal Lon As Decimal,  _
                    ByVal Comment As String,  _
                    ByVal SourceFilename As String,  _
                    ByVal FlightID As String,  _
                    ByVal EID As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal Original_EID As String) As Integer
            If (Herd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Herd")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Herd,String)
            End If
            If (SearchArea Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SearchArea")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SearchArea,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(GroupNumber,Integer)
            If (WaypointName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("WaypointName")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(WaypointName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SightingDate,Date)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(SmallBull,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(MediumBull,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(LargeBull,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Cow,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Calf,Integer)
            If (InOrOut.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(InOrOut.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Seen,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Marked,Integer)
            If (FrequenciesInGroup Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(FrequenciesInGroup,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Lat,Decimal)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Lon,Decimal)
            If (Comment Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Comment,String)
            End If
            If (SourceFilename Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(SourceFilename,String)
            End If
            If (FlightID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FlightID")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(FlightID,String)
            End If
            If (EID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("EID")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(EID,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(RecordInsertedDate,Date)
            If (RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordInsertedBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(RecordInsertedBy,String)
            End If
            If (Original_EID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_EID")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_EID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Herd As String,  _
                    ByVal SearchArea As String,  _
                    ByVal GroupNumber As Integer,  _
                    ByVal WaypointName As String,  _
                    ByVal SightingDate As Date,  _
                    ByVal SmallBull As Integer,  _
                    ByVal MediumBull As Integer,  _
                    ByVal LargeBull As Integer,  _
                    ByVal Cow As Integer,  _
                    ByVal Calf As Integer,  _
                    ByVal InOrOut As Global.System.Nullable(Of Integer),  _
                    ByVal Seen As Integer,  _
                    ByVal Marked As Integer,  _
                    ByVal FrequenciesInGroup As String,  _
                    ByVal Lat As Decimal,  _
                    ByVal Lon As Decimal,  _
                    ByVal Comment As String,  _
                    ByVal SourceFilename As String,  _
                    ByVal FlightID As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal Original_EID As String) As Integer
            Return Me.Update(Herd, SearchArea, GroupNumber, WaypointName, SightingDate, SmallBull, MediumBull, LargeBull, Cow, Calf, InOrOut, Seen, Marked, FrequenciesInGroup, Lat, Lon, Comment, SourceFilename, FlightID, Original_EID, RecordInsertedDate, RecordInsertedBy, Original_EID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RadioTrackingTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RadioTracking"
            tableMapping.ColumnMappings.Add("Herd", "Herd")
            tableMapping.ColumnMappings.Add("GroupNumber", "GroupNumber")
            tableMapping.ColumnMappings.Add("Frequency", "Frequency")
            tableMapping.ColumnMappings.Add("VisualCollar", "VisualCollar")
            tableMapping.ColumnMappings.Add("SightingDate", "SightingDate")
            tableMapping.ColumnMappings.Add("Mode", "Mode")
            tableMapping.ColumnMappings.Add("Accuracy", "Accuracy")
            tableMapping.ColumnMappings.Add("Bull", "Bull")
            tableMapping.ColumnMappings.Add("Cow", "Cow")
            tableMapping.ColumnMappings.Add("Calf", "Calf")
            tableMapping.ColumnMappings.Add("Adult", "Adult")
            tableMapping.ColumnMappings.Add("Unknown", "Unknown")
            tableMapping.ColumnMappings.Add("Waypoint", "Waypoint")
            tableMapping.ColumnMappings.Add("RetainedAntler", "RetainedAntler")
            tableMapping.ColumnMappings.Add("DistendedUdders", "DistendedUdders")
            tableMapping.ColumnMappings.Add("CalvesAtHeel", "CalvesAtHeel")
            tableMapping.ColumnMappings.Add("Seen", "Seen")
            tableMapping.ColumnMappings.Add("FlightID", "FlightID")
            tableMapping.ColumnMappings.Add("AnimalID", "AnimalID")
            tableMapping.ColumnMappings.Add("ProjectID", "ProjectID")
            tableMapping.ColumnMappings.Add("RTID", "RTID")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("SearchArea", "SearchArea")
            tableMapping.ColumnMappings.Add("TS", "TS")
            tableMapping.ColumnMappings.Add("SourceFilename", "SourceFilename")
            tableMapping.ColumnMappings.Add("Comment", "Comment")
            tableMapping.ColumnMappings.Add("Lat", "Lat")
            tableMapping.ColumnMappings.Add("Lon", "Lon")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[RadioTracking] WHERE (([RTID] = @Original_RTID) AND ((@IsNull_"& _ 
                "TS = 1 AND [TS] IS NULL) OR ([TS] = @Original_TS)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RTID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RTID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TS", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[RadioTracking] ([Herd], [GroupNumber], [Frequency], [VisualCol"& _ 
                "lar], [SightingDate], [Mode], [Accuracy], [Bull], [Cow], [Calf], [Adult], [Unkno"& _ 
                "wn], [Waypoint], [RetainedAntler], [DistendedUdders], [CalvesAtHeel], [Seen], [F"& _ 
                "lightID], [AnimalID], [ProjectID], [RTID], [RecordInsertedDate], [RecordInserted"& _ 
                "By], [SearchArea], [SourceFilename], [Comment], [Lat], [Lon]) VALUES (@Herd, @Gr"& _ 
                "oupNumber, @Frequency, @VisualCollar, @SightingDate, @Mode, @Accuracy, @Bull, @C"& _ 
                "ow, @Calf, @Adult, @Unknown, @Waypoint, @RetainedAntler, @DistendedUdders, @Calv"& _ 
                "esAtHeel, @Seen, @FlightID, @AnimalID, @ProjectID, @RTID, @RecordInsertedDate, @"& _ 
                "RecordInsertedBy, @SearchArea, @SourceFilename, @Comment, @Lat, @Lon);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT H"& _ 
                "erd, GroupNumber, Frequency, VisualCollar, SightingDate, Mode, Accuracy, Bull, C"& _ 
                "ow, Calf, Adult, Unknown, Waypoint, RetainedAntler, DistendedUdders, CalvesAtHee"& _ 
                "l, Seen, FlightID, AnimalID, ProjectID, RTID, RecordInsertedDate, RecordInserted"& _ 
                "By, SearchArea, TS, SourceFilename, Comment, Lat, Lon FROM RadioTracking WHERE ("& _ 
                "RTID = @RTID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Herd", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Herd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GroupNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GroupNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Frequency", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Frequency", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VisualCollar", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VisualCollar", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SightingDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SightingDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Accuracy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Accuracy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Bull", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bull", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cow", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cow", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Calf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Calf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Adult", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Adult", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unknown", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unknown", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Waypoint", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Waypoint", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RetainedAntler", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RetainedAntler", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DistendedUdders", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DistendedUdders", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CalvesAtHeel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CalvesAtHeel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Seen", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Seen", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FlightID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FlightID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnimalID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnimalID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProjectID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RTID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RTID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SearchArea", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SearchArea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SourceFilename", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SourceFilename", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Comment", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Comment", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lat", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 13, 9, "Lat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lon", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 13, 9, "Lon", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[RadioTracking] SET [Herd] = @Herd, [GroupNumber] = @GroupNumber, [F"& _ 
                "requency] = @Frequency, [VisualCollar] = @VisualCollar, [SightingDate] = @Sighti"& _ 
                "ngDate, [Mode] = @Mode, [Accuracy] = @Accuracy, [Bull] = @Bull, [Cow] = @Cow, [C"& _ 
                "alf] = @Calf, [Adult] = @Adult, [Unknown] = @Unknown, [Waypoint] = @Waypoint, [R"& _ 
                "etainedAntler] = @RetainedAntler, [DistendedUdders] = @DistendedUdders, [CalvesA"& _ 
                "tHeel] = @CalvesAtHeel, [Seen] = @Seen, [FlightID] = @FlightID, [AnimalID] = @An"& _ 
                "imalID, [ProjectID] = @ProjectID, [RTID] = @RTID, [RecordInsertedDate] = @Record"& _ 
                "InsertedDate, [RecordInsertedBy] = @RecordInsertedBy, [SearchArea] = @SearchArea"& _ 
                ", [SourceFilename] = @SourceFilename, [Comment] = @Comment, [Lat] = @Lat, [Lon] "& _ 
                "= @Lon WHERE (([RTID] = @Original_RTID) AND ((@IsNull_TS = 1 AND [TS] IS NULL) O"& _ 
                "R ([TS] = @Original_TS)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Herd, GroupNumber, Frequency, VisualCollar, S"& _ 
                "ightingDate, Mode, Accuracy, Bull, Cow, Calf, Adult, Unknown, Waypoint, Retained"& _ 
                "Antler, DistendedUdders, CalvesAtHeel, Seen, FlightID, AnimalID, ProjectID, RTID"& _ 
                ", RecordInsertedDate, RecordInsertedBy, SearchArea, TS, SourceFilename, Comment,"& _ 
                " Lat, Lon FROM RadioTracking WHERE (RTID = @RTID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Herd", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Herd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GroupNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GroupNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Frequency", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Frequency", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VisualCollar", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VisualCollar", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SightingDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SightingDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Accuracy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Accuracy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Bull", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bull", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cow", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cow", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Calf", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Calf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Adult", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Adult", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unknown", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unknown", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Waypoint", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Waypoint", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RetainedAntler", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RetainedAntler", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DistendedUdders", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DistendedUdders", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CalvesAtHeel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CalvesAtHeel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Seen", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Seen", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FlightID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FlightID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnimalID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnimalID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProjectID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RTID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RTID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SearchArea", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SearchArea", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SourceFilename", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SourceFilename", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Comment", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Comment", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lat", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 13, 9, "Lat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lon", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 13, 9, "Lon", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RTID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RTID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TS", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WRST_Caribou.My.MySettings.Default.WRST_CaribouConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Herd, GroupNumber, Frequency, VisualCollar, SightingDate, Mode, Accuracy, "& _ 
                "Bull, Cow, Calf, Adult, Unknown, Waypoint, RetainedAntler, DistendedUdders, Calv"& _ 
                "esAtHeel, Seen, FlightID, AnimalID, ProjectID, RTID, RecordInsertedDate, RecordI"& _ 
                "nsertedBy, SearchArea, TS, SourceFilename, Comment, Lat, Lon FROM dbo.RadioTrack"& _ 
                "ing"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As WRST_CaribouDataSet.RadioTrackingDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As WRST_CaribouDataSet.RadioTrackingDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As WRST_CaribouDataSet.RadioTrackingDataTable = New WRST_CaribouDataSet.RadioTrackingDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As WRST_CaribouDataSet.RadioTrackingDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As WRST_CaribouDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "RadioTracking")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_RTID As String, ByVal Original_TS() As Byte) As Integer
            If (Original_RTID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RTID")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_RTID,String)
            End If
            If (Original_TS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_TS,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Herd As String,  _
                    ByVal GroupNumber As Integer,  _
                    ByVal Frequency As Global.System.Nullable(Of Double),  _
                    ByVal VisualCollar As String,  _
                    ByVal SightingDate As Date,  _
                    ByVal Mode As String,  _
                    ByVal Accuracy As Global.System.Nullable(Of Integer),  _
                    ByVal Bull As Global.System.Nullable(Of Integer),  _
                    ByVal Cow As Global.System.Nullable(Of Integer),  _
                    ByVal Calf As Global.System.Nullable(Of Integer),  _
                    ByVal Adult As Global.System.Nullable(Of Integer),  _
                    ByVal Unknown As Global.System.Nullable(Of Integer),  _
                    ByVal Waypoint As String,  _
                    ByVal RetainedAntler As Global.System.Nullable(Of Integer),  _
                    ByVal DistendedUdders As Global.System.Nullable(Of Integer),  _
                    ByVal CalvesAtHeel As Global.System.Nullable(Of Integer),  _
                    ByVal Seen As Global.System.Nullable(Of Integer),  _
                    ByVal FlightID As String,  _
                    ByVal AnimalID As String,  _
                    ByVal ProjectID As String,  _
                    ByVal RTID As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal SearchArea As String,  _
                    ByVal SourceFilename As String,  _
                    ByVal Comment As String,  _
                    ByVal Lat As Decimal,  _
                    ByVal Lon As Decimal) As Integer
            If (Herd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Herd")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Herd,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(GroupNumber,Integer)
            If (Frequency.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Frequency.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (VisualCollar Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(VisualCollar,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(SightingDate,Date)
            If (Mode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Mode,String)
            End If
            If (Accuracy.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Accuracy.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Bull.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Bull.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Cow.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Cow.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Calf.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Calf.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Adult.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Adult.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Unknown.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Unknown.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Waypoint Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Waypoint")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Waypoint,String)
            End If
            If (RetainedAntler.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(RetainedAntler.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (DistendedUdders.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(DistendedUdders.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (CalvesAtHeel.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(CalvesAtHeel.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Seen.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Seen.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (FlightID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FlightID")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(FlightID,String)
            End If
            If (AnimalID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(AnimalID,String)
            End If
            If (ProjectID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(ProjectID,String)
            End If
            If (RTID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RTID")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(RTID,String)
            End If
            Me.Adapter.InsertCommand.Parameters(21).Value = CType(RecordInsertedDate,Date)
            If (RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordInsertedBy")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(RecordInsertedBy,String)
            End If
            If (SearchArea Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(SearchArea,String)
            End If
            If (SourceFilename Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(SourceFilename,String)
            End If
            If (Comment Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(Comment,String)
            End If
            Me.Adapter.InsertCommand.Parameters(26).Value = CType(Lat,Decimal)
            Me.Adapter.InsertCommand.Parameters(27).Value = CType(Lon,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Herd As String,  _
                    ByVal GroupNumber As Integer,  _
                    ByVal Frequency As Global.System.Nullable(Of Double),  _
                    ByVal VisualCollar As String,  _
                    ByVal SightingDate As Date,  _
                    ByVal Mode As String,  _
                    ByVal Accuracy As Global.System.Nullable(Of Integer),  _
                    ByVal Bull As Global.System.Nullable(Of Integer),  _
                    ByVal Cow As Global.System.Nullable(Of Integer),  _
                    ByVal Calf As Global.System.Nullable(Of Integer),  _
                    ByVal Adult As Global.System.Nullable(Of Integer),  _
                    ByVal Unknown As Global.System.Nullable(Of Integer),  _
                    ByVal Waypoint As String,  _
                    ByVal RetainedAntler As Global.System.Nullable(Of Integer),  _
                    ByVal DistendedUdders As Global.System.Nullable(Of Integer),  _
                    ByVal CalvesAtHeel As Global.System.Nullable(Of Integer),  _
                    ByVal Seen As Global.System.Nullable(Of Integer),  _
                    ByVal FlightID As String,  _
                    ByVal AnimalID As String,  _
                    ByVal ProjectID As String,  _
                    ByVal RTID As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal SearchArea As String,  _
                    ByVal SourceFilename As String,  _
                    ByVal Comment As String,  _
                    ByVal Lat As Decimal,  _
                    ByVal Lon As Decimal,  _
                    ByVal Original_RTID As String,  _
                    ByVal Original_TS() As Byte) As Integer
            If (Herd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Herd")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Herd,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(GroupNumber,Integer)
            If (Frequency.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Frequency.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (VisualCollar Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(VisualCollar,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SightingDate,Date)
            If (Mode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Mode,String)
            End If
            If (Accuracy.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Accuracy.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Bull.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Bull.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Cow.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Cow.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Calf.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Calf.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Adult.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Adult.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Unknown.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Unknown.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Waypoint Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Waypoint")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Waypoint,String)
            End If
            If (RetainedAntler.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(RetainedAntler.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (DistendedUdders.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(DistendedUdders.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (CalvesAtHeel.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(CalvesAtHeel.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Seen.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Seen.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (FlightID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FlightID")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(FlightID,String)
            End If
            If (AnimalID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(AnimalID,String)
            End If
            If (ProjectID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(ProjectID,String)
            End If
            If (RTID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RTID")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(RTID,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(RecordInsertedDate,Date)
            If (RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordInsertedBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(RecordInsertedBy,String)
            End If
            If (SearchArea Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(SearchArea,String)
            End If
            If (SourceFilename Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(SourceFilename,String)
            End If
            If (Comment Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Comment,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Lat,Decimal)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Lon,Decimal)
            If (Original_RTID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RTID")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_RTID,String)
            End If
            If (Original_TS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_TS,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Herd As String,  _
                    ByVal GroupNumber As Integer,  _
                    ByVal Frequency As Global.System.Nullable(Of Double),  _
                    ByVal VisualCollar As String,  _
                    ByVal SightingDate As Date,  _
                    ByVal Mode As String,  _
                    ByVal Accuracy As Global.System.Nullable(Of Integer),  _
                    ByVal Bull As Global.System.Nullable(Of Integer),  _
                    ByVal Cow As Global.System.Nullable(Of Integer),  _
                    ByVal Calf As Global.System.Nullable(Of Integer),  _
                    ByVal Adult As Global.System.Nullable(Of Integer),  _
                    ByVal Unknown As Global.System.Nullable(Of Integer),  _
                    ByVal Waypoint As String,  _
                    ByVal RetainedAntler As Global.System.Nullable(Of Integer),  _
                    ByVal DistendedUdders As Global.System.Nullable(Of Integer),  _
                    ByVal CalvesAtHeel As Global.System.Nullable(Of Integer),  _
                    ByVal Seen As Global.System.Nullable(Of Integer),  _
                    ByVal FlightID As String,  _
                    ByVal AnimalID As String,  _
                    ByVal ProjectID As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal SearchArea As String,  _
                    ByVal SourceFilename As String,  _
                    ByVal Comment As String,  _
                    ByVal Lat As Decimal,  _
                    ByVal Lon As Decimal,  _
                    ByVal Original_RTID As String,  _
                    ByVal Original_TS() As Byte) As Integer
            Return Me.Update(Herd, GroupNumber, Frequency, VisualCollar, SightingDate, Mode, Accuracy, Bull, Cow, Calf, Adult, Unknown, Waypoint, RetainedAntler, DistendedUdders, CalvesAtHeel, Seen, FlightID, AnimalID, ProjectID, Original_RTID, RecordInsertedDate, RecordInsertedBy, SearchArea, SourceFilename, Comment, Lat, Lon, Original_RTID, Original_TS)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SurveyFlightsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SurveyFlights"
            tableMapping.ColumnMappings.Add("CrewNumber", "CrewNumber")
            tableMapping.ColumnMappings.Add("Pilot", "Pilot")
            tableMapping.ColumnMappings.Add("Observer1", "Observer1")
            tableMapping.ColumnMappings.Add("Observer2", "Observer2")
            tableMapping.ColumnMappings.Add("AircraftType", "AircraftType")
            tableMapping.ColumnMappings.Add("TailNo", "TailNo")
            tableMapping.ColumnMappings.Add("TimeDepart", "TimeDepart")
            tableMapping.ColumnMappings.Add("TimeReturn", "TimeReturn")
            tableMapping.ColumnMappings.Add("SpotterPlaneTailNo", "SpotterPlaneTailNo")
            tableMapping.ColumnMappings.Add("SpotterPlaneType", "SpotterPlaneType")
            tableMapping.ColumnMappings.Add("SpotterPlanePilot", "SpotterPlanePilot")
            tableMapping.ColumnMappings.Add("WeatherConditions", "WeatherConditions")
            tableMapping.ColumnMappings.Add("SnowConditions", "SnowConditions")
            tableMapping.ColumnMappings.Add("Notes", "Notes")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("Herd", "Herd")
            tableMapping.ColumnMappings.Add("SOPNumber", "SOPNumber")
            tableMapping.ColumnMappings.Add("SOPVersion", "SOPVersion")
            tableMapping.ColumnMappings.Add("CertificationDate", "CertificationDate")
            tableMapping.ColumnMappings.Add("CertifiedBy", "CertifiedBy")
            tableMapping.ColumnMappings.Add("CertificationLevel", "CertificationLevel")
            tableMapping.ColumnMappings.Add("FlightID", "FlightID")
            tableMapping.ColumnMappings.Add("CampaignID", "CampaignID")
            tableMapping.ColumnMappings.Add("TS", "TS")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SurveyFlights] WHERE (([FlightID] = @Original_FlightID) AND (("& _ 
                "@IsNull_TS = 1 AND [TS] IS NULL) OR ([TS] = @Original_TS)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FlightID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FlightID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TS", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO SurveyFlights"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  (CrewNumber, Pilot, Observer1, Obser"& _ 
                "ver2, AircraftType, TailNo, TimeDepart, TimeReturn, SpotterPlaneTailNo, SpotterP"& _ 
                "laneType, SpotterPlanePilot, WeatherConditions, SnowConditions, Notes, RecordIns"& _ 
                "ertedDate, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  RecordInsertedBy, Herd, SOPNumber, SOPVersion, Fl"& _ 
                "ightID, CampaignID)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES (@CrewNumber,@Pilot,@Observer1,@Observer2,@AircraftT"& _ 
                "ype,@TailNo,@TimeDepart,@TimeReturn,@SpotterPlaneTailNo,@SpotterPlaneType,@Spott"& _ 
                "erPlanePilot,@WeatherConditions,@SnowConditions,@Notes,@RecordInsertedDate,@Reco"& _ 
                "rdInsertedBy,@Herd,@SOPNumber,@SOPVersion,@FlightID,@CampaignID); "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CrewN"& _ 
                "umber, Pilot, Observer1, Observer2, AircraftType, TailNo, TimeDepart, TimeReturn"& _ 
                ", SpotterPlaneTailNo, SpotterPlaneType, SpotterPlanePilot, WeatherConditions, Sn"& _ 
                "owConditions, Notes, RecordInsertedDate, RecordInsertedBy, Herd, SOPNumber, SOPV"& _ 
                "ersion, CertificationDate, CertifiedBy, CertificationLevel, FlightID, CampaignID"& _ 
                ", TS FROM SurveyFlights WHERE (FlightID = @FlightID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CrewNumber", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "CrewNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pilot", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "Pilot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Observer1", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "Observer1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Observer2", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "Observer2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AircraftType", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "AircraftType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TailNo", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "TailNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeDepart", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeDepart", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeReturn", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeReturn", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SpotterPlaneTailNo", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "SpotterPlaneTailNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SpotterPlaneType", Global.System.Data.SqlDbType.VarChar, 30, Global.System.Data.ParameterDirection.Input, 0, 0, "SpotterPlaneType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SpotterPlanePilot", Global.System.Data.SqlDbType.VarChar, 40, Global.System.Data.ParameterDirection.Input, 0, 0, "SpotterPlanePilot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WeatherConditions", Global.System.Data.SqlDbType.VarChar, 1000, Global.System.Data.ParameterDirection.Input, 0, 0, "WeatherConditions", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SnowConditions", Global.System.Data.SqlDbType.VarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "SnowConditions", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Notes", Global.System.Data.SqlDbType.VarChar, 1000, Global.System.Data.ParameterDirection.Input, 0, 0, "Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Herd", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Herd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOPNumber", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SOPNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOPVersion", Global.System.Data.SqlDbType.[Decimal], 5, Global.System.Data.ParameterDirection.Input, 6, 2, "SOPVersion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FlightID", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "FlightID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CampaignID", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "CampaignID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE SurveyFlights"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET          CrewNumber = @CrewNumber, Pilot = @Pilot, Obse"& _ 
                "rver1 = @Observer1, Observer2 = @Observer2, AircraftType = @AircraftType, TailNo"& _ 
                " = @TailNo, TimeDepart = @TimeDepart, TimeReturn = @TimeReturn, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "    SpotterPlaneTailNo = @SpotterPlaneTailNo, SpotterPlaneType = @SpotterPlaneTy"& _ 
                "pe, SpotterPlanePilot = @SpotterPlanePilot, WeatherConditions = @WeatherConditio"& _ 
                "ns, SnowConditions = @SnowConditions, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  Notes = @Notes, Record"& _ 
                "InsertedDate = @RecordInsertedDate, RecordInsertedBy = @RecordInsertedBy, Herd ="& _ 
                " @Herd, SOPNumber = @SOPNumber, SOPVersion = @SOPVersion, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  Ce"& _ 
                "rtificationDate = @CertificationDate, CertifiedBy = @CertifiedBy, CertificationL"& _ 
                "evel = @CertificationLevel, FlightID = @FlightID, CampaignID = @CampaignID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHER"& _ 
                "E  (FlightID = @Original_FlightID); "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CrewNumber, Pilot, Observer1, Obser"& _ 
                "ver2, AircraftType, TailNo, TimeDepart, TimeReturn, SpotterPlaneTailNo, SpotterP"& _ 
                "laneType, SpotterPlanePilot, WeatherConditions, SnowConditions, Notes, RecordIns"& _ 
                "ertedDate, RecordInsertedBy, Herd, SOPNumber, SOPVersion, CertificationDate, Cer"& _ 
                "tifiedBy, CertificationLevel, FlightID, CampaignID, TS FROM SurveyFlights WHERE "& _ 
                "(FlightID = @FlightID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CrewNumber", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "CrewNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pilot", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "Pilot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Observer1", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "Observer1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Observer2", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "Observer2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AircraftType", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "AircraftType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TailNo", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "TailNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeDepart", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeDepart", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeReturn", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeReturn", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SpotterPlaneTailNo", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "SpotterPlaneTailNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SpotterPlaneType", Global.System.Data.SqlDbType.VarChar, 30, Global.System.Data.ParameterDirection.Input, 0, 0, "SpotterPlaneType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SpotterPlanePilot", Global.System.Data.SqlDbType.VarChar, 40, Global.System.Data.ParameterDirection.Input, 0, 0, "SpotterPlanePilot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WeatherConditions", Global.System.Data.SqlDbType.VarChar, 1000, Global.System.Data.ParameterDirection.Input, 0, 0, "WeatherConditions", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SnowConditions", Global.System.Data.SqlDbType.VarChar, 255, Global.System.Data.ParameterDirection.Input, 0, 0, "SnowConditions", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Notes", Global.System.Data.SqlDbType.VarChar, 1000, Global.System.Data.ParameterDirection.Input, 0, 0, "Notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Herd", Global.System.Data.SqlDbType.VarChar, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Herd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOPNumber", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SOPNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOPVersion", Global.System.Data.SqlDbType.[Decimal], 5, Global.System.Data.ParameterDirection.Input, 6, 2, "SOPVersion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CertificationDate", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CertificationDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CertifiedBy", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "CertifiedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CertificationLevel", Global.System.Data.SqlDbType.VarChar, 15, Global.System.Data.ParameterDirection.Input, 0, 0, "CertificationLevel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FlightID", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "FlightID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CampaignID", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "CampaignID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FlightID", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "FlightID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WRST_Caribou.My.MySettings.Default.WRST_CaribouConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CrewNumber, Pilot, Observer1, Observer2, AircraftType, TailNo, TimeDepart,"& _ 
                " TimeReturn, SpotterPlaneTailNo, SpotterPlaneType, SpotterPlanePilot, WeatherCon"& _ 
                "ditions, SnowConditions, Notes, RecordInsertedDate, RecordInsertedBy, Herd, SOPN"& _ 
                "umber, SOPVersion, CertificationDate, CertifiedBy, CertificationLevel, FlightID,"& _ 
                " CampaignID, TS FROM dbo.SurveyFlights"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As WRST_CaribouDataSet.SurveyFlightsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As WRST_CaribouDataSet.SurveyFlightsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As WRST_CaribouDataSet.SurveyFlightsDataTable = New WRST_CaribouDataSet.SurveyFlightsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As WRST_CaribouDataSet.SurveyFlightsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As WRST_CaribouDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "SurveyFlights")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FlightID As String, ByVal Original_TS() As Byte) As Integer
            If (Original_FlightID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FlightID")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FlightID,String)
            End If
            If (Original_TS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_TS,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal CrewNumber As Integer,  _
                    ByVal Pilot As String,  _
                    ByVal Observer1 As String,  _
                    ByVal Observer2 As String,  _
                    ByVal AircraftType As String,  _
                    ByVal TailNo As String,  _
                    ByVal TimeDepart As Date,  _
                    ByVal TimeReturn As Date,  _
                    ByVal SpotterPlaneTailNo As String,  _
                    ByVal SpotterPlaneType As String,  _
                    ByVal SpotterPlanePilot As String,  _
                    ByVal WeatherConditions As String,  _
                    ByVal SnowConditions As String,  _
                    ByVal Notes As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal Herd As String,  _
                    ByVal SOPNumber As Integer,  _
                    ByVal SOPVersion As Decimal,  _
                    ByVal FlightID As String,  _
                    ByVal CampaignID As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(CrewNumber,Integer)
            If (Pilot Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pilot")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Pilot,String)
            End If
            If (Observer1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Observer1,String)
            End If
            If (Observer2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Observer2,String)
            End If
            If (AircraftType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(AircraftType,String)
            End If
            If (TailNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TailNo")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(TailNo,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(TimeDepart,Date)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(TimeReturn,Date)
            If (SpotterPlaneTailNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(SpotterPlaneTailNo,String)
            End If
            If (SpotterPlaneType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(SpotterPlaneType,String)
            End If
            If (SpotterPlanePilot Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(SpotterPlanePilot,String)
            End If
            If (WeatherConditions Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(WeatherConditions,String)
            End If
            If (SnowConditions Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(SnowConditions,String)
            End If
            If (Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Notes,String)
            End If
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(RecordInsertedDate,Date)
            If (RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordInsertedBy")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(RecordInsertedBy,String)
            End If
            If (Herd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Herd")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Herd,String)
            End If
            Me.Adapter.InsertCommand.Parameters(17).Value = CType(SOPNumber,Integer)
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(SOPVersion,Decimal)
            If (FlightID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FlightID")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(FlightID,String)
            End If
            If (CampaignID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CampaignID")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(CampaignID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CrewNumber As Integer,  _
                    ByVal Pilot As String,  _
                    ByVal Observer1 As String,  _
                    ByVal Observer2 As String,  _
                    ByVal AircraftType As String,  _
                    ByVal TailNo As String,  _
                    ByVal TimeDepart As Date,  _
                    ByVal TimeReturn As Date,  _
                    ByVal SpotterPlaneTailNo As String,  _
                    ByVal SpotterPlaneType As String,  _
                    ByVal SpotterPlanePilot As String,  _
                    ByVal WeatherConditions As String,  _
                    ByVal SnowConditions As String,  _
                    ByVal Notes As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal Herd As String,  _
                    ByVal SOPNumber As Integer,  _
                    ByVal SOPVersion As Decimal,  _
                    ByVal CertificationDate As Global.System.Nullable(Of Date),  _
                    ByVal CertifiedBy As String,  _
                    ByVal CertificationLevel As String,  _
                    ByVal FlightID As String,  _
                    ByVal CampaignID As String,  _
                    ByVal Original_FlightID As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CrewNumber,Integer)
            If (Pilot Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Pilot")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Pilot,String)
            End If
            If (Observer1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Observer1,String)
            End If
            If (Observer2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Observer2,String)
            End If
            If (AircraftType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(AircraftType,String)
            End If
            If (TailNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TailNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(TailNo,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(TimeDepart,Date)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(TimeReturn,Date)
            If (SpotterPlaneTailNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(SpotterPlaneTailNo,String)
            End If
            If (SpotterPlaneType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(SpotterPlaneType,String)
            End If
            If (SpotterPlanePilot Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(SpotterPlanePilot,String)
            End If
            If (WeatherConditions Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(WeatherConditions,String)
            End If
            If (SnowConditions Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(SnowConditions,String)
            End If
            If (Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Notes,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(RecordInsertedDate,Date)
            If (RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordInsertedBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(RecordInsertedBy,String)
            End If
            If (Herd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Herd")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Herd,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(SOPNumber,Integer)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(SOPVersion,Decimal)
            If (CertificationDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(CertificationDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (CertifiedBy Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(CertifiedBy,String)
            End If
            If (CertificationLevel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CertificationLevel")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(CertificationLevel,String)
            End If
            If (FlightID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FlightID")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(FlightID,String)
            End If
            If (CampaignID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CampaignID")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(CampaignID,String)
            End If
            If (Original_FlightID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FlightID")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_FlightID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CrewNumber As Integer,  _
                    ByVal Pilot As String,  _
                    ByVal Observer1 As String,  _
                    ByVal Observer2 As String,  _
                    ByVal AircraftType As String,  _
                    ByVal TailNo As String,  _
                    ByVal TimeDepart As Date,  _
                    ByVal TimeReturn As Date,  _
                    ByVal SpotterPlaneTailNo As String,  _
                    ByVal SpotterPlaneType As String,  _
                    ByVal SpotterPlanePilot As String,  _
                    ByVal WeatherConditions As String,  _
                    ByVal SnowConditions As String,  _
                    ByVal Notes As String,  _
                    ByVal RecordInsertedDate As Date,  _
                    ByVal RecordInsertedBy As String,  _
                    ByVal Herd As String,  _
                    ByVal SOPNumber As Integer,  _
                    ByVal SOPVersion As Decimal,  _
                    ByVal CertificationDate As Global.System.Nullable(Of Date),  _
                    ByVal CertifiedBy As String,  _
                    ByVal CertificationLevel As String,  _
                    ByVal CampaignID As String,  _
                    ByVal Original_FlightID As String) As Integer
            Return Me.Update(CrewNumber, Pilot, Observer1, Observer2, AircraftType, TailNo, TimeDepart, TimeReturn, SpotterPlaneTailNo, SpotterPlaneType, SpotterPlanePilot, WeatherConditions, SnowConditions, Notes, RecordInsertedDate, RecordInsertedBy, Herd, SOPNumber, SOPVersion, CertificationDate, CertifiedBy, CertificationLevel, Original_FlightID, CampaignID, Original_FlightID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class WorkLogTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "WorkLog"
            tableMapping.ColumnMappings.Add("WorkLogID", "WorkLogID")
            tableMapping.ColumnMappings.Add("LogDate", "LogDate")
            tableMapping.ColumnMappings.Add("UserName", "UserName")
            tableMapping.ColumnMappings.Add("LogEntry", "LogEntry")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordLastUpdatedBy", "RecordLastUpdatedBy")
            tableMapping.ColumnMappings.Add("RecordLastUpdatedDate", "RecordLastUpdatedDate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[WorkLog] WHERE (([WorkLogID] = @Original_WorkLogID) AND ([LogD"& _ 
                "ate] = @Original_LogDate) AND ([UserName] = @Original_UserName) AND ([RecordInse"& _ 
                "rtedBy] = @Original_RecordInsertedBy) AND ([RecordInsertedDate] = @Original_Reco"& _ 
                "rdInsertedDate) AND ([RecordLastUpdatedBy] = @Original_RecordLastUpdatedBy) AND "& _ 
                "([RecordLastUpdatedDate] = @Original_RecordLastUpdatedDate))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WorkLogID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WorkLogID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LogDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LogDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UserName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordLastUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordLastUpdatedBy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordLastUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordLastUpdatedDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[WorkLog] ([LogDate], [UserName], [LogEntry], [RecordInsertedBy"& _ 
                "], [RecordInsertedDate], [RecordLastUpdatedBy], [RecordLastUpdatedDate]) VALUES "& _ 
                "(@LogDate, @UserName, @LogEntry, @RecordInsertedBy, @RecordInsertedDate, @Record"& _ 
                "LastUpdatedBy, @RecordLastUpdatedDate);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT WorkLogID, LogDate, UserName, Lo"& _ 
                "gEntry, RecordInsertedBy, RecordInsertedDate, RecordLastUpdatedBy, RecordLastUpd"& _ 
                "atedDate FROM WorkLog WHERE (WorkLogID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LogDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LogDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UserName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LogEntry", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LogEntry", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordLastUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordLastUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordLastUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordLastUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[WorkLog] SET [LogDate] = @LogDate, [UserName] = @UserName, [LogEntr"& _ 
                "y] = @LogEntry, [RecordInsertedBy] = @RecordInsertedBy, [RecordInsertedDate] = @"& _ 
                "RecordInsertedDate, [RecordLastUpdatedBy] = @RecordLastUpdatedBy, [RecordLastUpd"& _ 
                "atedDate] = @RecordLastUpdatedDate WHERE (([WorkLogID] = @Original_WorkLogID) AN"& _ 
                "D ([LogDate] = @Original_LogDate) AND ([UserName] = @Original_UserName) AND ([Re"& _ 
                "cordInsertedBy] = @Original_RecordInsertedBy) AND ([RecordInsertedDate] = @Origi"& _ 
                "nal_RecordInsertedDate) AND ([RecordLastUpdatedBy] = @Original_RecordLastUpdated"& _ 
                "By) AND ([RecordLastUpdatedDate] = @Original_RecordLastUpdatedDate));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Wo"& _ 
                "rkLogID, LogDate, UserName, LogEntry, RecordInsertedBy, RecordInsertedDate, Reco"& _ 
                "rdLastUpdatedBy, RecordLastUpdatedDate FROM WorkLog WHERE (WorkLogID = @WorkLogI"& _ 
                "D)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LogDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LogDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UserName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LogEntry", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LogEntry", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordLastUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordLastUpdatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordLastUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordLastUpdatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WorkLogID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WorkLogID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LogDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LogDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UserName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordLastUpdatedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordLastUpdatedBy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordLastUpdatedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordLastUpdatedDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WorkLogID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "WorkLogID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WRST_Caribou.My.MySettings.Default.WRST_CaribouConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT WorkLogID, LogDate, UserName, LogEntry, RecordInsertedBy, RecordInsertedDa"& _ 
                "te, RecordLastUpdatedBy, RecordLastUpdatedDate FROM dbo.WorkLog"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As WRST_CaribouDataSet.WorkLogDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As WRST_CaribouDataSet.WorkLogDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As WRST_CaribouDataSet.WorkLogDataTable = New WRST_CaribouDataSet.WorkLogDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As WRST_CaribouDataSet.WorkLogDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As WRST_CaribouDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "WorkLog")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_WorkLogID As Integer, ByVal Original_LogDate As Date, ByVal Original_UserName As String, ByVal Original_RecordInsertedBy As String, ByVal Original_RecordInsertedDate As Date, ByVal Original_RecordLastUpdatedBy As String, ByVal Original_RecordLastUpdatedDate As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_WorkLogID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_LogDate,Date)
            If (Original_UserName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UserName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_UserName,String)
            End If
            If (Original_RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RecordInsertedBy")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_RecordInsertedBy,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_RecordInsertedDate,Date)
            If (Original_RecordLastUpdatedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RecordLastUpdatedBy")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_RecordLastUpdatedBy,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_RecordLastUpdatedDate,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal LogDate As Date, ByVal UserName As String, ByVal LogEntry As String, ByVal RecordInsertedBy As String, ByVal RecordInsertedDate As Date, ByVal RecordLastUpdatedBy As String, ByVal RecordLastUpdatedDate As Date) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(LogDate,Date)
            If (UserName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UserName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(UserName,String)
            End If
            If (LogEntry Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LogEntry")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(LogEntry,String)
            End If
            If (RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordInsertedBy")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(RecordInsertedBy,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(RecordInsertedDate,Date)
            If (RecordLastUpdatedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordLastUpdatedBy")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(RecordLastUpdatedBy,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(RecordLastUpdatedDate,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal LogDate As Date, ByVal UserName As String, ByVal LogEntry As String, ByVal RecordInsertedBy As String, ByVal RecordInsertedDate As Date, ByVal RecordLastUpdatedBy As String, ByVal RecordLastUpdatedDate As Date, ByVal Original_WorkLogID As Integer, ByVal Original_LogDate As Date, ByVal Original_UserName As String, ByVal Original_RecordInsertedBy As String, ByVal Original_RecordInsertedDate As Date, ByVal Original_RecordLastUpdatedBy As String, ByVal Original_RecordLastUpdatedDate As Date, ByVal WorkLogID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(LogDate,Date)
            If (UserName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UserName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(UserName,String)
            End If
            If (LogEntry Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LogEntry")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(LogEntry,String)
            End If
            If (RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordInsertedBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(RecordInsertedBy,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(RecordInsertedDate,Date)
            If (RecordLastUpdatedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordLastUpdatedBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(RecordLastUpdatedBy,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(RecordLastUpdatedDate,Date)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_WorkLogID,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_LogDate,Date)
            If (Original_UserName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UserName")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_UserName,String)
            End If
            If (Original_RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RecordInsertedBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_RecordInsertedBy,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_RecordInsertedDate,Date)
            If (Original_RecordLastUpdatedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RecordLastUpdatedBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_RecordLastUpdatedBy,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_RecordLastUpdatedDate,Date)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(WorkLogID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal LogDate As Date, ByVal UserName As String, ByVal LogEntry As String, ByVal RecordInsertedBy As String, ByVal RecordInsertedDate As Date, ByVal RecordLastUpdatedBy As String, ByVal RecordLastUpdatedDate As Date, ByVal Original_WorkLogID As Integer, ByVal Original_LogDate As Date, ByVal Original_UserName As String, ByVal Original_RecordInsertedBy As String, ByVal Original_RecordInsertedDate As Date, ByVal Original_RecordLastUpdatedBy As String, ByVal Original_RecordLastUpdatedDate As Date) As Integer
            Return Me.Update(LogDate, UserName, LogEntry, RecordInsertedBy, RecordInsertedDate, RecordLastUpdatedBy, RecordLastUpdatedDate, Original_WorkLogID, Original_LogDate, Original_UserName, Original_RecordInsertedBy, Original_RecordInsertedDate, Original_RecordLastUpdatedBy, Original_RecordLastUpdatedDate, Original_WorkLogID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class xrefCompCountCaribouTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "xrefCompCountCaribou"
            tableMapping.ColumnMappings.Add("CCCID", "CCCID")
            tableMapping.ColumnMappings.Add("CCID", "CCID")
            tableMapping.ColumnMappings.Add("ProjectID", "ProjectID")
            tableMapping.ColumnMappings.Add("AnimalID", "AnimalID")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("TS", "TS")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[xrefCompCountCaribou] WHERE (([CCCID] = @Original_CCCID) AND ("& _ 
                "(@IsNull_TS = 1 AND [TS] IS NULL) OR ([TS] = @Original_TS)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CCCID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCCID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TS", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[xrefCompCountCaribou] ([CCCID], [CCID], [ProjectID], [AnimalID"& _ 
                "], [RecordInsertedDate], [RecordInsertedBy]) VALUES (@CCCID, @CCID, @ProjectID, "& _ 
                "@AnimalID, @RecordInsertedDate, @RecordInsertedBy);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CCCID, CCID, Project"& _ 
                "ID, AnimalID, RecordInsertedDate, RecordInsertedBy, TS FROM xrefCompCountCaribou"& _ 
                " WHERE (CCCID = @CCCID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CCCID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCCID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CCID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProjectID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnimalID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnimalID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[xrefCompCountCaribou] SET [CCCID] = @CCCID, [CCID] = @CCID, [Projec"& _ 
                "tID] = @ProjectID, [AnimalID] = @AnimalID, [RecordInsertedDate] = @RecordInserte"& _ 
                "dDate, [RecordInsertedBy] = @RecordInsertedBy WHERE (([CCCID] = @Original_CCCID)"& _ 
                " AND ((@IsNull_TS = 1 AND [TS] IS NULL) OR ([TS] = @Original_TS)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CCCI"& _ 
                "D, CCID, ProjectID, AnimalID, RecordInsertedDate, RecordInsertedBy, TS FROM xref"& _ 
                "CompCountCaribou WHERE (CCCID = @CCCID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CCCID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCCID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CCID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProjectID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnimalID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnimalID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CCCID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CCCID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TS", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WRST_Caribou.My.MySettings.Default.WRST_CaribouConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CCCID, CCID, ProjectID, AnimalID, RecordInsertedDate, RecordInsertedBy, TS"& _ 
                " FROM dbo.xrefCompCountCaribou"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As WRST_CaribouDataSet.xrefCompCountCaribouDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As WRST_CaribouDataSet.xrefCompCountCaribouDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As WRST_CaribouDataSet.xrefCompCountCaribouDataTable = New WRST_CaribouDataSet.xrefCompCountCaribouDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As WRST_CaribouDataSet.xrefCompCountCaribouDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As WRST_CaribouDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "xrefCompCountCaribou")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CCCID As String, ByVal Original_TS() As Byte) As Integer
            If (Original_CCCID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CCCID")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CCCID,String)
            End If
            If (Original_TS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_TS,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CCCID As String, ByVal CCID As String, ByVal ProjectID As String, ByVal AnimalID As String, ByVal RecordInsertedDate As Date, ByVal RecordInsertedBy As String) As Integer
            If (CCCID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CCCID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CCCID,String)
            End If
            If (CCID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CCID")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CCID,String)
            End If
            If (ProjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ProjectID")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ProjectID,String)
            End If
            If (AnimalID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AnimalID")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(AnimalID,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(RecordInsertedDate,Date)
            If (RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordInsertedBy")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(RecordInsertedBy,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CCCID As String, ByVal CCID As String, ByVal ProjectID As String, ByVal AnimalID As String, ByVal RecordInsertedDate As Date, ByVal RecordInsertedBy As String, ByVal Original_CCCID As String, ByVal Original_TS() As Byte) As Integer
            If (CCCID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CCCID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CCCID,String)
            End If
            If (CCID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CCID")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CCID,String)
            End If
            If (ProjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ProjectID")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ProjectID,String)
            End If
            If (AnimalID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AnimalID")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(AnimalID,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(RecordInsertedDate,Date)
            If (RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordInsertedBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(RecordInsertedBy,String)
            End If
            If (Original_CCCID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CCCID")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_CCCID,String)
            End If
            If (Original_TS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_TS,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CCID As String, ByVal ProjectID As String, ByVal AnimalID As String, ByVal RecordInsertedDate As Date, ByVal RecordInsertedBy As String, ByVal Original_CCCID As String, ByVal Original_TS() As Byte) As Integer
            Return Me.Update(Original_CCCID, CCID, ProjectID, AnimalID, RecordInsertedDate, RecordInsertedBy, Original_CCCID, Original_TS)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class xrefPopulationCaribouTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "xrefPopulationCaribou"
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("EID", "EID")
            tableMapping.ColumnMappings.Add("ProjectID", "ProjectID")
            tableMapping.ColumnMappings.Add("AnimalID", "AnimalID")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("PCID", "PCID")
            tableMapping.ColumnMappings.Add("TS", "TS")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[xrefPopulationCaribou] WHERE (([PCID] = @Original_PCID) AND (("& _ 
                "@IsNull_TS = 1 AND [TS] IS NULL) OR ([TS] = @Original_TS)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PCID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PCID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TS", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[xrefPopulationCaribou] ([RecordInsertedBy], [EID], [ProjectID]"& _ 
                ", [AnimalID], [RecordInsertedDate], [PCID]) VALUES (@RecordInsertedBy, @EID, @Pr"& _ 
                "ojectID, @AnimalID, @RecordInsertedDate, @PCID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT RecordInsertedBy, EID, "& _ 
                "ProjectID, AnimalID, RecordInsertedDate, PCID, TS FROM xrefPopulationCaribou WHE"& _ 
                "RE (PCID = @PCID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProjectID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnimalID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnimalID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PCID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PCID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[xrefPopulationCaribou] SET [RecordInsertedBy] = @RecordInsertedBy, "& _ 
                "[EID] = @EID, [ProjectID] = @ProjectID, [AnimalID] = @AnimalID, [RecordInsertedD"& _ 
                "ate] = @RecordInsertedDate, [PCID] = @PCID WHERE (([PCID] = @Original_PCID) AND "& _ 
                "((@IsNull_TS = 1 AND [TS] IS NULL) OR ([TS] = @Original_TS)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT RecordIns"& _ 
                "ertedBy, EID, ProjectID, AnimalID, RecordInsertedDate, PCID, TS FROM xrefPopulat"& _ 
                "ionCaribou WHERE (PCID = @PCID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProjectID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnimalID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnimalID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PCID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PCID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PCID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PCID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TS", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WRST_Caribou.My.MySettings.Default.WRST_CaribouConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT RecordInsertedBy, EID, ProjectID, AnimalID, RecordInsertedDate, PCID, TS F"& _ 
                "ROM dbo.xrefPopulationCaribou"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As WRST_CaribouDataSet.xrefPopulationCaribouDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As WRST_CaribouDataSet.xrefPopulationCaribouDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As WRST_CaribouDataSet.xrefPopulationCaribouDataTable = New WRST_CaribouDataSet.xrefPopulationCaribouDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As WRST_CaribouDataSet.xrefPopulationCaribouDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As WRST_CaribouDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "xrefPopulationCaribou")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PCID As String, ByVal Original_TS() As Byte) As Integer
            If (Original_PCID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PCID")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PCID,String)
            End If
            If (Original_TS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_TS,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal RecordInsertedBy As String, ByVal EID As String, ByVal ProjectID As String, ByVal AnimalID As String, ByVal RecordInsertedDate As Date, ByVal PCID As String) As Integer
            If (RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordInsertedBy")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(RecordInsertedBy,String)
            End If
            If (EID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("EID")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(EID,String)
            End If
            If (ProjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ProjectID")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ProjectID,String)
            End If
            If (AnimalID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AnimalID")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(AnimalID,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(RecordInsertedDate,Date)
            If (PCID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PCID")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PCID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal RecordInsertedBy As String, ByVal EID As String, ByVal ProjectID As String, ByVal AnimalID As String, ByVal RecordInsertedDate As Date, ByVal PCID As String, ByVal Original_PCID As String, ByVal Original_TS() As Byte) As Integer
            If (RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordInsertedBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(RecordInsertedBy,String)
            End If
            If (EID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("EID")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(EID,String)
            End If
            If (ProjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ProjectID")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ProjectID,String)
            End If
            If (AnimalID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AnimalID")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(AnimalID,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(RecordInsertedDate,Date)
            If (PCID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PCID")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PCID,String)
            End If
            If (Original_PCID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PCID")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PCID,String)
            End If
            If (Original_TS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_TS,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal RecordInsertedBy As String, ByVal EID As String, ByVal ProjectID As String, ByVal AnimalID As String, ByVal RecordInsertedDate As Date, ByVal Original_PCID As String, ByVal Original_TS() As Byte) As Integer
            Return Me.Update(RecordInsertedBy, EID, ProjectID, AnimalID, RecordInsertedDate, Original_PCID, Original_PCID, Original_TS)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class xrefRadiotrackingCaribouTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "xrefRadiotrackingCaribou"
            tableMapping.ColumnMappings.Add("RTCID", "RTCID")
            tableMapping.ColumnMappings.Add("RTID", "RTID")
            tableMapping.ColumnMappings.Add("ProjectID", "ProjectID")
            tableMapping.ColumnMappings.Add("AnimalID", "AnimalID")
            tableMapping.ColumnMappings.Add("RecordInsertedDate", "RecordInsertedDate")
            tableMapping.ColumnMappings.Add("RecordInsertedBy", "RecordInsertedBy")
            tableMapping.ColumnMappings.Add("TS", "TS")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[xrefRadiotrackingCaribou] WHERE (([RTCID] = @Original_RTCID) A"& _ 
                "ND ((@IsNull_TS = 1 AND [TS] IS NULL) OR ([TS] = @Original_TS)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RTCID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RTCID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TS", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[xrefRadiotrackingCaribou] ([RTCID], [RTID], [ProjectID], [Anim"& _ 
                "alID], [RecordInsertedDate], [RecordInsertedBy]) VALUES (@RTCID, @RTID, @Project"& _ 
                "ID, @AnimalID, @RecordInsertedDate, @RecordInsertedBy);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT RTCID, RTID, Pro"& _ 
                "jectID, AnimalID, RecordInsertedDate, RecordInsertedBy, TS FROM xrefRadiotrackin"& _ 
                "gCaribou WHERE (RTCID = @RTCID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RTCID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RTCID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RTID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RTID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProjectID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnimalID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnimalID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[xrefRadiotrackingCaribou] SET [RTCID] = @RTCID, [RTID] = @RTID, [Pr"& _ 
                "ojectID] = @ProjectID, [AnimalID] = @AnimalID, [RecordInsertedDate] = @RecordIns"& _ 
                "ertedDate, [RecordInsertedBy] = @RecordInsertedBy WHERE (([RTCID] = @Original_RT"& _ 
                "CID) AND ((@IsNull_TS = 1 AND [TS] IS NULL) OR ([TS] = @Original_TS)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT "& _ 
                "RTCID, RTID, ProjectID, AnimalID, RecordInsertedDate, RecordInsertedBy, TS FROM "& _ 
                "xrefRadiotrackingCaribou WHERE (RTCID = @RTCID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RTCID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RTCID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RTID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RTID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProjectID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProjectID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AnimalID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AnimalID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordInsertedBy", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordInsertedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RTCID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RTCID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TS", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WRST_Caribou.My.MySettings.Default.WRST_CaribouConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT RTCID, RTID, ProjectID, AnimalID, RecordInsertedDate, RecordInsertedBy, TS"& _ 
                " FROM dbo.xrefRadiotrackingCaribou"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As WRST_CaribouDataSet.xrefRadiotrackingCaribouDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As WRST_CaribouDataSet.xrefRadiotrackingCaribouDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As WRST_CaribouDataSet.xrefRadiotrackingCaribouDataTable = New WRST_CaribouDataSet.xrefRadiotrackingCaribouDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As WRST_CaribouDataSet.xrefRadiotrackingCaribouDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As WRST_CaribouDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "xrefRadiotrackingCaribou")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_RTCID As String, ByVal Original_TS() As Byte) As Integer
            If (Original_RTCID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RTCID")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_RTCID,String)
            End If
            If (Original_TS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_TS,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal RTCID As String, ByVal RTID As String, ByVal ProjectID As String, ByVal AnimalID As String, ByVal RecordInsertedDate As Date, ByVal RecordInsertedBy As String) As Integer
            If (RTCID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RTCID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(RTCID,String)
            End If
            If (RTID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RTID")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(RTID,String)
            End If
            If (ProjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ProjectID")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ProjectID,String)
            End If
            If (AnimalID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AnimalID")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(AnimalID,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(RecordInsertedDate,Date)
            If (RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordInsertedBy")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(RecordInsertedBy,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal RTCID As String, ByVal RTID As String, ByVal ProjectID As String, ByVal AnimalID As String, ByVal RecordInsertedDate As Date, ByVal RecordInsertedBy As String, ByVal Original_RTCID As String, ByVal Original_TS() As Byte) As Integer
            If (RTCID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RTCID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(RTCID,String)
            End If
            If (RTID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RTID")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(RTID,String)
            End If
            If (ProjectID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ProjectID")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ProjectID,String)
            End If
            If (AnimalID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AnimalID")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(AnimalID,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(RecordInsertedDate,Date)
            If (RecordInsertedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordInsertedBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(RecordInsertedBy,String)
            End If
            If (Original_RTCID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RTCID")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_RTCID,String)
            End If
            If (Original_TS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_TS,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal RTID As String, ByVal ProjectID As String, ByVal AnimalID As String, ByVal RecordInsertedDate As Date, ByVal RecordInsertedBy As String, ByVal Original_RTCID As String, ByVal Original_TS() As Byte) As Integer
            Return Me.Update(Original_RTCID, RTID, ProjectID, AnimalID, RecordInsertedDate, RecordInsertedBy, Original_RTCID, Original_TS)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _campaignsTableAdapter As CampaignsTableAdapter
        
        Private _capturesTableAdapter As CapturesTableAdapter
        
        Private _caribouTableAdapter As CaribouTableAdapter
        
        Private _compositionCountsTableAdapter As CompositionCountsTableAdapter
        
        Private _populationEstimateTableAdapter As PopulationEstimateTableAdapter
        
        Private _radioTrackingTableAdapter As RadioTrackingTableAdapter
        
        Private _surveyFlightsTableAdapter As SurveyFlightsTableAdapter
        
        Private _workLogTableAdapter As WorkLogTableAdapter
        
        Private _xrefCompCountCaribouTableAdapter As xrefCompCountCaribouTableAdapter
        
        Private _xrefPopulationCaribouTableAdapter As xrefPopulationCaribouTableAdapter
        
        Private _xrefRadiotrackingCaribouTableAdapter As xrefRadiotrackingCaribouTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CampaignsTableAdapter() As CampaignsTableAdapter
            Get
                Return Me._campaignsTableAdapter
            End Get
            Set
                Me._campaignsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CapturesTableAdapter() As CapturesTableAdapter
            Get
                Return Me._capturesTableAdapter
            End Get
            Set
                Me._capturesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CaribouTableAdapter() As CaribouTableAdapter
            Get
                Return Me._caribouTableAdapter
            End Get
            Set
                Me._caribouTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CompositionCountsTableAdapter() As CompositionCountsTableAdapter
            Get
                Return Me._compositionCountsTableAdapter
            End Get
            Set
                Me._compositionCountsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PopulationEstimateTableAdapter() As PopulationEstimateTableAdapter
            Get
                Return Me._populationEstimateTableAdapter
            End Get
            Set
                Me._populationEstimateTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RadioTrackingTableAdapter() As RadioTrackingTableAdapter
            Get
                Return Me._radioTrackingTableAdapter
            End Get
            Set
                Me._radioTrackingTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SurveyFlightsTableAdapter() As SurveyFlightsTableAdapter
            Get
                Return Me._surveyFlightsTableAdapter
            End Get
            Set
                Me._surveyFlightsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property WorkLogTableAdapter() As WorkLogTableAdapter
            Get
                Return Me._workLogTableAdapter
            End Get
            Set
                Me._workLogTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property xrefCompCountCaribouTableAdapter() As xrefCompCountCaribouTableAdapter
            Get
                Return Me._xrefCompCountCaribouTableAdapter
            End Get
            Set
                Me._xrefCompCountCaribouTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property xrefPopulationCaribouTableAdapter() As xrefPopulationCaribouTableAdapter
            Get
                Return Me._xrefPopulationCaribouTableAdapter
            End Get
            Set
                Me._xrefPopulationCaribouTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property xrefRadiotrackingCaribouTableAdapter() As xrefRadiotrackingCaribouTableAdapter
            Get
                Return Me._xrefRadiotrackingCaribouTableAdapter
            End Get
            Set
                Me._xrefRadiotrackingCaribouTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._campaignsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._campaignsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._campaignsTableAdapter.Connection
                End If
                If ((Not (Me._capturesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._capturesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._capturesTableAdapter.Connection
                End If
                If ((Not (Me._caribouTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._caribouTableAdapter.Connection) Is Nothing)) Then
                    Return Me._caribouTableAdapter.Connection
                End If
                If ((Not (Me._compositionCountsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._compositionCountsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._compositionCountsTableAdapter.Connection
                End If
                If ((Not (Me._populationEstimateTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._populationEstimateTableAdapter.Connection) Is Nothing)) Then
                    Return Me._populationEstimateTableAdapter.Connection
                End If
                If ((Not (Me._radioTrackingTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._radioTrackingTableAdapter.Connection) Is Nothing)) Then
                    Return Me._radioTrackingTableAdapter.Connection
                End If
                If ((Not (Me._surveyFlightsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._surveyFlightsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._surveyFlightsTableAdapter.Connection
                End If
                If ((Not (Me._workLogTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._workLogTableAdapter.Connection) Is Nothing)) Then
                    Return Me._workLogTableAdapter.Connection
                End If
                If ((Not (Me._xrefCompCountCaribouTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._xrefCompCountCaribouTableAdapter.Connection) Is Nothing)) Then
                    Return Me._xrefCompCountCaribouTableAdapter.Connection
                End If
                If ((Not (Me._xrefPopulationCaribouTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._xrefPopulationCaribouTableAdapter.Connection) Is Nothing)) Then
                    Return Me._xrefPopulationCaribouTableAdapter.Connection
                End If
                If ((Not (Me._xrefRadiotrackingCaribouTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._xrefRadiotrackingCaribouTableAdapter.Connection) Is Nothing)) Then
                    Return Me._xrefRadiotrackingCaribouTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._campaignsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._capturesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._caribouTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._compositionCountsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._populationEstimateTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._radioTrackingTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._surveyFlightsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._workLogTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._xrefCompCountCaribouTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._xrefPopulationCaribouTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._xrefRadiotrackingCaribouTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As WRST_CaribouDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._campaignsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Campaigns.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._campaignsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._surveyFlightsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SurveyFlights.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._surveyFlightsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._caribouTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Caribou.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._caribouTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._compositionCountsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CompositionCounts.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._compositionCountsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._populationEstimateTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PopulationEstimate.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._populationEstimateTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._radioTrackingTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.RadioTracking.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._radioTrackingTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._capturesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Captures.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._capturesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._workLogTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.WorkLog.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._workLogTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._xrefCompCountCaribouTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.xrefCompCountCaribou.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._xrefCompCountCaribouTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._xrefPopulationCaribouTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.xrefPopulationCaribou.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._xrefPopulationCaribouTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._xrefRadiotrackingCaribouTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.xrefRadiotrackingCaribou.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._xrefRadiotrackingCaribouTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As WRST_CaribouDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._campaignsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Campaigns.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._campaignsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._surveyFlightsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SurveyFlights.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._surveyFlightsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._caribouTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Caribou.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._caribouTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._compositionCountsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CompositionCounts.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._compositionCountsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._populationEstimateTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PopulationEstimate.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._populationEstimateTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._radioTrackingTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.RadioTracking.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._radioTrackingTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._capturesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Captures.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._capturesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._workLogTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.WorkLog.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._workLogTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._xrefCompCountCaribouTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.xrefCompCountCaribou.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._xrefCompCountCaribouTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._xrefPopulationCaribouTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.xrefPopulationCaribou.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._xrefPopulationCaribouTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._xrefRadiotrackingCaribouTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.xrefRadiotrackingCaribou.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._xrefRadiotrackingCaribouTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As WRST_CaribouDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._xrefRadiotrackingCaribouTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.xrefRadiotrackingCaribou.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._xrefRadiotrackingCaribouTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._xrefPopulationCaribouTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.xrefPopulationCaribou.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._xrefPopulationCaribouTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._xrefCompCountCaribouTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.xrefCompCountCaribou.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._xrefCompCountCaribouTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._workLogTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.WorkLog.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._workLogTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._capturesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Captures.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._capturesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._radioTrackingTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.RadioTracking.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._radioTrackingTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._populationEstimateTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PopulationEstimate.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._populationEstimateTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._compositionCountsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CompositionCounts.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._compositionCountsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._caribouTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Caribou.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._caribouTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._surveyFlightsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SurveyFlights.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._surveyFlightsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._campaignsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Campaigns.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._campaignsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As WRST_CaribouDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._campaignsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._campaignsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._capturesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._capturesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._caribouTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._caribouTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._compositionCountsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._compositionCountsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._populationEstimateTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._populationEstimateTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._radioTrackingTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._radioTrackingTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._surveyFlightsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._surveyFlightsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._workLogTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._workLogTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._xrefCompCountCaribouTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._xrefCompCountCaribouTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._xrefPopulationCaribouTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._xrefPopulationCaribouTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._xrefRadiotrackingCaribouTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._xrefRadiotrackingCaribouTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._campaignsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._campaignsTableAdapter, Me._campaignsTableAdapter.Connection)
                    Me._campaignsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._campaignsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._campaignsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._campaignsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._campaignsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._capturesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._capturesTableAdapter, Me._capturesTableAdapter.Connection)
                    Me._capturesTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._capturesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._capturesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._capturesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._capturesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._caribouTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._caribouTableAdapter, Me._caribouTableAdapter.Connection)
                    Me._caribouTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._caribouTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._caribouTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._caribouTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._caribouTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._compositionCountsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._compositionCountsTableAdapter, Me._compositionCountsTableAdapter.Connection)
                    Me._compositionCountsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._compositionCountsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._compositionCountsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._compositionCountsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._compositionCountsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._populationEstimateTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._populationEstimateTableAdapter, Me._populationEstimateTableAdapter.Connection)
                    Me._populationEstimateTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._populationEstimateTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._populationEstimateTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._populationEstimateTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._populationEstimateTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._radioTrackingTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._radioTrackingTableAdapter, Me._radioTrackingTableAdapter.Connection)
                    Me._radioTrackingTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._radioTrackingTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._radioTrackingTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._radioTrackingTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._radioTrackingTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._surveyFlightsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._surveyFlightsTableAdapter, Me._surveyFlightsTableAdapter.Connection)
                    Me._surveyFlightsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._surveyFlightsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._surveyFlightsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._surveyFlightsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._surveyFlightsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._workLogTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._workLogTableAdapter, Me._workLogTableAdapter.Connection)
                    Me._workLogTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._workLogTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._workLogTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._workLogTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._workLogTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._xrefCompCountCaribouTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._xrefCompCountCaribouTableAdapter, Me._xrefCompCountCaribouTableAdapter.Connection)
                    Me._xrefCompCountCaribouTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._xrefCompCountCaribouTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._xrefCompCountCaribouTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._xrefCompCountCaribouTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._xrefCompCountCaribouTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._xrefPopulationCaribouTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._xrefPopulationCaribouTableAdapter, Me._xrefPopulationCaribouTableAdapter.Connection)
                    Me._xrefPopulationCaribouTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._xrefPopulationCaribouTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._xrefPopulationCaribouTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._xrefPopulationCaribouTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._xrefPopulationCaribouTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._xrefRadiotrackingCaribouTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._xrefRadiotrackingCaribouTableAdapter, Me._xrefRadiotrackingCaribouTableAdapter.Connection)
                    Me._xrefRadiotrackingCaribouTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._xrefRadiotrackingCaribouTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._xrefRadiotrackingCaribouTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._xrefRadiotrackingCaribouTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._xrefRadiotrackingCaribouTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._campaignsTableAdapter) Is Nothing) Then
                    Me._campaignsTableAdapter.Connection = CType(revertConnections(Me._campaignsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._campaignsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._capturesTableAdapter) Is Nothing) Then
                    Me._capturesTableAdapter.Connection = CType(revertConnections(Me._capturesTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._capturesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._caribouTableAdapter) Is Nothing) Then
                    Me._caribouTableAdapter.Connection = CType(revertConnections(Me._caribouTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._caribouTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._compositionCountsTableAdapter) Is Nothing) Then
                    Me._compositionCountsTableAdapter.Connection = CType(revertConnections(Me._compositionCountsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._compositionCountsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._populationEstimateTableAdapter) Is Nothing) Then
                    Me._populationEstimateTableAdapter.Connection = CType(revertConnections(Me._populationEstimateTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._populationEstimateTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._radioTrackingTableAdapter) Is Nothing) Then
                    Me._radioTrackingTableAdapter.Connection = CType(revertConnections(Me._radioTrackingTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._radioTrackingTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._surveyFlightsTableAdapter) Is Nothing) Then
                    Me._surveyFlightsTableAdapter.Connection = CType(revertConnections(Me._surveyFlightsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._surveyFlightsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._workLogTableAdapter) Is Nothing) Then
                    Me._workLogTableAdapter.Connection = CType(revertConnections(Me._workLogTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._workLogTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._xrefCompCountCaribouTableAdapter) Is Nothing) Then
                    Me._xrefCompCountCaribouTableAdapter.Connection = CType(revertConnections(Me._xrefCompCountCaribouTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._xrefCompCountCaribouTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._xrefPopulationCaribouTableAdapter) Is Nothing) Then
                    Me._xrefPopulationCaribouTableAdapter.Connection = CType(revertConnections(Me._xrefPopulationCaribouTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._xrefPopulationCaribouTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._xrefRadiotrackingCaribouTableAdapter) Is Nothing) Then
                    Me._xrefRadiotrackingCaribouTableAdapter.Connection = CType(revertConnections(Me._xrefRadiotrackingCaribouTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._xrefRadiotrackingCaribouTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
